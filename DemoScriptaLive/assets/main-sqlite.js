(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.tz.nw === region.rb.nw)
	{
		return 'on line ' + region.tz.nw;
	}
	return 'on lines ' + region.tz.nw + ' through ' + region.rb.nw;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.mY,
		impl.ux,
		impl.tI,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		cF: func(record.cF),
		kX: record.kX,
		kt: record.kt
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.cF;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.kX;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.kt) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.mY,
		impl.ux,
		impl.tI,
		function(sendToApp, initialModel) {
			var view = impl.uC;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.mY,
		impl.ux,
		impl.tI,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.kM && impl.kM(sendToApp)
			var view = impl.uC;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.qh);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.ic) && (_VirtualDom_doc.title = title = doc.ic);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.sB;
	var onUrlRequest = impl.sC;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		kM: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.om === next.om
							&& curr.mP === next.mP
							&& curr.og.a === next.og.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		mY: function(flags)
		{
			return A3(impl.mY, flags, _Browser_getUrl(), key);
		},
		uC: impl.uC,
		ux: impl.ux,
		tI: impl.tI
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { rt: 'hidden', qv: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { rt: 'mozHidden', qv: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { rt: 'msHidden', qv: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { rt: 'webkitHidden', qv: 'webkitvisibilitychange' }
		: { rt: 'hidden', qv: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		oB: _Browser_getScene(),
		px: {
			be: _Browser_window.pageXOffset,
			uL: _Browser_window.pageYOffset,
			uE: _Browser_doc.documentElement.clientWidth,
			mL: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		uE: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		mL: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			oB: {
				uE: node.scrollWidth,
				mL: node.scrollHeight
			},
			px: {
				be: node.scrollLeft,
				uL: node.scrollTop,
				uE: node.clientWidth,
				mL: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			oB: _Browser_getScene(),
			px: {
				be: x,
				uL: y,
				uE: _Browser_doc.documentElement.clientWidth,
				mL: _Browser_doc.documentElement.clientHeight
			},
			q6: {
				be: x + rect.left,
				uL: y + rect.top,
				uE: rect.width,
				mL: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.nQ) { flags += 'm'; }
	if (options.lM) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.rd.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.rd.b, xhr)); });
		$elm$core$Maybe$isJust(request.pf) && _Http_track(router, xhr, request.pf.a);

		try {
			xhr.open(request.r9, request.uz, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.uz));
		}

		_Http_configureRequest(xhr, request);

		request.qh.a && xhr.setRequestHeader('Content-Type', request.qh.a);
		xhr.send(request.qh.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.mK; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.ub.a || 0;
	xhr.responseType = request.rd.d;
	xhr.withCredentials = request.pX;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		uz: xhr.responseURL,
		tA: xhr.status,
		tB: xhr.statusText,
		mK: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			to: event.loaded,
			eJ: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			sW: event.loaded,
			eJ: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}

var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.U) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder._),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder._);
		} else {
			var treeLen = builder.U * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.ai) : builder.ai;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.U);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder._) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder._);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{ai: nodeList, U: (len / $elm$core$Array$branchFactor) | 0, _: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {mE: fragment, mP: host, ob: path, og: port_, om: protocol, on: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$element = _Browser_element;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$MainSQLite$CommonMsg = function (a) {
	return {$: 0, a: a};
};
var $author$project$Common$Model$LoadUserNameDelayed = {$: 22};
var $author$project$MainSQLite$StorageMsg = function (a) {
	return {$: 1, a: a};
};
var $author$project$Common$Model$Tick = function (a) {
	return {$: 13, a: a};
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $author$project$Storage$SQLite$init = {qU: false, rG: false};
var $author$project$Theme$Dark = 1;
var $author$project$ScriptaV2$Language$EnclosureLang = 1;
var $author$project$Theme$Light = 0;
var $author$project$Common$Model$PrintWaiting = 0;
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $author$project$Differential$AbstractDifferentialParser$init = F3(
	function (f, initialData, content) {
		var chunks = f.iN(content);
		var parsed_ = A2($elm$core$List$map, f.iM, chunks);
		var tree_ = f.jd(parsed_);
		var _v0 = A2(f.$9, initialData, tree_);
		var newAccumulator = _v0.a;
		var tree = _v0.b;
		return {
			io: newAccumulator,
			gH: chunks,
			fE: initialData,
			hm: initialData.nh,
			jU: f.ji(tree),
			fU: parsed_,
			k7: tree
		};
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {lW: col, qL: contextStack, sR: problem, ta: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.e, s.ta, s.lW, s.oV);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.n)) : A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.e, newOffset) < 0,
			0,
			{lW: newCol, n: s.n, hh: s.hh, e: newOffset, ta: newRow, oV: s.oV});
	};
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$Advanced$getOffset = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.e, s);
};
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $elm$parser$Parser$Advanced$getSource = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.oV, s);
};
var $elm$parser$Parser$getSource = $elm$parser$Parser$Advanced$getSource;
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $author$project$Differential$Utility$keyedParagraphParser = function (headline) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						F3(
							function (start, end, src) {
								return A3($elm$core$String$slice, start, end, src);
							})),
					$elm$parser$Parser$chompUntil(headline)),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('\n\n'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {lW: col, sR: problem, ta: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.ta, p.lW, p.sR);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{lW: 1, n: _List_Nil, hh: 1, e: 0, ta: 1, oV: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $author$project$Differential$Utility$getKeyedParagraph = F2(
	function (headline, target) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Differential$Utility$keyedParagraphParser(headline),
			target);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var data = _v0.a;
			return $elm$core$Maybe$Just(data);
		}
	});
var $elm$core$String$lines = _String_lines;
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$trim = _String_trim;
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$ScriptaV2$DifferentialCompiler$makeInitialData = F2(
	function (filesToIncludeDict, lang) {
		var keys = $elm$core$Dict$keys(filesToIncludeDict);
		var macroKeys = A2(
			$elm$core$List$filter,
			function (k) {
				return A2(
					$elm$core$String$contains,
					'texmacros',
					$elm$core$String$toLower(k));
			},
			keys);
		var getMacroText = function (key) {
			var _v0 = A2($elm$core$Dict$get, key, filesToIncludeDict);
			if (_v0.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var macroText_ = _v0.a;
				return $elm$core$Maybe$Just(
					{
						cE: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($author$project$Differential$Utility$getKeyedParagraph, '|| mathmacros', macroText_)),
						cT: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($author$project$Differential$Utility$getKeyedParagraph, '|| textmacros', macroText_))
					});
			}
		};
		var folder = F2(
			function (_new, acc) {
				return {cE: _new.cE + ('\n' + acc.cE), cT: _new.cT + ('\n' + acc.cT)};
			});
		var fixup = F2(
			function (key, str) {
				return function (x) {
					return key + ('\n' + x);
				}(
					A2(
						$elm$core$String$join,
						'\n',
						A2(
							$elm$core$List$filter,
							function (str_) {
								return $elm$core$String$length(str_) > 0;
							},
							A2(
								$elm$core$List$map,
								function (str_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, key, '', str_));
								},
								$elm$core$String$lines(str)))));
			});
		var macroTexts = function (r) {
			return {
				cE: A2(fixup, '|| mathmacros', r.cE),
				cT: A2(fixup, '|| textmacros', r.cT)
			};
		}(
			A3(
				$elm$core$List$foldl,
				folder,
				{cE: '', cT: ''},
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					A2($elm$core$List$map, getMacroText, keys))));
		return {nh: lang, r6: macroTexts.cE, t0: macroTexts.cT, uA: 4};
	});
var $author$project$ScriptaV2$DifferentialCompiler$changeLineNumber = F2(
	function (delta, block) {
		var oldMeta = block.nJ;
		var newMeta = _Utils_update(
			oldMeta,
			{jR: oldMeta.jR + delta});
		return _Utils_update(
			block,
			{nJ: newMeta});
	});
var $author$project$Generic$BlockUtilities$getPrimitiveBlockName = function (block) {
	var _v0 = block.fC;
	switch (_v0.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$ScriptaV2$DifferentialCompiler$chunkLevel = function (block) {
	return block.hh + ((_Utils_eq(
		$author$project$Generic$BlockUtilities$getPrimitiveBlockName(block),
		$elm$core$Maybe$Just('item')) || _Utils_eq(
		$author$project$Generic$BlockUtilities$getPrimitiveBlockName(block),
		$elm$core$Maybe$Just('numbered'))) ? 1 : 0);
};
var $author$project$ScriptaV2$Config$idPrefix = 'L';
var $author$project$M$Regex$Numbered = function (a) {
	return {$: 0, a: a};
};
var $author$project$M$Regex$Unknown = {$: 2};
var $author$project$M$Regex$Unnumbered = function (a) {
	return {$: 1, a: a};
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {jz: index, nB: match, su: number, tH: submatches};
	});
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{lM: false, nQ: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$M$Regex$titleOrAsteriskSectionRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^(#+|\\*+)\\s*'));
var $author$project$M$Regex$findSectionPrefix_ = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.nB;
				},
				A2($elm$regex$Regex$find, $author$project$M$Regex$titleOrAsteriskSectionRegex, string))));
};
var $author$project$M$Regex$findSectionType = function (string) {
	var _v0 = $author$project$M$Regex$findSectionPrefix_(string);
	if (!_v0.$) {
		var prefix = _v0.a;
		return A2($elm$core$String$startsWith, '#', prefix) ? $author$project$M$Regex$Numbered(prefix) : (A2($elm$core$String$startsWith, '*', prefix) ? $author$project$M$Regex$Unnumbered(prefix) : $author$project$M$Regex$Unknown);
	} else {
		return $author$project$M$Regex$Unknown;
	}
};
var $author$project$M$Regex$findSectionPrefix = function (string) {
	var _v0 = $author$project$M$Regex$findSectionType(string);
	switch (_v0.$) {
		case 0:
			var prefix = _v0.a;
			return $elm$core$Maybe$Just(prefix);
		case 1:
			var prefix = _v0.a;
			return $elm$core$Maybe$Just(prefix);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Line$HEMissingName = 1;
var $author$project$Generic$Line$HENoContent = 2;
var $author$project$Generic$Language$Ordinary = function (a) {
	return {$: 1, a: a};
};
var $author$project$Generic$Language$Paragraph = {$: 0};
var $author$project$Generic$Language$Verbatim = function (a) {
	return {$: 2, a: a};
};
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Tools$KV$cleanArgs = function (strs) {
	var _v0 = A2(
		$elm_community$list_extra$List$Extra$findIndex,
		function (t) {
			return A2($elm$core$String$contains, ':', t);
		},
		strs);
	if (_v0.$ === 1) {
		return strs;
	} else {
		var k = _v0.a;
		return A2($elm$core$List$take, k, strs);
	}
};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$Tools$KV$KVInKey = 0;
var $author$project$Tools$Loop$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Tools$Loop$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Tools$KV$KVInValue = 1;
var $author$project$Tools$Loop$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm_community$list_extra$List$Extra$uncons = function (list) {
	if (!list.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = list.a;
		var rest = list.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(first, rest));
	}
};
var $author$project$Tools$KV$nextKVStep = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$uncons(state.cb);
	if (_v0.$ === 1) {
		var kvList_ = function () {
			var _v2 = state.b5;
			if (_v2.$ === 1) {
				return state.cA;
			} else {
				var key = _v2.a;
				return A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return _Utils_Tuple2(
							k,
							$elm$core$List$reverse(v));
					},
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, state.by),
						state.cA));
			}
		}();
		return $author$project$Tools$Loop$Done(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							A2($elm$core$String$join, ' ', v));
					},
					kvList_)));
	} else {
		var _v4 = _v0.a;
		var item = _v4.a;
		var rest = _v4.b;
		var _v5 = state.dk;
		if (!_v5) {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v6 = state.b5;
				if (_v6.$ === 1) {
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								b5: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								cb: rest,
								dk: 1
							}));
				} else {
					var key = _v6.a;
					return $author$project$Tools$Loop$Loop(
						{
							b5: $elm$core$Maybe$Just(
								A2($elm$core$String$dropRight, 1, item)),
							by: _List_Nil,
							cb: rest,
							cA: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, state.by),
								state.cA),
							dk: 1
						});
				}
			} else {
				return $author$project$Tools$Loop$Loop(
					_Utils_update(
						state,
						{cb: rest}));
			}
		} else {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v7 = state.b5;
				if (_v7.$ === 1) {
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								b5: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								by: _List_Nil,
								cb: rest,
								dk: 1
							}));
				} else {
					var key = _v7.a;
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								b5: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								by: _List_Nil,
								cb: rest,
								cA: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(key, state.by),
									state.cA),
								dk: 1
							}));
				}
			} else {
				return $author$project$Tools$Loop$Loop(
					_Utils_update(
						state,
						{
							by: A2($elm$core$List$cons, item, state.by),
							cb: rest
						}));
			}
		}
	}
};
var $author$project$Tools$KV$prepareKVData = function (data_) {
	var initialState = {b5: $elm$core$Maybe$Nothing, by: _List_Nil, cb: data_, cA: _List_Nil, dk: 0};
	return A2($author$project$Tools$Loop$loop, initialState, $author$project$Tools$KV$nextKVStep);
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $author$project$Tools$KV$explode = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split(':'),
		txt);
};
var $author$project$Tools$KV$fix = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			return A2(
				$elm$core$List$cons,
				a + ':',
				A2($elm$core$List$cons, b, _List_Nil));
		} else {
			var a = strs.a;
			return A2($elm$core$List$cons, a, _List_Nil);
		}
	} else {
		return _List_Nil;
	}
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Tools$KV$prepareList = function (strs) {
	return A2(
		$elm$core$List$filter,
		function (s) {
			return s !== '';
		},
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				$author$project$Tools$KV$fix,
				$author$project$Tools$KV$explode(strs))));
};
var $author$project$Tools$KV$argsAndProperties = function (words) {
	var args = $author$project$Tools$KV$cleanArgs(words);
	var namedArgs = A2(
		$elm$core$List$drop,
		$elm$core$List$length(args),
		words);
	var properties = $author$project$Tools$KV$prepareKVData(
		$author$project$Tools$KV$prepareList(namedArgs));
	return _Utils_Tuple2(args, properties);
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $author$project$M$PrimitiveBlock$verbatimWords = _List_fromArray(
	['math', 'chem', 'compute', 'equation', 'aligned', 'array', 'textarray', 'table', 'code', 'verse', 'verbatim', 'load', 'load-data', 'hide', 'texComment', 'docinfo', 'mathmacros', 'textmacros', 'csvtable', 'table', 'chart', 'svg', 'quiver', 'image', 'tikz', 'load-files', 'include', 'setup', 'iframe']);
var $elm$core$String$words = _String_words;
var $author$project$M$PrimitiveBlock$getHeadingData = function (line_) {
	var line = $elm$core$String$trim(line_);
	var _v0 = $author$project$Tools$KV$argsAndProperties(
		$elm$core$String$words(line));
	var args1 = _v0.a;
	var properties = _v0.b;
	var _v1 = $author$project$M$Regex$findSectionType(line);
	switch (_v1.$) {
		case 0:
			var prefixSection = _v1.a;
			return $elm$core$Result$Ok(
				{
					lv: _List_fromArray(
						[
							$elm$core$String$fromInt(
							$elm$core$String$length(
								$elm$core$String$trim(prefixSection)))
						]),
					fC: $author$project$Generic$Language$Ordinary('section'),
					sS: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
				});
		case 1:
			var unnumberedPrefix = _v1.a;
			return $elm$core$Result$Ok(
				{
					lv: _List_fromArray(
						[
							$elm$core$String$fromInt(
							$elm$core$String$length(
								$elm$core$String$trim(unnumberedPrefix)))
						]),
					fC: $author$project$Generic$Language$Ordinary('section*'),
					sS: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
				});
		default:
			if (!args1.b) {
				return $elm$core$Result$Ok(
					{lv: _List_Nil, fC: $author$project$Generic$Language$Paragraph, sS: $elm$core$Dict$empty});
			} else {
				var prefix = args1.a;
				var args = args1.b;
				switch (prefix) {
					case '||':
						if (!args.b) {
							return $elm$core$Result$Err(1);
						} else {
							var name = args.a;
							var args2 = args.b;
							return $elm$core$Result$Ok(
								{
									lv: args2,
									fC: $author$project$Generic$Language$Verbatim(name),
									sS: properties
								});
						}
					case '|':
						if (!args.b) {
							return $elm$core$Result$Err(1);
						} else {
							var name = args.a;
							var args2 = args.b;
							return $elm$core$Result$Ok(
								A2($elm$core$List$member, name, $author$project$M$PrimitiveBlock$verbatimWords) ? {
									lv: args2,
									fC: $author$project$Generic$Language$Verbatim(name),
									sS: properties
								} : {
									lv: args2,
									fC: $author$project$Generic$Language$Ordinary(name),
									sS: properties
								});
						}
					case '-':
						var reducedLine = A3($elm$core$String$replace, '- ', '', line);
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Ordinary('item'),
								sS: A2(
									$elm$core$Dict$singleton,
									'firstLine',
									A3($elm$core$String$replace, '- ', '', line))
							});
					case '.':
						var reducedLine = A3($elm$core$String$replace, '. ', '', line);
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Ordinary('numbered'),
								sS: A2(
									$elm$core$Dict$singleton,
									'firstLine',
									A3($elm$core$String$replace, '. ', '', line))
							});
					case '```':
						return $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Verbatim('code'),
								sS: $elm$core$Dict$empty
							});
					case '$$':
						return $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Verbatim('math'),
								sS: $elm$core$Dict$empty
							});
					default:
						return $elm$core$Result$Ok(
							{lv: _List_Nil, fC: $author$project$Generic$Language$Paragraph, sS: $elm$core$Dict$empty});
				}
			}
	}
};
var $author$project$M$PrimitiveBlock$isVerbatimLine = function (str) {
	return (A2($elm$core$String$left, 2, str) === '||') || ((A2($elm$core$String$left, 3, str) === '```') || (A2($elm$core$String$left, 2, str) === '$$'));
};
var $author$project$M$PrimitiveBlock$functionData = {g4: $author$project$M$Regex$findSectionPrefix, jh: $author$project$M$PrimitiveBlock$getHeadingData, nb: $author$project$M$PrimitiveBlock$isVerbatimLine};
var $author$project$Generic$PrimitiveBlock$init = F4(
	function (parserFunctions, initialId, outerCount, lines) {
		return {a_: _List_Nil, e8: 0, l$: 0, aa: $elm$core$Maybe$Nothing, mo: $elm$core$Maybe$Nothing, mU: initialId, ed: false, jx: false, hh: 0, fI: '0, START', jR: 0, ag: lines, n1: outerCount, cM: parserFunctions, sO: 0};
	});
var $author$project$Generic$PrimitiveBlock$addCurrentLine_ = F2(
	function (line, block) {
		var prefix = line.ks;
		var content = line.iV;
		var oldMeta = block.nJ;
		var newMeta = _Utils_update(
			oldMeta,
			{oR: block.nJ.oR + ('\n' + (prefix + content))});
		return _Utils_update(
			block,
			{
				qh: A2($elm$core$List$cons, line.iV, block.qh),
				nJ: newMeta
			});
	});
var $author$project$Generic$PrimitiveBlock$addCurrentLine2 = F2(
	function (state, currentLine) {
		var _v0 = state.aa;
		if (_v0.$ === 1) {
			return _Utils_update(
				state,
				{
					ag: A2($elm$core$List$drop, 1, state.ag)
				});
		} else {
			var block = _v0.a;
			return _Utils_update(
				state,
				{
					l$: state.l$ + 1,
					aa: $elm$core$Maybe$Just(
						A2($author$project$Generic$PrimitiveBlock$addCurrentLine_, currentLine, block)),
					jR: state.jR + 1,
					ag: A2($elm$core$List$drop, 1, state.ag)
				});
		}
	});
var $author$project$Generic$PrimitiveBlock$advance = F2(
	function (newPosition, state) {
		return _Utils_update(
			state,
			{
				l$: state.l$ + 1,
				jR: state.jR + 1,
				ag: A2($elm$core$List$drop, 1, state.ag),
				sO: newPosition
			});
	});
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.oV);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.e, offset) < 0,
					0,
					{lW: col, n: s0.n, hh: s0.hh, e: offset, ta: row, oV: s0.oV});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.e, s.ta, s.lW, s);
	};
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $author$project$Generic$Line$prefixParser = F2(
	function (position, lineNumber) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							F4(
								function (prefixStart, prefixEnd, lineEnd, content) {
									return {
										iV: content,
										hh: prefixEnd - prefixStart,
										jR: lineNumber,
										sO: position,
										ks: A3($elm$core$String$slice, 0, prefixEnd, content)
									};
								})),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompWhile(
								function (c) {
									return c === ' ';
								}))),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompWhile(
							function (c) {
								return c !== '\n';
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$Generic$Line$classify = F3(
	function (position, lineNumber, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			A2($author$project$Generic$Line$prefixParser, position, lineNumber),
			str);
		if (_v0.$ === 1) {
			return {iV: '!!ERROR', hh: 0, jR: lineNumber, sO: position, ks: ''};
		} else {
			var result = _v0.a;
			return result;
		}
	});
var $author$project$Generic$BlockUtilities$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$Generic$PrimitiveBlock$finalize = function (block) {
	var properties = function () {
		var _v3 = block.fC;
		if ((_v3.$ === 1) && (_v3.a === 'document')) {
			var docId = A2(
				$elm$core$Maybe$withDefault,
				'noDocId',
				A2(
					$elm$core$Maybe$map,
					function (_v4) {
						var a = _v4.a;
						var b = _v4.b;
						return a + (':' + b);
					},
					$elm$core$List$head(
						$elm$core$Dict$toList(block.sS))));
			return A3($elm$core$Dict$insert, 'docId', docId, block.sS);
		} else {
			return block.sS;
		}
	}();
	var oldMeta = block.nJ;
	var content_ = $elm$core$List$reverse(block.qh);
	var args = function () {
		var _v2 = A2($elm$core$Dict$get, 'label', properties);
		if (!_v2.$) {
			return A2($elm$core$List$member, 'numbered', block.lv) ? block.lv : A2($elm$core$List$cons, 'numbered', block.lv);
		} else {
			return block.lv;
		}
	}();
	var addLabel = function (content__) {
		var _v1 = A2($elm$core$Dict$get, 'label', block.sS);
		if (!_v1.$) {
			var lbl = _v1.a;
			return A2($elm$core$List$cons, '\\label{' + (lbl + '}'), content__);
		} else {
			return content__;
		}
	};
	var content = function () {
		var _v0 = block.fC;
		_v0$2:
		while (true) {
			if (_v0.$ === 2) {
				switch (_v0.a) {
					case 'equation':
						return addLabel(content_);
					case 'aligned':
						return addLabel(content_);
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return content_;
	}();
	var sourceText = (!_Utils_eq(block.fC, $author$project$Generic$Language$Paragraph)) ? A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$cons, block.ri, content)) : A2($elm$core$String$join, '\n', content);
	var newMeta = _Utils_update(
		oldMeta,
		{oR: sourceText});
	return _Utils_update(
		block,
		{lv: args, qh: content, nJ: newMeta, sS: properties});
};
var $author$project$Generic$PrimitiveBlock$fixMarkdownTitleBlock = F2(
	function (findTitlePrefix, block) {
		var _v0 = findTitlePrefix(block.ri);
		if (_v0.$ === 1) {
			return block;
		} else {
			var prefix = _v0.a;
			return (prefix === '!!') ? _Utils_update(
				block,
				{
					qh: A2(
						$elm$core$List$cons,
						A3($elm$core$String$replace, prefix, '', block.ri),
						block.qh),
					fC: $author$project$Generic$Language$Ordinary('title')
				}) : ((A2(
				$elm$core$String$left,
				1,
				$elm$core$String$trim(prefix)) === '#') ? _Utils_update(
				block,
				{
					qh: A2(
						$elm$core$List$cons,
						A3($elm$core$String$replace, prefix, '', block.ri),
						block.qh),
					fC: $author$project$Generic$Language$Ordinary('section')
				}) : ((A2(
				$elm$core$String$left,
				1,
				$elm$core$String$trim(prefix)) === '*') ? _Utils_update(
				block,
				{
					qh: A2(
						$elm$core$List$cons,
						A3($elm$core$String$replace, prefix, '', block.ri),
						block.qh),
					fC: $author$project$Generic$Language$Ordinary('section*')
				}) : _Utils_update(
				block,
				{
					qh: A2(
						$elm$core$List$cons,
						A3($elm$core$String$replace, prefix, '', block.ri),
						block.qh)
				})));
		}
	});
var $elm$core$Basics$not = _Basics_not;
var $author$project$Generic$PrimitiveBlock$acceptBlock = F2(
	function (tag, block) {
		return !_Utils_eq(
			block.fC,
			$author$project$Generic$Language$Ordinary(tag));
	});
var $author$project$Tools$Utility$ordinaryTagAtEndRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('.*\n| .*$'));
var $author$project$Tools$Utility$findOrdinaryTagAtEnd = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			$elm$core$List$reverse(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.nB;
					},
					A2($elm$regex$Regex$find, $author$project$Tools$Utility$ordinaryTagAtEndRegex, string)))));
};
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$Generic$PrimitiveBlock$findOrdinaryTagAtEnd = function (primitiveBlock) {
	return $author$project$Tools$Utility$findOrdinaryTagAtEnd(
		A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm_community$list_extra$List$Extra$last(primitiveBlock.qh)));
};
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $author$project$Generic$PrimitiveBlock$raiseBlockLevelsIfNeeded_ = F2(
	function (lastBlock, blocks) {
		var _v0 = $author$project$Generic$PrimitiveBlock$findOrdinaryTagAtEnd(lastBlock);
		if (_v0.$ === 1) {
			return blocks;
		} else {
			var tag = _v0.a;
			if (!A2(
				$elm$core$List$member,
				tag,
				_List_fromArray(
					['quotation', 'indent', 'theorem']))) {
				return blocks;
			} else {
				var candidateBlocksToRaise = A2(
					$elm_community$list_extra$List$Extra$takeWhile,
					$author$project$Generic$PrimitiveBlock$acceptBlock(tag),
					blocks);
				var raisedBlocks_ = A2(
					$elm$core$List$map,
					function (b) {
						return _Utils_update(
							b,
							{hh: b.hh + 2});
					},
					candidateBlocksToRaise);
				var n = $elm$core$List$length(raisedBlocks_);
				var tail = A2($elm$core$List$drop, n, blocks);
				var raisedBlocks = function () {
					var _v1 = $elm_community$list_extra$List$Extra$uncons(raisedBlocks_);
					if (_v1.$ === 1) {
						return raisedBlocks_;
					} else {
						var _v2 = _v1.a;
						var first = _v2.a;
						var rest = _v2.b;
						var m = $elm$core$List$length(first.qh);
						return A2(
							$elm$core$List$cons,
							_Utils_update(
								first,
								{
									qh: A2($elm$core$List$take, m - 1, first.qh)
								}),
							rest);
					}
				}();
				return _Utils_ap(raisedBlocks, tail);
			}
		}
	});
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Tools$Utility$replaceLeadingDashSpace = function (str) {
	var regex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^- '));
	return A3(
		$elm$regex$Regex$replace,
		regex,
		function (_v0) {
			return '';
		},
		str);
};
var $author$project$Tools$Utility$replaceLeadingDotSpace = function (str) {
	var regex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^\\. '));
	return A3(
		$elm$regex$Regex$replace,
		regex,
		function (_v0) {
			return '';
		},
		str);
};
var $author$project$Generic$PrimitiveBlock$transformBlock = F2(
	function (findTitlePrefix, block) {
		var _v0 = $author$project$Generic$BlockUtilities$getPrimitiveBlockName(block);
		_v0$6:
		while (true) {
			if (!_v0.$) {
				switch (_v0.a) {
					case 'section':
						var _v1 = $elm$core$List$head(block.lv);
						if (_v1.$ === 1) {
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'level', '1', block.sS)
								});
						} else {
							var level = _v1.a;
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'level', level, block.sS)
								});
						}
					case 'section*':
						var _v2 = $elm$core$List$head(block.lv);
						if (_v2.$ === 1) {
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'level', '1', block.sS)
								});
						} else {
							var level = _v2.a;
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'level', level, block.sS)
								});
						}
					case 'subsection':
						return _Utils_update(
							block,
							{
								fC: $author$project$Generic$Language$Ordinary('section'),
								sS: A3($elm$core$Dict$insert, 'level', '2', block.sS)
							});
					case 'subsubsection':
						return _Utils_update(
							block,
							{
								fC: $author$project$Generic$Language$Ordinary('section'),
								sS: A3($elm$core$Dict$insert, 'level', '3', block.sS)
							});
					case 'item':
						return _Utils_update(
							block,
							{
								qh: A2(
									$elm$core$List$cons,
									$author$project$Tools$Utility$replaceLeadingDashSpace(
										A3(
											$elm$core$String$replace,
											'| item',
											'',
											$elm$core$String$trim(block.ri))),
									block.qh)
							});
					case 'numbered':
						return _Utils_update(
							block,
							{
								qh: A2(
									$elm$core$List$cons,
									$author$project$Tools$Utility$replaceLeadingDotSpace(
										A3(
											$elm$core$String$replace,
											'| numbered',
											'',
											$elm$core$String$trim(block.ri))),
									block.qh)
							});
					default:
						break _v0$6;
				}
			} else {
				break _v0$6;
			}
		}
		return block;
	});
var $author$project$Generic$BlockUtilities$updateMeta = F2(
	function (transformMeta, block) {
		var oldMeta = block.nJ;
		var newMeta = transformMeta(oldMeta);
		return _Utils_update(
			block,
			{nJ: newMeta});
	});
var $author$project$Generic$PrimitiveBlock$commitBlock = F2(
	function (state, currentLine) {
		var _v0 = state.aa;
		if (_v0.$ === 1) {
			return _Utils_update(
				state,
				{
					hh: currentLine.hh,
					ag: A2($elm$core$List$drop, 1, state.ag)
				});
		} else {
			var block__ = _v0.a;
			var block_ = function () {
				var id = $elm$core$String$fromInt(state.jR) + ('-' + $elm$core$String$fromInt(state.e8));
				return function (b) {
					return _Utils_update(
						b,
						{
							sS: A3($elm$core$Dict$insert, 'outerId', id, b.sS)
						});
				}(
					A2(
						$author$project$Generic$BlockUtilities$updateMeta,
						function (m) {
							return _Utils_update(
								m,
								{
									n_: $elm$core$List$length(block__.qh)
								});
						},
						A2(
							$author$project$Generic$BlockUtilities$updateMeta,
							function (m) {
								return _Utils_update(
									m,
									{hg: id});
							},
							block__)));
			}();
			var block = function () {
				var _v1 = block_.fC;
				switch (_v1.$) {
					case 0:
						return $author$project$Generic$PrimitiveBlock$finalize(block_);
					case 1:
						var _v2 = A2($elm$core$Dict$get, 'section-type', block_.sS);
						if ((!_v2.$) && (_v2.a === 'markdown')) {
							return A2(
								$author$project$Generic$PrimitiveBlock$fixMarkdownTitleBlock,
								state.cM.g4,
								A2(
									$author$project$Generic$PrimitiveBlock$transformBlock,
									state.cM.g4,
									$author$project$Generic$PrimitiveBlock$finalize(
										_Utils_update(
											block_,
											{
												qh: $author$project$Generic$BlockUtilities$dropLast(block_.qh)
											}))));
						} else {
							return A2(
								$author$project$Generic$PrimitiveBlock$transformBlock,
								state.cM.g4,
								$author$project$Generic$PrimitiveBlock$finalize(
									_Utils_update(
										block_,
										{
											qh: $author$project$Generic$BlockUtilities$dropLast(block_.qh)
										})));
						}
					default:
						var str = _v1.a;
						return _Utils_eq(
							$elm$core$List$head(block_.qh),
							$elm$core$Maybe$Just('```')) ? $author$project$Generic$PrimitiveBlock$finalize(
							_Utils_update(
								block_,
								{
									qh: A2(
										$elm$core$List$filter,
										function (l) {
											return l !== '```';
										},
										block_.qh)
								})) : $author$project$Generic$PrimitiveBlock$finalize(
							_Utils_update(
								block_,
								{
									qh: $author$project$Generic$BlockUtilities$dropLast(block_.qh)
								}));
				}
			}();
			return _Utils_update(
				state,
				{
					a_: A2(
						$author$project$Generic$PrimitiveBlock$raiseBlockLevelsIfNeeded_,
						block,
						A2($elm$core$List$cons, block, state.a_)),
					e8: state.e8 + 1,
					l$: state.l$ + 1,
					aa: $elm$core$Maybe$Nothing,
					ed: false,
					jx: state.cM.nb(currentLine.iV),
					jR: state.jR + 1,
					ag: A2($elm$core$List$drop, 1, state.ag)
				});
		}
	});
var $author$project$Generic$Language$emptyBlockMeta = {mo: $elm$core$Maybe$Nothing, hg: '', jR: 0, jU: _List_Nil, n_: 0, sO: 0, oR: ''};
var $author$project$Generic$PrimitiveBlock$bogusBlockFromLine = F2(
	function (message_, _v0) {
		var indent = _v0.hh;
		var lineNumber = _v0.jR;
		var position = _v0.sO;
		var prefix = _v0.ks;
		var content = _v0.iV;
		var message = '[b [red ' + (content + (']] [blue [i ' + (message_ + ']]')));
		var meta = _Utils_update(
			$author$project$Generic$Language$emptyBlockMeta,
			{jR: lineNumber, n_: 1, sO: position, oR: message});
		return {
			lv: _List_Nil,
			qh: _List_fromArray(
				[message]),
			ri: '',
			fC: $author$project$Generic$Language$Paragraph,
			hh: indent,
			nJ: meta,
			sS: $elm$core$Dict$empty,
			f3: $elm$core$Maybe$Nothing
		};
	});
var $author$project$Generic$PrimitiveBlock$blockFromLine = F2(
	function (parserFunctions, line) {
		var indent = line.hh;
		var lineNumber = line.jR;
		var position = line.sO;
		var prefix = line.ks;
		var content = line.iV;
		var _v0 = parserFunctions.jh(content);
		if (_v0.$ === 1) {
			var err = _v0.a;
			return $elm$core$Result$Ok(
				A2($author$project$Generic$PrimitiveBlock$bogusBlockFromLine, '<= something missing', line));
		} else {
			var heading = _v0.a.fC;
			var args = _v0.a.lv;
			var properties = _v0.a.sS;
			var meta = _Utils_update(
				$author$project$Generic$Language$emptyBlockMeta,
				{jR: lineNumber, n_: 1, sO: position, oR: ''});
			return $elm$core$Result$Ok(
				{
					lv: args,
					qh: _List_fromArray(
						[
							_Utils_ap(prefix, content)
						]),
					ri: content,
					fC: heading,
					hh: indent,
					nJ: meta,
					sS: properties,
					f3: $elm$core$Maybe$Nothing
				});
		}
	});
var $author$project$Generic$PrimitiveBlock$createBlock = F2(
	function (state, currentLine) {
		var rNewBlock = A2($author$project$Generic$PrimitiveBlock$blockFromLine, state.cM, currentLine);
		var blocks = function () {
			var _v1 = state.aa;
			if (_v1.$ === 1) {
				return state.a_;
			} else {
				var block = _v1.a;
				return _Utils_eq(
					block.qh,
					_List_fromArray(
						[''])) ? state.a_ : A2($elm$core$List$cons, block, state.a_);
			}
		}();
		if (rNewBlock.$ === 1) {
			var err = rNewBlock.a;
			return _Utils_update(
				state,
				{
					a_: blocks,
					l$: state.l$ + 1,
					aa: $elm$core$Maybe$Just(
						A2($author$project$Generic$PrimitiveBlock$bogusBlockFromLine, 'error', currentLine)),
					ed: true,
					hh: currentLine.hh,
					jR: state.jR + 1,
					ag: A2($elm$core$List$drop, 1, state.ag),
					sO: state.sO
				});
		} else {
			var newBlock = rNewBlock.a;
			return _Utils_update(
				state,
				{
					a_: blocks,
					l$: state.l$ + 1,
					aa: $elm$core$Maybe$Just(newBlock),
					ed: true,
					hh: currentLine.hh,
					jR: state.jR + 1,
					ag: A2($elm$core$List$drop, 1, state.ag),
					sO: state.sO
				});
		}
	});
var $author$project$Generic$PrimitiveBlock$inspectHeading = F2(
	function (parserFunctions, _v0) {
		var indent = _v0.hh;
		var lineNumber = _v0.jR;
		var position = _v0.sO;
		var prefix = _v0.ks;
		var content = _v0.iV;
		var _v1 = parserFunctions.jh(content);
		if (_v1.$ === 1) {
			var err = _v1.a;
			return $elm$core$Maybe$Nothing;
		} else {
			var heading = _v1.a.fC;
			var args = _v1.a.lv;
			var properties = _v1.a.sS;
			return $elm$core$Maybe$Just(heading);
		}
	});
var $author$project$Generic$Line$isEmpty = function (line) {
	return (!line.hh) && (line.iV === '');
};
var $author$project$Generic$Line$isNonEmptyBlank = function (line) {
	return (line.hh > 0) && (line.iV === '');
};
var $author$project$Generic$PrimitiveBlock$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.ag);
	if (_v0.$ === 1) {
		var _v1 = state.aa;
		if (_v1.$ === 1) {
			return $author$project$Tools$Loop$Done(
				$elm$core$List$reverse(state.a_));
		} else {
			var block_ = _v1.a;
			var block = _Utils_update(
				block_,
				{
					qh: $author$project$Generic$BlockUtilities$dropLast(block_.qh)
				});
			var blocks = _Utils_eq(
				block.qh,
				_List_fromArray(
					[''])) ? $elm$core$List$reverse(state.a_) : $elm$core$List$reverse(
				A2($elm$core$List$cons, block, state.a_));
			return $author$project$Tools$Loop$Done(blocks);
		}
	} else {
		var rawLine = _v0.a;
		var newPosition = (state.sO + $elm$core$String$length(rawLine)) + 1;
		var currentLine = A3($author$project$Generic$Line$classify, state.sO, state.jR + 1, rawLine);
		var _v2 = _Utils_Tuple3(
			state.ed,
			$author$project$Generic$Line$isEmpty(currentLine),
			$author$project$Generic$Line$isNonEmptyBlank(currentLine));
		if (!_v2.a) {
			if (_v2.b) {
				return $author$project$Tools$Loop$Loop(
					A2(
						$author$project$Generic$PrimitiveBlock$advance,
						newPosition,
						_Utils_update(
							state,
							{fI: '1, EMPTY'})));
			} else {
				if (_v2.c) {
					return $author$project$Tools$Loop$Loop(
						A2(
							$author$project$Generic$PrimitiveBlock$advance,
							newPosition,
							_Utils_update(
								state,
								{fI: '2, PASS'})));
				} else {
					return $author$project$Tools$Loop$Loop(
						A2(
							$author$project$Generic$PrimitiveBlock$createBlock,
							_Utils_update(
								state,
								{fI: '3, NEW', sO: newPosition}),
							currentLine));
				}
			}
		} else {
			if (!_v2.b) {
				var match = _Utils_eq(
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.fC;
						},
						state.aa),
					A2($author$project$Generic$PrimitiveBlock$inspectHeading, state.cM, currentLine));
				var newCurrentBlock = function () {
					if (match && A2(
						$elm$core$List$member,
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.fC;
							},
							state.aa),
						_List_fromArray(
							[
								$elm$core$Maybe$Just(
								$author$project$Generic$Language$Ordinary('item')),
								$elm$core$Maybe$Just(
								$author$project$Generic$Language$Ordinary('itemList'))
							]))) {
						var _v3 = state.aa;
						if (_v3.$ === 1) {
							return $elm$core$Maybe$Nothing;
						} else {
							var block = _v3.a;
							return $elm$core$Maybe$Just(
								_Utils_update(
									block,
									{
										fC: $author$project$Generic$Language$Ordinary('itemList')
									}));
						}
					} else {
						if (match && A2(
							$elm$core$List$member,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.fC;
								},
								state.aa),
							_List_fromArray(
								[
									$elm$core$Maybe$Just(
									$author$project$Generic$Language$Ordinary('numbered')),
									$elm$core$Maybe$Just(
									$author$project$Generic$Language$Ordinary('numberedList'))
								]))) {
							var _v4 = state.aa;
							if (_v4.$ === 1) {
								return $elm$core$Maybe$Nothing;
							} else {
								var block = _v4.a;
								return $elm$core$Maybe$Just(
									_Utils_update(
										block,
										{
											fC: $author$project$Generic$Language$Ordinary('numberedList')
										}));
							}
						} else {
							return state.aa;
						}
					}
				}();
				return $author$project$Tools$Loop$Loop(
					A2(
						$author$project$Generic$PrimitiveBlock$addCurrentLine2,
						_Utils_update(
							state,
							{aa: newCurrentBlock, fI: '4, ADD', sO: newPosition}),
						currentLine));
			} else {
				return $author$project$Tools$Loop$Loop(
					A2(
						$author$project$Generic$PrimitiveBlock$commitBlock,
						_Utils_update(
							state,
							{fI: '5, COMMIT', sO: newPosition}),
						currentLine));
			}
		}
	}
};
var $author$project$Generic$PrimitiveBlock$parse = F4(
	function (functionData, initialId, outerCount, lines) {
		return A2(
			$author$project$Tools$Loop$loop,
			A4($author$project$Generic$PrimitiveBlock$init, functionData, initialId, outerCount, lines),
			$author$project$Generic$PrimitiveBlock$nextStep);
	});
var $author$project$M$PrimitiveBlock$parse = F3(
	function (initialId, outerCount, lines) {
		return A4($author$project$Generic$PrimitiveBlock$parse, $author$project$M$PrimitiveBlock$functionData, initialId, outerCount, lines);
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$finalize = function (state) {
	return {
		a_: A2(
			$elm$core$List$map,
			function (b) {
				return _Utils_update(
					b,
					{
						sS: A2($elm$core$Dict$remove, 'status', b.sS)
					});
			},
			$elm$core$List$reverse(state.ax)),
		a8: state.a8,
		v: state.v
	};
};
var $author$project$MicroLaTeX$PrimitiveBlock$init = F3(
	function (idPrefix, outerCount, lines) {
		return {dQ: $elm$core$Maybe$Nothing, ax: _List_Nil, l$: -1, aQ: 0, a8: _List_Nil, mU: idPrefix, dh: false, hh: 0, fI: '0, START', d: _List_Nil, ns: -1, jR: -1, ag: lines, n1: 0, sO: 0, oR: '', v: _List_Nil};
	});
var $author$project$MicroLaTeX$PrimitiveBlock$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$PrimitiveBlock$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$CEmpty = {$: 8};
var $author$project$MicroLaTeX$ClassifyBlock$CPlainText = {$: 7};
var $author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock = function (a) {
	return {$: 4, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock = function (a) {
	return {$: 2, a: a};
};
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.ta, s.lW, x, s.n));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.e, s.ta, s.lW, s.oV);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{lW: newCol, n: s.n, hh: s.hh, e: newOffset, ta: newRow, oV: s.oV});
	};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $author$project$MicroLaTeX$ClassifyBlock$pseudoBlockParser = F2(
	function (name, lxSpecial) {
		return A2(
			$elm$parser$Parser$map,
			function (_v0) {
				return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(lxSpecial);
			},
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$String$slice),
							$elm$parser$Parser$symbol('\\' + name)),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil('\n'))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$MicroLaTeX$ClassifyBlock$bannerParser = A2(
	$author$project$MicroLaTeX$ClassifyBlock$pseudoBlockParser,
	'banner',
	$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock('banner'));
var $author$project$MicroLaTeX$ClassifyBlock$CBeginBlock = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$beginBlockParser = A2(
	$elm$parser$Parser$map,
	$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\begin{')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$contentsParser = A2(
	$author$project$MicroLaTeX$ClassifyBlock$pseudoBlockParser,
	'contents',
	$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock('contents'));
var $author$project$MicroLaTeX$ClassifyBlock$LXDescription = function (a) {
	return {$: 2, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$descriptionItemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXDescription('\\desc'))),
	$elm$parser$Parser$symbol('\\desc'));
var $author$project$MicroLaTeX$ClassifyBlock$CEndBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$endBlockParser = A2(
	$elm$parser$Parser$map,
	$author$project$MicroLaTeX$ClassifyBlock$CEndBlock,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\end{')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$LXItem = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$itemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXItem('\\item'))),
	$elm$parser$Parser$symbol('\\item'));
var $author$project$MicroLaTeX$ClassifyBlock$markdownItemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXItem('-'))),
	$elm$parser$Parser$symbol('-'));
var $author$project$MicroLaTeX$ClassifyBlock$LXNumbered = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$markdownNumberParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXNumbered('.'))),
	$elm$parser$Parser$symbol('.'));
var $author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin = {$: 4};
var $author$project$MicroLaTeX$ClassifyBlock$mathBlockBeginParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed($author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin),
	$elm$parser$Parser$symbol('\\['));
var $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim = {$: 3};
var $author$project$MicroLaTeX$ClassifyBlock$mathBlockDelimParser = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim;
	},
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$symbol('$$')));
var $author$project$MicroLaTeX$ClassifyBlock$CMathBlockEnd = {$: 5};
var $author$project$MicroLaTeX$ClassifyBlock$mathBlockEndParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed($author$project$MicroLaTeX$ClassifyBlock$CMathBlockEnd),
	$elm$parser$Parser$symbol('\\]'));
var $author$project$MicroLaTeX$ClassifyBlock$numberedParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXNumbered('\\numbered'))),
	$elm$parser$Parser$symbol('\\numbered'));
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return function (s) {
		var _v0 = A5(_Parser_findSubString, str, s.e, s.ta, s.lW, s.oV);
		var newOffset = _v0.a;
		var newRow = _v0.b;
		var newCol = _v0.c;
		var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.oV) : newOffset;
		return A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.e, adjustedOffset) < 0,
			0,
			{lW: newCol, n: s.n, hh: s.hh, e: adjustedOffset, ta: newRow, oV: s.oV});
	};
};
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $author$project$MicroLaTeX$ClassifyBlock$ordinaryBlockParser = A2(
	$elm$parser$Parser$map,
	function (s) {
		return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock(s));
	},
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('| ')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntilEndOr(' '))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$specialBlockParser = F2(
	function (name, lxSpecial) {
		return A2(
			$elm$parser$Parser$map,
			function (_v0) {
				return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(lxSpecial);
			},
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$String$slice),
							$elm$parser$Parser$symbol('\\' + (name + '{'))),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil('}'))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser = function (name) {
	return A2(
		$author$project$MicroLaTeX$ClassifyBlock$specialBlockParser,
		name,
		$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock(name));
};
var $author$project$MicroLaTeX$ClassifyBlock$CVerbatimBlockDelim = {$: 6};
var $author$project$MicroLaTeX$ClassifyBlock$verbatimBlockDelimParser = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return $author$project$MicroLaTeX$ClassifyBlock$CVerbatimBlockDelim;
	},
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$symbol('```')));
var $author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock = function (a) {
	return {$: 5, a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$verbatimBlockParser = A2(
	$elm$parser$Parser$map,
	function (s) {
		return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock(s));
	},
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('|| ')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntilEndOr(' '))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$classifierParser = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			$author$project$MicroLaTeX$ClassifyBlock$beginBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$endBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$mathBlockDelimParser,
			$author$project$MicroLaTeX$ClassifyBlock$mathBlockBeginParser,
			$author$project$MicroLaTeX$ClassifyBlock$mathBlockEndParser,
			$author$project$MicroLaTeX$ClassifyBlock$verbatimBlockDelimParser,
			$author$project$MicroLaTeX$ClassifyBlock$ordinaryBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$verbatimBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$itemParser,
			$author$project$MicroLaTeX$ClassifyBlock$descriptionItemParser,
			$author$project$MicroLaTeX$ClassifyBlock$markdownItemParser,
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('section'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('title'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('subsection'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('subsubsection'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('subheading'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('setcounter'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('shiftandsetcounter'),
			$author$project$MicroLaTeX$ClassifyBlock$bannerParser,
			$author$project$MicroLaTeX$ClassifyBlock$contentsParser,
			$author$project$MicroLaTeX$ClassifyBlock$numberedParser,
			$author$project$MicroLaTeX$ClassifyBlock$markdownNumberParser
		]));
var $elm$core$String$trimLeft = _String_trimLeft;
var $author$project$MicroLaTeX$ClassifyBlock$classify = function (str) {
	var str_ = $elm$core$String$trimLeft(str);
	if (str_ === '') {
		return $author$project$MicroLaTeX$ClassifyBlock$CEmpty;
	} else {
		var _v0 = A2($elm$parser$Parser$run, $author$project$MicroLaTeX$ClassifyBlock$classifierParser, str_);
		if (!_v0.$) {
			var classificationOfLine = _v0.a;
			return classificationOfLine;
		} else {
			return (str === '') ? $author$project$MicroLaTeX$ClassifyBlock$CEmpty : $author$project$MicroLaTeX$ClassifyBlock$CPlainText;
		}
	}
};
var $author$project$MicroLaTeX$Line$prefixParser = F2(
	function (position, lineNumber) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							F4(
								function (prefixStart, prefixEnd, lineEnd, content) {
									return {
										iV: A3($elm$core$String$slice, prefixEnd, lineEnd, content),
										hh: prefixEnd - prefixStart,
										jR: lineNumber,
										sO: position,
										ks: A3($elm$core$String$slice, 0, prefixEnd, content)
									};
								})),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompWhile(
								function (c) {
									return c === ' ';
								}))),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompWhile(
							function (c) {
								return c !== '\n';
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$MicroLaTeX$Line$classify = F3(
	function (position, lineNumber, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			A2($author$project$MicroLaTeX$Line$prefixParser, position, lineNumber),
			str);
		if (_v0.$ === 1) {
			return {iV: '!!ERROR', hh: 0, jR: lineNumber, sO: position, ks: ''};
		} else {
			var result = _v0.a;
			return result;
		}
	});
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getPosition = F2(
	function (rawLine, state) {
		return (rawLine === '') ? (state.sO + 1) : ((state.sO + $elm$core$String$length(rawLine)) + 1);
	});
var $author$project$MicroLaTeX$PrimitiveBlock$addSource = F2(
	function (lastLine, block) {
		return A2(
			$author$project$Generic$BlockUtilities$updateMeta,
			function (m) {
				return _Utils_update(
					m,
					{
						n_: $elm$core$List$length(block.qh) + 2,
						oR: block.ri + ('\n' + (A2($elm$core$String$join, '\n', block.qh) + ('\n' + lastLine)))
					});
			},
			block);
	});
var $author$project$MicroLaTeX$PrimitiveBlock$slice = F3(
	function (a, b, list) {
		return A2(
			$elm$core$List$drop,
			a,
			A2($elm$core$List$take, b + 1, list));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$statusFinished = A2($elm$core$Dict$singleton, 'status', 'finished');
var $author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock = F2(
	function (line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.v);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			var _v2 = $elm_community$list_extra$List$Extra$uncons(state.d);
			if (_v2.$ === 1) {
				return state;
			} else {
				var _v3 = _v2.a;
				var topLabel = _v3.a;
				var otherLabels = _v3.b;
				var newBlock = A2(
					$author$project$MicroLaTeX$PrimitiveBlock$addSource,
					line.iV,
					_Utils_update(
						block,
						{
							qh: A3($author$project$MicroLaTeX$PrimitiveBlock$slice, topLabel.jR + 1, state.jR - 1, state.ag),
							sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
						}));
				return _Utils_update(
					state,
					{
						ax: A2($elm$core$List$cons, newBlock, state.ax),
						dh: false,
						d: otherLabels,
						ns: state.ns - 1,
						v: rest
					});
			}
		}
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$Filled = 2;
var $author$project$MicroLaTeX$PrimitiveBlock$Started = 1;
var $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames = _List_fromArray(
	['equation', 'table', 'array', 'textarray', 'aligned', 'math', 'code', 'verbatim', 'verse', 'mathmacros', 'textmacros', 'hide', 'docinfo', 'csvtable', 'chart', 'svg', 'quiver', 'image', 'tikz', 'load-files', 'include', 'iframe']);
var $author$project$MicroLaTeX$PrimitiveBlock$getHeading = function (str) {
	var _v0 = $author$project$MicroLaTeX$ClassifyBlock$classify(str);
	switch (_v0.$) {
		case 0:
			var label = _v0.a;
			return A2($elm$core$List$member, label, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames) ? $author$project$Generic$Language$Verbatim(label) : $author$project$Generic$Language$Ordinary(label);
		case 3:
			return $author$project$Generic$Language$Verbatim('math');
		case 6:
			return $author$project$Generic$Language$Verbatim('code');
		case 4:
			return $author$project$Generic$Language$Verbatim('math');
		case 5:
			return $author$project$Generic$Language$Verbatim('math');
		default:
			return $author$project$Generic$Language$Paragraph;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$statusStarted = A2($elm$core$Dict$singleton, 'status', 'started');
var $author$project$MicroLaTeX$PrimitiveBlock$blockFromLine = F5(
	function (statePosition, idPrefix, count, level, line) {
		var indent = line.hh;
		var lineNumber = line.jR;
		var position = line.sO;
		var prefix = line.ks;
		var content = line.iV;
		return {
			lv: _List_Nil,
			qh: _List_Nil,
			ri: line.iV,
			fC: $author$project$MicroLaTeX$PrimitiveBlock$getHeading(line.iV),
			hh: indent,
			nJ: {
				mo: $elm$core$Maybe$Nothing,
				hg: $author$project$ScriptaV2$Config$idPrefix + ('-' + $elm$core$String$fromInt(lineNumber)),
				jR: lineNumber,
				jU: _List_Nil,
				n_: 0,
				sO: (!statePosition) ? 0 : (statePosition + 2),
				oR: ''
			},
			sS: A3(
				$elm$core$Dict$insert,
				'level',
				$elm$core$String$fromInt(level),
				$author$project$MicroLaTeX$PrimitiveBlock$statusStarted),
			f3: $elm$core$Maybe$Nothing
		};
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getArgs = function (mstr) {
	if (mstr.$ === 1) {
		return _List_Nil;
	} else {
		var str = mstr.a;
		var strs = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ', ', str));
		return A2(
			$elm$core$List$filter,
			function (t) {
				return !A2($elm$core$String$contains, ':', t);
			},
			strs);
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || ((c === '\n') || (c === '\r'));
	});
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $author$project$MicroLaTeX$Util$itemParser = F2(
	function (leftDelimiter, rightDelimiter) {
		return A2(
			$elm$parser$Parser$map,
			$elm$core$String$trim,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$String$slice),
									$elm$parser$Parser$chompUntil(leftDelimiter)),
								$elm$parser$Parser$symbol(leftDelimiter)),
							$elm$parser$Parser$spaces),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil(rightDelimiter))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$MicroLaTeX$Util$bracedItemParser = A2($author$project$MicroLaTeX$Util$itemParser, '{', '}');
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$Util$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (v) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$ignorer, p, $elm$parser$Parser$spaces)),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$succeed(0))
				]));
	});
var $author$project$MicroLaTeX$Util$many = function (p) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$author$project$MicroLaTeX$Util$manyHelp(p));
};
var $author$project$MicroLaTeX$Util$getBracedItems = function (str) {
	var _v0 = A2(
		$elm$parser$Parser$run,
		$author$project$MicroLaTeX$Util$many($author$project$MicroLaTeX$Util$bracedItemParser),
		str);
	if (!_v0.$) {
		var val = _v0.a;
		return val;
	} else {
		return _List_Nil;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$getKVData = function (mstr) {
	if (mstr.$ === 1) {
		return _List_Nil;
	} else {
		var str = mstr.a;
		var strs = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ', ', str));
		return A2(
			$elm$core$List$filter,
			function (t) {
				return A2($elm$core$String$contains, ':', t);
			},
			strs);
	}
};
var $author$project$MicroLaTeX$Util$bracketedItemParser = A2($author$project$MicroLaTeX$Util$itemParser, '[', ']');
var $author$project$MicroLaTeX$Util$getBracketedItem = function (str) {
	var _v0 = A2($elm$parser$Parser$run, $author$project$MicroLaTeX$Util$bracketedItemParser, str);
	if (!_v0.$) {
		var val = _v0.a;
		return $elm$core$Maybe$Just(val);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroLaTeX$Util$macroValParser = function (macroName) {
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$trim,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$String$slice),
								$elm$parser$Parser$chompUntil('\\' + (macroName + '{'))),
							$elm$parser$Parser$symbol('\\' + (macroName + '{'))),
						$elm$parser$Parser$spaces),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompUntilEndOr('}'))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource));
};
var $author$project$MicroLaTeX$Util$getMicroLaTeXItem = F2(
	function (key, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$MicroLaTeX$Util$macroValParser(key),
			str);
		if (!_v0.$) {
			var val = _v0.a;
			return $elm$core$Maybe$Just(val);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$MicroLaTeX$Line$getNameAndArgString = function (line) {
	var normalizedLine = $elm$core$String$trim(line.iV);
	var name = function () {
		var _v0 = A2($author$project$MicroLaTeX$Util$getMicroLaTeXItem, 'begin', normalizedLine);
		if (!_v0.$) {
			var str = _v0.a;
			return $elm$core$Maybe$Just(str);
		} else {
			return (normalizedLine === '$$') ? $elm$core$Maybe$Just('math') : $elm$core$Maybe$Nothing;
		}
	}();
	return _Utils_Tuple2(
		name,
		$author$project$MicroLaTeX$Util$getBracketedItem(normalizedLine));
};
var $author$project$MicroLaTeX$PrimitiveBlock$KVInKey = 0;
var $author$project$MicroLaTeX$PrimitiveBlock$KVInValue = 1;
var $author$project$MicroLaTeX$PrimitiveBlock$nextKVStep = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$uncons(state.cb);
	if (_v0.$ === 1) {
		var kvList_ = function () {
			var _v2 = state.b5;
			if (_v2.$ === 1) {
				return state.cA;
			} else {
				var key = _v2.a;
				return A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return _Utils_Tuple2(
							k,
							$elm$core$List$reverse(v));
					},
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, state.by),
						state.cA));
			}
		}();
		return $author$project$MicroLaTeX$PrimitiveBlock$Done(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							A2($elm$core$String$join, ' ', v));
					},
					kvList_)));
	} else {
		var _v4 = _v0.a;
		var item = _v4.a;
		var rest = _v4.b;
		var _v5 = state.dk;
		if (!_v5) {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v6 = state.b5;
				if (_v6.$ === 1) {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								b5: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								cb: rest,
								dk: 1
							}));
				} else {
					var key = _v6.a;
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						{
							b5: $elm$core$Maybe$Just(
								A2($elm$core$String$dropRight, 1, item)),
							by: _List_Nil,
							cb: rest,
							cA: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, state.by),
								state.cA),
							dk: 1
						});
				}
			} else {
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					_Utils_update(
						state,
						{cb: rest}));
			}
		} else {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v7 = state.b5;
				if (_v7.$ === 1) {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								b5: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								by: _List_Nil,
								cb: rest,
								dk: 1
							}));
				} else {
					var key = _v7.a;
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								b5: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								by: _List_Nil,
								cb: rest,
								cA: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(key, state.by),
									state.cA),
								dk: 1
							}));
				}
			} else {
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					_Utils_update(
						state,
						{
							by: A2($elm$core$List$cons, item, state.by),
							cb: rest
						}));
			}
		}
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$prepareKVData = function (data_) {
	var initialState = {b5: $elm$core$Maybe$Nothing, by: _List_Nil, cb: data_, cA: _List_Nil, dk: 0};
	return A2($author$project$MicroLaTeX$PrimitiveBlock$loop, initialState, $author$project$MicroLaTeX$PrimitiveBlock$nextKVStep);
};
var $author$project$MicroLaTeX$PrimitiveBlock$explode = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split(':'),
		txt);
};
var $author$project$MicroLaTeX$PrimitiveBlock$fix = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			return A2(
				$elm$core$List$cons,
				a + ':',
				A2($elm$core$List$cons, b, _List_Nil));
		} else {
			var a = strs.a;
			return A2($elm$core$List$cons, a, _List_Nil);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$prepareList = function (strs) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$MicroLaTeX$PrimitiveBlock$fix,
			$author$project$MicroLaTeX$PrimitiveBlock$explode(strs)));
};
var $author$project$MicroLaTeX$PrimitiveBlock$updateHeadingWithName = F2(
	function (name_, heading) {
		if (name_.$ === 1) {
			return heading;
		} else {
			var name = name_.a;
			switch (heading.$) {
				case 0:
					return $author$project$Generic$Language$Paragraph;
				case 1:
					if (heading.a === 'tabular') {
						return $author$project$Generic$Language$Ordinary('table');
					} else {
						return $author$project$Generic$Language$Ordinary(name);
					}
				default:
					return $author$project$Generic$Language$Verbatim(name);
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$elaborate = F2(
	function (line, pb) {
		if (_Utils_eq(
			pb.qh,
			_List_fromArray(
				['']))) {
			return pb;
		} else {
			var body = function () {
				var _v2 = pb.fC;
				if (_v2.$ === 2) {
					return A2($elm$core$List$map, $elm$core$String$trimLeft, pb.qh);
				} else {
					return pb.qh;
				}
			}();
			var _v0 = $author$project$MicroLaTeX$Line$getNameAndArgString(line);
			var name = _v0.a;
			var args_ = _v0.b;
			var namedArgs = $author$project$MicroLaTeX$PrimitiveBlock$getKVData(args_);
			var properties = $author$project$MicroLaTeX$PrimitiveBlock$prepareKVData(
				$author$project$MicroLaTeX$PrimitiveBlock$prepareList(namedArgs));
			var simpleArgs = function () {
				if (name.$ === 1) {
					return $author$project$MicroLaTeX$PrimitiveBlock$getArgs(args_);
				} else {
					var name_ = name.a;
					var prefix = '\\begin{' + (name_ + '}');
					var adjustedLine = A3($elm$core$String$replace, prefix, '', line.iV);
					return ((name_ === 'table') || (name_ === 'tabular')) ? _List_fromArray(
						[adjustedLine]) : $author$project$MicroLaTeX$Util$getBracedItems(adjustedLine);
				}
			}();
			return _Utils_update(
				pb,
				{
					lv: simpleArgs,
					qh: body,
					fC: A2($author$project$MicroLaTeX$PrimitiveBlock$updateHeadingWithName, name, pb.fC),
					sS: properties
				});
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$beginBlock = F5(
	function (idPrefix, count, classifier, line, state) {
		var newBlockClassifier = function () {
			if (!classifier.$) {
				var name = classifier.a;
				return A2($elm$core$List$member, name, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames) ? $elm$core$Maybe$Just(classifier) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var level = state.ns + 1;
		var newBlock = A2(
			$author$project$MicroLaTeX$PrimitiveBlock$elaborate,
			line,
			A5($author$project$MicroLaTeX$PrimitiveBlock$blockFromLine, state.sO, idPrefix, count, level, line));
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.d);
			if (_v0.$ === 1) {
				return state.d;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{aW: 2}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				dQ: newBlockClassifier,
				aQ: line.jR,
				d: A2(
					$elm$core$List$cons,
					{s: classifier, ns: level, jR: line.jR, aW: 1},
					labelStack),
				ns: level,
				jR: line.jR,
				v: A2($elm$core$List$cons, newBlock, state.v)
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$statusFilled = A2($elm$core$Dict$singleton, 'status', 'filled');
var $author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop = F3(
	function (block, rest, state) {
		if (_Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.aW;
				},
				$elm$core$List$head(state.d)),
			$elm$core$Maybe$Just(2))) {
			return state.v;
		} else {
			if (_Utils_eq(
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.aW;
					},
					$elm$core$List$head(state.d)),
				$elm$core$Maybe$Just(1))) {
				var firstBlockLine = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.jR;
						},
						$elm$core$List$head(state.d)));
				var newBlock = function () {
					var body = A3($author$project$MicroLaTeX$PrimitiveBlock$slice, firstBlockLine + 1, state.jR - 1, state.ag);
					var numberOfLines = $elm$core$List$length(body);
					return A2(
						$author$project$Generic$BlockUtilities$updateMeta,
						function (m) {
							return _Utils_update(
								m,
								{n_: numberOfLines});
						},
						_Utils_update(
							block,
							{
								qh: A3($author$project$MicroLaTeX$PrimitiveBlock$slice, firstBlockLine + 1, state.jR - 1, state.ag),
								sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFilled
							}));
				}();
				return A2($elm$core$List$cons, newBlock, rest);
			} else {
				return state.v;
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock = F5(
	function (idPrefix, count, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.v);
		if (_v0.$ === 1) {
			return A5($author$project$MicroLaTeX$PrimitiveBlock$beginBlock, idPrefix, count, classifier, line, state);
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			return A5(
				$author$project$MicroLaTeX$PrimitiveBlock$beginBlock,
				idPrefix,
				count,
				classifier,
				line,
				_Utils_update(
					state,
					{
						v: A3($author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop, block, rest, state)
					}));
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getContent = F3(
	function (classifier, line, state) {
		_v0$4:
		while (true) {
			switch (classifier.$) {
				case 7:
					return $elm$core$List$reverse(
						A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.aQ, line.jR - 1, state.ag));
				case 2:
					switch (classifier.a.$) {
						case 0:
							var str = classifier.a.a;
							return A2(
								$elm$core$List$map,
								function (line_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, str, '', line_));
								},
								$elm$core$List$reverse(
									A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.aQ, line.jR, state.ag)));
						case 1:
							var str = classifier.a.a;
							return A2(
								$elm$core$List$map,
								function (line_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, str, '', line_));
								},
								$elm$core$List$reverse(
									A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.aQ, line.jR, state.ag)));
						default:
							break _v0$4;
					}
				case 1:
					return $elm$core$List$reverse(
						A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.aQ + 1, line.jR - 1, state.ag));
				default:
					break _v0$4;
			}
		}
		return $elm$core$List$reverse(
			A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.aQ + 1, line.jR - 1, state.ag));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getSource = F2(
	function (line, state) {
		return A2(
			$elm$core$String$join,
			'\n',
			A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.aQ, line.jR, state.ag));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$setError = function (error) {
	return $author$project$Generic$BlockUtilities$updateMeta(
		function (m) {
			return _Utils_update(
				m,
				{mo: error});
		});
};
var $author$project$MicroLaTeX$PrimitiveBlock$newBlockWithError = F3(
	function (classifier, content, block) {
		_v0$4:
		while (true) {
			switch (classifier.$) {
				case 3:
					return A2(
						$author$project$MicroLaTeX$PrimitiveBlock$setError,
						$elm$core$Maybe$Just('Missing $$ at end'),
						_Utils_update(
							block,
							{
								qh: $elm$core$List$reverse(content),
								sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
							}));
				case 6:
					return A2(
						$author$project$MicroLaTeX$PrimitiveBlock$setError,
						$elm$core$Maybe$Just('Missing ``` at end'),
						_Utils_update(
							block,
							{
								qh: A2(
									$elm$core$List$map,
									A2($elm$core$String$replace, '```', ''),
									$elm$core$List$reverse(content)),
								sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
							}));
				case 2:
					switch (classifier.a.$) {
						case 0:
							var str = classifier.a.a;
							return _Utils_update(
								block,
								{
									qh: A2(
										$elm$core$List$filter,
										function (line_) {
											return line_ !== '';
										},
										$elm$core$List$reverse(content)),
									sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
								});
						case 1:
							var str = classifier.a.a;
							return _Utils_update(
								block,
								{
									qh: A2(
										$elm$core$List$filter,
										function (line_) {
											return line_ !== '';
										},
										$elm$core$List$reverse(content)),
									sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
								});
						default:
							break _v0$4;
					}
				default:
					break _v0$4;
			}
		}
		return _Utils_update(
			block,
			{
				qh: $elm$core$List$reverse(content),
				sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$newBlockWithOutError = F2(
	function (content, block) {
		return _Utils_update(
			block,
			{
				qh: $elm$core$List$reverse(content),
				sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty = function (state) {
	return _Utils_eq(state.v, _List_Nil) ? _Utils_update(
		state,
		{
			ax: _Utils_ap(state.a8, state.ax),
			a8: _List_Nil
		}) : state;
};
var $author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch = F4(
	function (labelHead, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.v);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			if (_Utils_eq(
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.aW;
					},
					labelHead),
				$elm$core$Maybe$Just(2))) {
				return $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty(
					_Utils_update(
						state,
						{
							ax: A2(
								$elm$core$List$cons,
								A2(
									$author$project$MicroLaTeX$PrimitiveBlock$addSource,
									line.iV,
									_Utils_update(
										block,
										{sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})),
								state.ax),
							ns: state.ns - 1,
							v: rest
						}));
			} else {
				var newBlock = function () {
					_v2$2:
					while (true) {
						if (classifier.$ === 2) {
							switch (classifier.a.$) {
								case 5:
									if (classifier.a.a === 'texComment') {
										return A2(
											$author$project$MicroLaTeX$PrimitiveBlock$addSource,
											line.iV,
											A3(
												$author$project$MicroLaTeX$PrimitiveBlock$newBlockWithError,
												classifier,
												_Utils_ap(
													A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, classifier, line, state),
													_List_fromArray(
														[block.ri])),
												block));
									} else {
										break _v2$2;
									}
								case 4:
									var name = classifier.a.a;
									if (name === 'banner') {
										var listSlice = F3(
											function (start, end, list) {
												return A2(
													$elm$core$List$drop,
													start,
													A2($elm$core$List$take, end, list));
											});
										var finish = state.jR;
										var start = function (x) {
											return x + 1;
										}(
											A2(
												$elm$core$Maybe$withDefault,
												finish,
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.jR;
													},
													labelHead)));
										return _Utils_update(
											block,
											{
												qh: A3(listSlice, start, finish, state.ag)
											});
									} else {
										return block;
									}
								default:
									break _v2$2;
							}
						} else {
							break _v2$2;
						}
					}
					if (A2(
						$elm$core$List$member,
						classifier,
						A2($elm$core$List$map, $author$project$MicroLaTeX$ClassifyBlock$CEndBlock, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames))) {
						var sourceText = A2($author$project$MicroLaTeX$PrimitiveBlock$getSource, line, state);
						return A3(
							$author$project$MicroLaTeX$PrimitiveBlock$newBlockWithError,
							classifier,
							A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, classifier, line, state),
							A2(
								$author$project$Generic$BlockUtilities$updateMeta,
								function (m) {
									return _Utils_update(
										m,
										{
											n_: $elm$core$List$length(block.qh),
											oR: sourceText
										});
								},
								block));
					} else {
						return A2(
							$author$project$MicroLaTeX$PrimitiveBlock$addSource,
							line.iV,
							A2(
								$author$project$MicroLaTeX$PrimitiveBlock$newBlockWithOutError,
								A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, classifier, line, state),
								block));
					}
				}();
				return $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty(
					_Utils_update(
						state,
						{
							a8: A2($elm$core$List$cons, newBlock, state.a8),
							d: A2($elm$core$List$drop, 1, state.d),
							ns: state.ns - 1,
							v: A2(
								$elm$core$List$drop,
								1,
								A3($author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop, block, rest, state))
						}));
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$finishBlock = F2(
	function (lastLine, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.v);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var updatedBlock = A2(
				$author$project$MicroLaTeX$PrimitiveBlock$addSource,
				lastLine,
				A2(
					$author$project$Generic$BlockUtilities$updateMeta,
					function (m) {
						return _Utils_update(
							m,
							{n_: state.jR - state.aQ});
					},
					_Utils_update(
						block,
						{sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})));
			return _Utils_update(
				state,
				{
					ax: A2($elm$core$List$cons, updatedBlock, state.ax),
					d: A2($elm$core$List$drop, 1, state.d),
					v: A2($elm$core$List$drop, 1, state.v)
				});
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks = _List_fromArray(
	['table', 'textarray', 'array', 'code', 'equation', 'aligned', 'verbatim']);
var $author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch = F4(
	function (label_, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.v);
		if (_v0.$ === 1) {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			var _v2 = $elm_community$list_extra$List$Extra$uncons(state.d);
			if (_v2.$ === 1) {
				return state;
			} else {
				var _v3 = _v2.a;
				var label = _v3.a;
				var _v4 = function () {
					var _v5 = block.fC;
					switch (_v5.$) {
						case 0:
							return _Utils_Tuple2($author$project$Generic$Language$Paragraph, '-');
						case 1:
							var name_ = _v5.a;
							return _Utils_Tuple2(
								$author$project$Generic$Language$Ordinary(name_),
								name_);
						default:
							var name_ = _v5.a;
							return A2($elm$core$List$member, name_, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? _Utils_Tuple2(
								$author$project$Generic$Language$Verbatim('code'),
								'code') : _Utils_Tuple2(
								$author$project$Generic$Language$Verbatim(name_),
								name_);
					}
				}();
				var heading = _v4.a;
				var name__ = _v4.b;
				var body = A2($elm$core$List$member, name__, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames) ? $elm$core$List$reverse(
					A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, label_.s, line, state)) : $elm$core$List$reverse(
					A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, label_.s, line, state));
				var newBlock = function () {
					var error = function () {
						var _v6 = _Utils_Tuple2(label.s, classifier);
						if (!_v6.a.$) {
							if (_v6.b.$ === 1) {
								var a = _v6.a.a;
								var b = _v6.b.a;
								return $elm$core$Maybe$Just('Mismatch: \\begin{' + (a + ('} ≠ \\end{' + (b + '}'))));
							} else {
								var a = _v6.a.a;
								return $elm$core$Maybe$Just('Missing \\end{' + (a + '}'));
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return A2(
						$author$project$MicroLaTeX$PrimitiveBlock$addSource,
						line.iV,
						A2(
							$author$project$Generic$BlockUtilities$updateMeta,
							function (m) {
								return _Utils_update(
									m,
									{
										mo: error,
										n_: $elm$core$List$length(body)
									});
							},
							_Utils_update(
								block,
								{lv: block.lv, qh: body, fC: heading, sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})));
				}();
				return $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty(
					A2(
						$author$project$MicroLaTeX$PrimitiveBlock$finishBlock,
						line.iV,
						_Utils_update(
							state,
							{
								a8: A2($elm$core$List$cons, newBlock, state.a8),
								d: A2($elm$core$List$drop, 1, state.d),
								ns: state.ns - 1,
								v: rest
							})));
			}
		}
	});
var $author$project$MicroLaTeX$ClassifyBlock$match = F2(
	function (c1, c2) {
		var _v0 = _Utils_Tuple2(c1, c2);
		_v0$5:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					if (_v0.b.$ === 1) {
						var label1 = _v0.a.a;
						var label2 = _v0.b.a;
						return _Utils_eq(label1, label2);
					} else {
						break _v0$5;
					}
				case 3:
					if (_v0.b.$ === 3) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return true;
					} else {
						break _v0$5;
					}
				case 6:
					if (_v0.b.$ === 6) {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						return false;
					} else {
						break _v0$5;
					}
				case 2:
					return true;
				case 4:
					if (_v0.b.$ === 5) {
						var _v5 = _v0.a;
						var _v6 = _v0.b;
						return true;
					} else {
						break _v0$5;
					}
				default:
					break _v0$5;
			}
		}
		return false;
	});
var $author$project$MicroLaTeX$PrimitiveBlock$endBlock = F3(
	function (classification, currentLine, state) {
		var _v0 = $elm$core$List$head(state.d);
		if (_v0.$ === 1) {
			return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				_Utils_update(
					state,
					{ns: state.ns - 1}));
		} else {
			var label = _v0.a;
			return (A2($author$project$MicroLaTeX$ClassifyBlock$match, label.s, classification) && _Utils_eq(state.ns, label.ns)) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A4(
					$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
					$elm$core$Maybe$Just(label),
					classification,
					currentLine,
					_Utils_update(
						state,
						{dQ: $elm$core$Maybe$Nothing}))) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A4(
					$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch,
					label,
					classification,
					currentLine,
					_Utils_update(
						state,
						{dQ: $elm$core$Maybe$Nothing})));
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty = function (state) {
	return $elm$core$List$isEmpty(state.v) ? _Utils_update(
		state,
		{ns: -1}) : state;
};
var $author$project$MicroLaTeX$PrimitiveBlock$emptyLine = F2(
	function (currentLine, state) {
		var _v0 = $elm$core$List$head(state.d);
		if (_v0.$ === 1) {
			return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
		} else {
			var label = _v0.a;
			var _v1 = label.s;
			switch (_v1.$) {
				case 7:
					return A3($author$project$MicroLaTeX$PrimitiveBlock$endBlock, $author$project$MicroLaTeX$ClassifyBlock$CPlainText, currentLine, state);
				case 3:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4($author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch, label, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim, currentLine, state));
				case 4:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				case 5:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
				case 0:
					var name = _v1.a;
					return A2($elm$core$List$member, name, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4(
							$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch,
							label,
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock(name),
							currentLine,
							state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				case 2:
					switch (_v1.a.$) {
						case 3:
							var _v2 = _v1.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXItem('')),
								currentLine,
								state);
						case 0:
							var str = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXItem(str)),
								currentLine,
								state);
						case 2:
							var str = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXDescription(str)),
								currentLine,
								state);
						case 1:
							var str = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXNumbered(str)),
								currentLine,
								state);
						case 4:
							var name = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock(name)),
								currentLine,
								state);
						default:
							var name = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock(name)),
								currentLine,
								state);
					}
				case 1:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
				case 6:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
				default:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
			}
		}
	});
var $author$project$MicroLaTeX$ClassifyBlock$argParser = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\' + (name + '{'))),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$MicroLaTeX$ClassifyBlock$getArg = F2(
	function (name, str) {
		return A2(
			$elm$parser$Parser$run,
			$author$project$MicroLaTeX$ClassifyBlock$argParser(name),
			str);
	});
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$handleSpecial_ = F3(
	function (classifier, line, state) {
		var level = state.ns + 1;
		var newBlock_ = A2(
			$author$project$MicroLaTeX$PrimitiveBlock$elaborate,
			line,
			function (b) {
				return _Utils_update(
					b,
					{
						qh: A2($elm$core$List$cons, b.ri, b.qh)
					});
			}(
				A5($author$project$MicroLaTeX$PrimitiveBlock$blockFromLine, state.sO, state.mU, state.n1, level, line)));
		var newBlock = function () {
			_v2$6:
			while (true) {
				switch (classifier.$) {
					case 6:
						return _Utils_update(
							newBlock_,
							{
								fC: $author$project$Generic$Language$Ordinary('numbered'),
								sS: $elm$core$Dict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'firstLine',
											A3($elm$core$String$replace, '```', '', line.iV))
										]))
							});
					case 2:
						switch (classifier.a.$) {
							case 0:
								var str = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										fC: $author$project$Generic$Language$Ordinary('item'),
										sS: $elm$core$Dict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'firstLine',
													A3($elm$core$String$replace, '\\item', '', line.iV))
												]))
									});
							case 1:
								var str = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										fC: $author$project$Generic$Language$Ordinary('numbered'),
										sS: $elm$core$Dict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'firstLine',
													A3($elm$core$String$replace, str, '', line.iV))
												]))
									});
							case 2:
								var str = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										lv: _List_fromArray(
											[
												A3($elm$core$String$replace, '\\desc ', '', line.iV)
											]),
										fC: $author$project$Generic$Language$Ordinary('desc'),
										sS: $elm$core$Dict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'firstLine',
													A3($elm$core$String$replace, str, '', line.iV))
												]))
									});
							case 4:
								var name_ = classifier.a.a;
								var _v3 = function () {
									switch (name_) {
										case 'banner':
											return _Utils_Tuple2('banner', _List_Nil);
										case 'section':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['2']));
										case 'subsection':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['3']));
										case 'subsubsection':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['4']));
										case 'subheading':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['5']));
										case 'setcounter':
											return _Utils_Tuple2(
												'setcounter',
												_List_fromArray(
													[
														A2(
														$elm$core$Result$withDefault,
														'1',
														A2($author$project$MicroLaTeX$ClassifyBlock$getArg, name_, newBlock_.ri))
													]));
										case 'shiftandsetcounter':
											return _Utils_Tuple2(
												'shiftandsetcounter',
												_List_fromArray(
													[
														A2(
														$elm$core$Result$withDefault,
														'1',
														A2($author$project$MicroLaTeX$ClassifyBlock$getArg, name_, newBlock_.ri))
													]));
										default:
											return _Utils_Tuple2(name_, _List_Nil);
									}
								}();
								var name = _v3.a;
								var args = _v3.b;
								return _Utils_update(
									newBlock_,
									{
										lv: args,
										qh: function () {
											var _v5 = A2($author$project$MicroLaTeX$ClassifyBlock$getArg, name_, newBlock_.ri);
											if (_v5.$ === 1) {
												return _List_Nil;
											} else {
												var arg = _v5.a;
												return _List_fromArray(
													[arg]);
											}
										}(),
										fC: $author$project$Generic$Language$Ordinary(name),
										sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
									});
							case 5:
								var name = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										fC: $author$project$Generic$Language$Verbatim(name)
									});
							default:
								break _v2$6;
						}
					default:
						break _v2$6;
				}
			}
			return newBlock_;
		}();
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.d);
			if (_v0.$ === 1) {
				return state.d;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{aW: 2}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				aQ: line.jR,
				hh: line.hh,
				d: A2(
					$elm$core$List$cons,
					{s: classifier, ns: level, jR: line.jR, aW: 1},
					labelStack),
				ns: level,
				jR: line.jR,
				v: A2($elm$core$List$cons, newBlock, state.v)
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$handleSpecialBlock = F3(
	function (classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.v);
		if (_v0.$ === 1) {
			return A3($author$project$MicroLaTeX$PrimitiveBlock$handleSpecial_, classifier, line, state);
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			return A3(
				$author$project$MicroLaTeX$PrimitiveBlock$handleSpecial_,
				classifier,
				line,
				_Utils_update(
					state,
					{
						v: A3($author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop, block, rest, state)
					}));
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$handleComment = F2(
	function (line, state) {
		var newBlock = A2(
			$author$project$Generic$BlockUtilities$updateMeta,
			function (m) {
				return _Utils_update(
					m,
					{n_: 1});
			},
			function (b) {
				return _Utils_update(
					b,
					{
						fC: $author$project$Generic$Language$Verbatim('texComment')
					});
			}(
				A5($author$project$MicroLaTeX$PrimitiveBlock$blockFromLine, state.sO, state.mU, state.n1, 0, line)));
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.d);
			if (_v0.$ === 1) {
				return state.d;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{aW: 2}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				aQ: line.jR,
				hh: line.hh,
				d: A2(
					$elm$core$List$cons,
					{
						s: $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
							$author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock('texComment')),
						ns: 0,
						jR: line.jR,
						aW: 1
					},
					labelStack),
				ns: 0,
				jR: line.jR,
				v: A2($elm$core$List$cons, newBlock, state.v)
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$plainText = F2(
	function (state_, currentLine) {
		var state = (_Utils_cmp(currentLine.hh, state_.hh) > 0) ? _Utils_update(
			state_,
			{hh: currentLine.hh, ns: state_.ns + 1}) : ((_Utils_cmp(currentLine.hh, state_.hh) < 0) ? _Utils_update(
			state_,
			{hh: currentLine.hh, ns: state_.ns - 1}) : state_);
		if (_Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.aW;
				},
				$elm$core$List$head(state.d)),
			$elm$core$Maybe$Just(2)) || _Utils_eq(state.d, _List_Nil)) {
			return (A2($elm$core$String$left, 1, currentLine.iV) === '%') ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A2($author$project$MicroLaTeX$PrimitiveBlock$handleComment, currentLine, state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.mU, state.n1, $author$project$MicroLaTeX$ClassifyBlock$CPlainText, currentLine, state));
		} else {
			var _v0 = $elm$core$List$head(state.d);
			if (_v0.$ === 1) {
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
			} else {
				var topLabel = _v0.a;
				return ((_Utils_cmp(state.ns, topLabel.ns) > 0) && (!A2(
					$elm$core$List$member,
					topLabel.s,
					_List_fromArray(
						[
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('equation'),
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('array'),
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('textarray'),
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('aligned')
						])))) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.mU, state.n1, $author$project$MicroLaTeX$ClassifyBlock$CPlainText, currentLine, state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$nexStepAux = F3(
	function (currentLine, mTopLabel, state) {
		var _v0 = $author$project$MicroLaTeX$ClassifyBlock$classify(currentLine.iV + '\n');
		switch (_v0.$) {
			case 0:
				var label = _v0.a;
				var _v1 = _Utils_Tuple2(label, currentLine.jR);
				return A2($elm$core$List$member, label, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5(
						$author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock,
						state.mU,
						state.n1,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock(label),
						currentLine,
						_Utils_update(
							state,
							{dh: true, fI: 'CBeginBlock 3'}))) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5(
						$author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock,
						state.mU,
						state.n1,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock(label),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CBeginBlock 3'})));
			case 1:
				var label = _v0.a;
				var _v2 = _Utils_Tuple2(label, currentLine.jR);
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.d))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code'),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CEndBlock 2'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.d))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('equation'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('equation'),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CEndBlock 3'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.d))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('aligned'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('aligned'),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CEndBlock 4'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.d))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('array'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('array'),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CEndBlock 4'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.d))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('textarray'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('textarray'),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CEndBlock 4'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.d))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('verbatim'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('verbatim'),
						currentLine,
						_Utils_update(
							state,
							{fI: 'CEndBlock 4'}))) : A3(
					$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
					$author$project$MicroLaTeX$ClassifyBlock$CEndBlock(label),
					currentLine,
					_Utils_update(
						state,
						{fI: 'CEndBlock 5'})))))));
			case 2:
				var label = _v0.a;
				var _v3 = _Utils_Tuple2(label, currentLine.jR);
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.s;
						},
						$elm$core$List$head(state.d)),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code')),
							$elm$core$Maybe$Just($author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim)
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(state) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A3(
						$author$project$MicroLaTeX$PrimitiveBlock$handleSpecialBlock,
						$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(label),
						currentLine,
						state));
			case 3:
				var _v4 = currentLine.jR;
				var _v5 = $elm$core$List$head(state.d);
				if (_v5.$ === 1) {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.mU, state.n1, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim, currentLine, state));
				} else {
					var label = _v5.a;
					return A2(
						$elm$core$List$member,
						label.s,
						_List_fromArray(
							[
								$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code')
							])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(state) : (_Utils_eq(label.s, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4(
							$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
							$elm$core$Maybe$Just(label),
							$author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim,
							currentLine,
							state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.mU, state.n1, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim, currentLine, state)));
				}
			case 4:
				var _v6 = currentLine.jR;
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5(
						$author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock,
						state.mU,
						state.n1,
						$author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin,
						currentLine,
						_Utils_update(
							state,
							{dh: true})));
			case 5:
				var _v7 = currentLine.jR;
				var _v8 = $elm$core$List$head(state.d);
				if (!_v8.$) {
					var label = _v8.a;
					return _Utils_eq(label.s, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4(
							$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
							$elm$core$Maybe$Just(label),
							$author$project$MicroLaTeX$ClassifyBlock$CMathBlockEnd,
							currentLine,
							_Utils_update(
								state,
								{dh: false}))) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				} else {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				}
			case 6:
				var _v9 = currentLine.jR;
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A2($author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock, currentLine, state));
			case 7:
				var _v10 = _Utils_Tuple2(currentLine.jR, state.d);
				var _v11 = $elm$core$List$head(state.d);
				if (!_v11.$) {
					var label = _v11.a;
					var _v12 = label.s;
					if (_v12.$ === 3) {
						return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
					} else {
						return A2($author$project$MicroLaTeX$PrimitiveBlock$plainText, state, currentLine);
					}
				} else {
					return A2($author$project$MicroLaTeX$PrimitiveBlock$plainText, state, currentLine);
				}
			default:
				var _v13 = currentLine.jR;
				return A2($author$project$MicroLaTeX$PrimitiveBlock$emptyLine, currentLine, state);
		}
	});
var $author$project$MicroLaTeX$Util$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$MicroLaTeX$PrimitiveBlock$missingTagError = function (block) {
	var _v0 = block.fC;
	_v0$3:
	while (true) {
		switch (_v0.$) {
			case 1:
				if (_v0.a === 'item') {
					return $elm$core$Maybe$Nothing;
				} else {
					break _v0$3;
				}
			case 2:
				switch (_v0.a) {
					case 'math':
						return $elm$core$Maybe$Just('Missing \\end{math}');
					case 'code':
						return $elm$core$Maybe$Just('Missing \\end{code}');
					default:
						break _v0$3;
				}
			default:
				break _v0$3;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $elm_community$list_extra$List$Extra$unconsLast = function (list) {
	var _v0 = $elm$core$List$reverse(list);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var last_ = _v0.a;
		var rest = _v0.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				last_,
				$elm$core$List$reverse(rest)));
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$recoverFromError = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$unconsLast(state.v);
	if (_v0.$ === 1) {
		return state;
	} else {
		var _v1 = _v0.a;
		var block = _v1.a;
		var _v2 = $elm_community$list_extra$List$Extra$unconsLast(state.d);
		if (_v2.$ === 1) {
			return state;
		} else {
			var _v3 = _v2.a;
			var topLabel = _v3.a;
			var lastLineNumber = state.jR;
			var firstLineNumber = topLabel.jR;
			var provisionalContent = function () {
				var _v5 = topLabel.aW;
				if (_v5 === 2) {
					return block.qh;
				} else {
					return A3($author$project$MicroLaTeX$PrimitiveBlock$slice, firstLineNumber + 1, lastLineNumber, state.ag);
				}
			}();
			var body = A2(
				$elm_community$list_extra$List$Extra$takeWhile,
				function (item) {
					return item !== '';
				},
				provisionalContent);
			var lineNumber = (firstLineNumber + $elm$core$List$length(body)) + 1;
			var revisedContent = function () {
				var _v4 = $elm_community$list_extra$List$Extra$last(body);
				if (_v4.$ === 1) {
					return body;
				} else {
					var str = _v4.a;
					return (A2($elm$core$String$left, 4, str) === '\\end') ? $author$project$MicroLaTeX$Util$dropLast(body) : body;
				}
			}();
			var newBlock = A2(
				$author$project$MicroLaTeX$PrimitiveBlock$addSource,
				'',
				A2(
					$author$project$MicroLaTeX$PrimitiveBlock$setError,
					$author$project$MicroLaTeX$PrimitiveBlock$missingTagError(block),
					_Utils_update(
						block,
						{qh: revisedContent, sS: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})));
			return _Utils_update(
				state,
				{
					dQ: $elm$core$Maybe$Nothing,
					ax: A2($elm$core$List$cons, newBlock, state.ax),
					a8: _List_Nil,
					d: _List_Nil,
					jR: lineNumber,
					v: _List_Nil
				});
		}
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$nextStep = function (state_) {
	var currentLine__ = A2($elm_community$list_extra$List$Extra$getAt, state_.jR, state_.ag);
	var newPosition = function () {
		if (currentLine__.$ === 1) {
			return state_.sO;
		} else {
			var currentLine_ = currentLine__.a;
			return state_.sO + $elm$core$String$length(currentLine_);
		}
	}();
	var state = _Utils_update(
		state_,
		{l$: state_.l$ + 1, jR: state_.jR + 1, sO: newPosition});
	var mTopLabel = A2(
		$elm$core$Maybe$map,
		function ($) {
			return $.s;
		},
		$elm$core$List$head(state.d));
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.jR, state.ag);
	if (_v0.$ === 1) {
		return $elm$core$List$isEmpty(state.v) ? $author$project$MicroLaTeX$PrimitiveBlock$Done(state) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
			$author$project$MicroLaTeX$PrimitiveBlock$recoverFromError(state));
	} else {
		var rawLine = _v0.a;
		var currentLine = A3(
			$author$project$MicroLaTeX$Line$classify,
			A2($author$project$MicroLaTeX$PrimitiveBlock$getPosition, rawLine, state),
			state.jR,
			rawLine);
		if (state.dh) {
			var _v1 = $author$project$MicroLaTeX$ClassifyBlock$classify(currentLine.iV + '\n');
			switch (_v1.$) {
				case 1:
					var label = _v1.a;
					return A2($elm$core$List$member, label, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A2($author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock, currentLine, state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{fI: 'XXX'}));
				case 5:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A2($author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock, currentLine, state));
				default:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{fI: 'XXX'}));
			}
		} else {
			return A3($author$project$MicroLaTeX$PrimitiveBlock$nexStepAux, currentLine, mTopLabel, state);
		}
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$parseLoop = F3(
	function (idPrefix, outerCount, lines) {
		return $author$project$MicroLaTeX$PrimitiveBlock$finalize(
			A2(
				$author$project$MicroLaTeX$PrimitiveBlock$loop,
				A3($author$project$MicroLaTeX$PrimitiveBlock$init, idPrefix, outerCount, lines),
				$author$project$MicroLaTeX$PrimitiveBlock$nextStep));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$parse = F3(
	function (idPrefix, outerCount, lines) {
		return A3($author$project$MicroLaTeX$PrimitiveBlock$parseLoop, idPrefix, outerCount, lines).a_;
	});
var $author$project$XMarkdown$PrimitiveBlock$sectionRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^(#+\\s*|!!\\s*)'));
var $author$project$XMarkdown$PrimitiveBlock$findSectionPrefix = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.nB;
				},
				A2($elm$regex$Regex$find, $author$project$XMarkdown$PrimitiveBlock$sectionRegex, string))));
};
var $author$project$XMarkdown$PrimitiveBlock$titleRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^!!\\s'));
var $author$project$XMarkdown$PrimitiveBlock$findTitlePrefix = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.nB;
				},
				A2($elm$regex$Regex$find, $author$project$XMarkdown$PrimitiveBlock$titleRegex, string))));
};
var $author$project$Tools$Utility$replaceLeadingGreaterThanSign = function (str) {
	var regex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^> '));
	return A3(
		$elm$regex$Regex$replace,
		regex,
		function (_v0) {
			return '';
		},
		str);
};
var $author$project$XMarkdown$PrimitiveBlock$getHeadingData = function (line_) {
	var line = $elm$core$String$trim(line_);
	var _v0 = $author$project$Tools$KV$argsAndProperties(
		$elm$core$String$words(line));
	var args1 = _v0.a;
	var properties = _v0.b;
	var _v1 = $author$project$XMarkdown$PrimitiveBlock$findSectionPrefix(line);
	if (!_v1.$) {
		var prefix = _v1.a;
		return $elm$core$Result$Ok(
			{
				lv: _List_fromArray(
					[
						$elm$core$String$fromInt(
						$elm$core$String$length(prefix))
					]),
				fC: $author$project$Generic$Language$Ordinary('section'),
				sS: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
			});
	} else {
		var _v2 = $author$project$XMarkdown$PrimitiveBlock$findTitlePrefix(line);
		if (!_v2.$) {
			var prefix = _v2.a;
			return $elm$core$Result$Ok(
				{
					lv: _List_fromArray(
						[
							$elm$core$String$fromInt(
							$elm$core$String$length(prefix))
						]),
					fC: $author$project$Generic$Language$Ordinary('title'),
					sS: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
				});
		} else {
			if (!args1.b) {
				return $elm$core$Result$Ok(
					{lv: _List_Nil, fC: $author$project$Generic$Language$Paragraph, sS: $elm$core$Dict$empty});
			} else {
				var prefix = args1.a;
				var args = args1.b;
				switch (prefix) {
					case '>':
						var reducedLine = $author$project$Tools$Utility$replaceLeadingGreaterThanSign(
							$elm$core$String$trim(line));
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Ordinary('quotation'),
								sS: A2($elm$core$Dict$singleton, 'firstLine', reducedLine)
							});
					case '||':
						if (!args.b) {
							return $elm$core$Result$Err(1);
						} else {
							var name = args.a;
							var args2 = args.b;
							return $elm$core$Result$Ok(
								{
									lv: args2,
									fC: $author$project$Generic$Language$Verbatim(name),
									sS: properties
								});
						}
					case '|':
						if (!args.b) {
							return $elm$core$Result$Err(1);
						} else {
							var name = args.a;
							var args2 = args.b;
							return $elm$core$Result$Ok(
								{
									lv: args2,
									fC: $author$project$Generic$Language$Ordinary(name),
									sS: properties
								});
						}
					case '!!':
						var reducedLine = A3($elm$core$String$replace, '!! ', '', line);
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Ordinary('title'),
								sS: $elm$core$Dict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'firstLine',
											A3($elm$core$String$replace, '!! ', '', line)),
											_Utils_Tuple2('section-type', 'markdown')
										]))
							});
					case '-':
						var reducedLine = $author$project$Tools$Utility$replaceLeadingDashSpace(
							$elm$core$String$trim(line));
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Ordinary('item'),
								sS: A2($elm$core$Dict$singleton, 'firstLine', reducedLine)
							});
					case '.':
						var reducedLine = A3($elm$core$String$replace, '. ', '', line);
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Ordinary('numbered'),
								sS: A2($elm$core$Dict$singleton, 'firstLine', reducedLine)
							});
					case '$$':
						return $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Verbatim('math'),
								sS: $elm$core$Dict$empty
							});
					case '```':
						return $elm$core$Result$Ok(
							{
								lv: _List_Nil,
								fC: $author$project$Generic$Language$Verbatim('code'),
								sS: $elm$core$Dict$empty
							});
					default:
						return $elm$core$Result$Ok(
							{lv: _List_Nil, fC: $author$project$Generic$Language$Paragraph, sS: $elm$core$Dict$empty});
				}
			}
		}
	}
};
var $author$project$XMarkdown$PrimitiveBlock$isVerbatimLine = function (str) {
	return (A2($elm$core$String$left, 2, str) === '||') || ((A2($elm$core$String$left, 3, str) === '```') || (A2($elm$core$String$left, 2, str) === '$$'));
};
var $author$project$XMarkdown$PrimitiveBlock$functionData = {g4: $author$project$XMarkdown$PrimitiveBlock$findSectionPrefix, jh: $author$project$XMarkdown$PrimitiveBlock$getHeadingData, nb: $author$project$XMarkdown$PrimitiveBlock$isVerbatimLine};
var $author$project$XMarkdown$PrimitiveBlock$parse = F3(
	function (initialId, outerCount, lines) {
		return A4($author$project$Generic$PrimitiveBlock$parse, $author$project$XMarkdown$PrimitiveBlock$functionData, initialId, outerCount, lines);
	});
var $author$project$ScriptaV2$DifferentialCompiler$chunker = F2(
	function (lang, str) {
		switch (lang) {
			case 0:
				return A3(
					$author$project$MicroLaTeX$PrimitiveBlock$parse,
					$author$project$ScriptaV2$Config$idPrefix,
					0,
					$elm$core$String$lines(str));
			case 1:
				return A3(
					$author$project$M$PrimitiveBlock$parse,
					$author$project$ScriptaV2$Config$idPrefix,
					0,
					$elm$core$String$lines(str));
			case 2:
				return A3(
					$author$project$XMarkdown$PrimitiveBlock$parse,
					$author$project$ScriptaV2$Config$idPrefix,
					0,
					$elm$core$String$lines(str));
			default:
				return _List_Nil;
		}
	});
var $author$project$ScriptaV2$DifferentialCompiler$eGetLineNumber = function (block) {
	return block.nJ.jR;
};
var $author$project$Generic$PrimitiveBlock$eq = F2(
	function (b1, b2) {
		return (!_Utils_eq(b1.nJ.oR, b2.nJ.oR)) ? false : ((!_Utils_eq(b1.fC, b2.fC)) ? false : true);
	});
var $author$project$Library$Tree$initTree = function (input) {
	return {cb: input, hE: 0, dt: $elm$core$Maybe$Nothing, ce: $elm$core$Maybe$Nothing};
};
var $author$project$Library$Tree$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Library$Tree$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Library$Tree$Loop = function (a) {
	return {$: 0, a: a};
};
var $maca$elm_rose_tree$RoseTree$Tree$Tree = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{ai: nodeList, U: nodeListSize, _: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $maca$elm_rose_tree$RoseTree$Tree$branch = F2(
	function (a, ns) {
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$Tree,
			a,
			$elm$core$Array$fromList(ns));
	});
var $maca$elm_rose_tree$RoseTree$Tree$children = function (_v0) {
	var ns = _v0.b;
	return $elm$core$Array$toList(ns);
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $maca$elm_rose_tree$RoseTree$Tree$leaf = function (a) {
	return A2($maca$elm_rose_tree$RoseTree$Tree$Tree, a, $elm$core$Array$empty);
};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!value.$) {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $maca$elm_rose_tree$RoseTree$Tree$push = F2(
	function (n, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$Tree,
			a,
			A2($elm$core$Array$push, n, ns));
	});
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (!_v0.$) {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $elm_community$array_extra$Array$Extra$update = F2(
	function (index, alter) {
		return function (array) {
			var _v0 = A2($elm$core$Array$get, index, array);
			if (_v0.$ === 1) {
				return array;
			} else {
				var element = _v0.a;
				return A3(
					$elm$core$Array$set,
					index,
					alter(element),
					array);
			}
		};
	});
var $maca$elm_rose_tree$RoseTree$Tree$updateAtHelp = F3(
	function (path, f, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		if (path.b) {
			if (!path.b.b) {
				var idx = path.a;
				return A2(
					$maca$elm_rose_tree$RoseTree$Tree$Tree,
					a,
					A2(f, idx, ns));
			} else {
				var idx = path.a;
				var rest = path.b;
				return A2(
					$maca$elm_rose_tree$RoseTree$Tree$Tree,
					a,
					A3(
						$elm_community$array_extra$Array$Extra$update,
						idx,
						A2($maca$elm_rose_tree$RoseTree$Tree$updateAtHelp, rest, f),
						ns));
			}
		} else {
			return A2($maca$elm_rose_tree$RoseTree$Tree$Tree, a, ns);
		}
	});
var $maca$elm_rose_tree$RoseTree$Tree$updateAt = F3(
	function (path, f, tree) {
		if (!path.b) {
			return f(tree);
		} else {
			return A3(
				$maca$elm_rose_tree$RoseTree$Tree$updateAtHelp,
				path,
				function (idx) {
					return A2($elm_community$array_extra$Array$Extra$update, idx, f);
				},
				tree);
		}
	});
var $maca$elm_rose_tree$RoseTree$Tree$pushChildFor = F2(
	function (path, child) {
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$updateAt,
			path,
			$maca$elm_rose_tree$RoseTree$Tree$push(child));
	});
var $author$project$Library$Tree$nextStepTree = F2(
	function (getLevel, state) {
		var _v0 = state.cb;
		if (!_v0.b) {
			return $author$project$Library$Tree$Done(state.dt);
		} else {
			if (!_v0.b.b) {
				var lastItem = _v0.a;
				var _v1 = state.ce;
				if (_v1.$ === 1) {
					return $author$project$Library$Tree$Done(
						$elm$core$Maybe$Just(
							A2($maca$elm_rose_tree$RoseTree$Tree$branch, lastItem, _List_Nil)));
				} else {
					var path = _v1.a;
					return $author$project$Library$Tree$Done(
						A2(
							$elm$core$Maybe$map,
							A2(
								$maca$elm_rose_tree$RoseTree$Tree$pushChildFor,
								path,
								$maca$elm_rose_tree$RoseTree$Tree$leaf(lastItem)),
							state.dt));
				}
			} else {
				var currentItem = _v0.a;
				var _v2 = _v0.b;
				var nextItem = _v2.a;
				var rest = _v2.b;
				var newOutput = function () {
					var _v5 = state.ce;
					if (_v5.$ === 1) {
						return $elm$core$Maybe$Just(
							A2($maca$elm_rose_tree$RoseTree$Tree$branch, currentItem, _List_Nil));
					} else {
						var path = _v5.a;
						return A2(
							$elm$core$Maybe$map,
							A2(
								$maca$elm_rose_tree$RoseTree$Tree$pushChildFor,
								path,
								$maca$elm_rose_tree$RoseTree$Tree$leaf(currentItem)),
							state.dt);
					}
				}();
				var indexToActiveNode = A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$maca$elm_rose_tree$RoseTree$Tree$children,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$length,
							function (i) {
								return i - 1;
							})),
					newOutput);
				var dropLast = function (list) {
					return A2(
						$elm$core$List$take,
						$elm$core$List$length(list) - 1,
						list);
				};
				var append = F2(
					function (k, list) {
						return _Utils_ap(
							list,
							_List_fromArray(
								[k]));
					});
				var getNewPath = F2(
					function (currentItem_, nextItem_) {
						var _v3 = A2(
							$elm$core$Basics$compare,
							getLevel(nextItem_),
							getLevel(currentItem_));
						switch (_v3) {
							case 2:
								var _v4 = state.ce;
								if (_v4.$ === 1) {
									return $elm$core$Maybe$Just(_List_Nil);
								} else {
									return A3($elm$core$Maybe$map2, append, indexToActiveNode, state.ce);
								}
							case 1:
								return state.ce;
							default:
								return A2($elm$core$Maybe$map, dropLast, state.ce);
						}
					});
				var newPath = A2(getNewPath, currentItem, nextItem);
				return $author$project$Library$Tree$Loop(
					{
						cb: A2($elm$core$List$cons, nextItem, rest),
						hE: state.hE + 1,
						dt: newOutput,
						ce: newPath
					});
			}
		}
	});
var $author$project$Library$Tree$makeTree = F2(
	function (getLevel, input) {
		var initialState = $author$project$Library$Tree$initTree(input);
		return A2(
			$author$project$Library$Tree$loop,
			initialState,
			$author$project$Library$Tree$nextStepTree(getLevel));
	});
var $author$project$Library$Forest$init = F2(
	function (getLevel, input) {
		var _v0 = $elm$core$List$head(input);
		if (_v0.$ === 1) {
			return {fe: 0, b6: _List_Nil, cb: _List_Nil, dt: _List_Nil, hR: 0};
		} else {
			var item = _v0.a;
			return {
				fe: getLevel(item),
				b6: _List_Nil,
				cb: input,
				dt: _List_Nil,
				hR: getLevel(item)
			};
		}
	});
var $author$project$Library$Forest$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Library$Forest$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Library$Forest$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Library$Forest$nextStep = F2(
	function (getLevel, state) {
		var _v0 = state.cb;
		if (!_v0.b) {
			return $author$project$Library$Forest$Done(
				$elm$core$List$reverse(
					A2(
						$elm$core$List$cons,
						$elm$core$List$reverse(state.b6),
						state.dt)));
		} else {
			var x = _v0.a;
			var xs = _v0.b;
			var level = getLevel(x);
			return _Utils_eq(level, state.hR) ? $author$project$Library$Forest$Loop(
				_Utils_update(
					state,
					{
						fe: level,
						b6: _List_fromArray(
							[x]),
						cb: xs,
						dt: _Utils_eq(state.b6, _List_Nil) ? state.dt : A2(
							$elm$core$List$cons,
							$elm$core$List$reverse(state.b6),
							state.dt)
					})) : $author$project$Library$Forest$Loop(
				_Utils_update(
					state,
					{
						fe: level,
						b6: A2($elm$core$List$cons, x, state.b6),
						cb: xs
					}));
		}
	});
var $author$project$Library$Forest$toListList = F2(
	function (getLevel, input) {
		var initialState = A2($author$project$Library$Forest$init, getLevel, input);
		return A2(
			$author$project$Library$Forest$loop,
			initialState,
			$author$project$Library$Forest$nextStep(getLevel));
	});
var $author$project$Library$Forest$makeForest = F2(
	function (getLevel, input) {
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				$author$project$Library$Tree$makeTree(getLevel),
				A2($author$project$Library$Forest$toListList, getLevel, input)));
	});
var $author$project$Generic$ForestTransform$forestFromBlocks = F2(
	function (indentation, blocks) {
		return A2($author$project$Library$Forest$makeForest, indentation, blocks);
	});
var $maca$elm_rose_tree$RoseTree$Tree$foldr = F3(
	function (f, acc, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		return A3(
			$elm$core$Array$foldr,
			F2(
				function (n, acc_) {
					return A3($maca$elm_rose_tree$RoseTree$Tree$foldr, f, acc_, n);
				}),
			A2(
				f,
				A2($maca$elm_rose_tree$RoseTree$Tree$Tree, a, ns),
				acc),
			ns);
	});
var $maca$elm_rose_tree$RoseTree$Tree$value = function (_v0) {
	var a = _v0.a;
	return a;
};
var $author$project$Library$Tree$flatten = A2(
	$maca$elm_rose_tree$RoseTree$Tree$foldr,
	F2(
		function (n, acc) {
			return A2(
				$elm$core$List$cons,
				$maca$elm_rose_tree$RoseTree$Tree$value(n),
				acc);
		}),
	_List_Nil);
var $author$project$Generic$BlockUtilities$getMessages = function (b) {
	return b.nJ.jU;
};
var $author$project$ScriptaV2$DifferentialCompiler$messagesFromTree = function (tree) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$Generic$BlockUtilities$getMessages,
			$author$project$Library$Tree$flatten(tree)));
};
var $author$project$ScriptaV2$DifferentialCompiler$messagesFromForest = function (forest) {
	return $elm$core$List$concat(
		A2($elm$core$List$map, $author$project$ScriptaV2$DifferentialCompiler$messagesFromTree, forest));
};
var $author$project$ScriptaV2$DifferentialCompiler$pGetLineNumber = function (block) {
	return block.nJ.jR;
};
var $author$project$Generic$BlockUtilities$setLineNumber = F2(
	function (k, b) {
		return A2(
			$author$project$Generic$BlockUtilities$updateMeta,
			function (m) {
				return _Utils_update(
					m,
					{jR: k});
			},
			b);
	});
var $toastal$either$Either$Right = function (a) {
	return {$: 1, a: a};
};
var $author$project$Generic$Language$Fun = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $author$project$Generic$Language$Text = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$M$Expression$fixup = function (input) {
	if (input.b && (input.a.$ === 1)) {
		var _v1 = input.a;
		var name = _v1.a;
		var exprList = _v1.b;
		var meta = _v1.c;
		var rest = input.b;
		var newExprlist = function () {
			if (exprList.b) {
				var head = exprList.a;
				var tail = exprList.b;
				if (!head.$) {
					var str = head.a;
					var meta_ = head.b;
					return _Utils_ap(
						_List_fromArray(
							[
								A2(
								$author$project$Generic$Language$Text,
								$elm$core$String$trim(str),
								meta_)
							]),
						tail);
				} else {
					return exprList;
				}
			} else {
				return _List_Nil;
			}
		}();
		return A2(
			$elm$core$List$cons,
			A3($author$project$Generic$Language$Fun, name, newExprlist, meta),
			$author$project$M$Expression$fixup(rest));
	} else {
		return input;
	}
};
var $author$project$M$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			l: _List_Nil,
			jR: lineNumber,
			jU: _List_Nil,
			ev: $elm$core$List$length(tokens),
			v: _List_Nil,
			h1: 0,
			al: 0,
			bb: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$M$Expression$advanceTokenIndex = function (state) {
	return _Utils_update(
		state,
		{al: state.al + 1});
};
var $author$project$M$Expression$getToken = function (state) {
	return A2($elm_community$list_extra$List$Extra$getAt, state.al, state.bb);
};
var $author$project$M$Expression$pushOnStack_ = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				v: A2($elm$core$List$cons, token, state.v)
			});
	});
var $author$project$Generic$Language$VFun = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $author$project$ScriptaV2$Config$expressionIdPrefix = 'e-';
var $author$project$M$Expression$makeId = F2(
	function (lineNumber, tokenIndex) {
		return $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(lineNumber) + ('.' + $elm$core$String$fromInt(tokenIndex)));
	});
var $author$project$M$Expression$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.qb;
		var end = _v0.rb;
		var index = _v0.jz;
		return {
			qb: begin,
			rb: end,
			hg: A2($author$project$M$Expression$makeId, lineNumber, tokenIndex),
			jz: index
		};
	});
var $author$project$M$Tokenizer$indexOf = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.jz;
		case 1:
			var meta = token.a;
			return meta.jz;
		case 2:
			var meta = token.a;
			return meta.jz;
		case 3:
			var meta = token.a;
			return meta.jz;
		case 4:
			var meta = token.b;
			return meta.jz;
		case 5:
			var meta = token.b;
			return meta.jz;
		case 6:
			var meta = token.a;
			return meta.jz;
		case 7:
			var meta = token.b;
			return meta.jz;
		case 8:
			var meta = token.a;
			return meta.jz;
		default:
			var meta = token.b;
			return meta.jz;
	}
};
var $author$project$M$Expression$stringTokenToExpr = F2(
	function (lineNumber, token) {
		switch (token.$) {
			case 4:
				var str = token.a;
				var loc = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A3(
							$author$project$M$Expression$boostMeta,
							lineNumber,
							$author$project$M$Tokenizer$indexOf(token),
							loc)));
			case 5:
				var str = token.a;
				var loc = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A3(
							$author$project$M$Expression$boostMeta,
							lineNumber,
							$author$project$M$Tokenizer$indexOf(token),
							loc)));
			case 7:
				var str = token.a;
				var loc = token.b;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$Generic$Language$VFun,
						'math',
						str,
						A3(
							$author$project$M$Expression$boostMeta,
							lineNumber,
							$author$project$M$Tokenizer$indexOf(token),
							loc)));
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$M$Expression$commit = F2(
	function (token, state) {
		var _v0 = A2($author$project$M$Expression$stringTokenToExpr, state.jR, token);
		if (_v0.$ === 1) {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					l: A2($elm$core$List$cons, expr, state.l)
				});
		}
	});
var $author$project$M$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				v: A2($elm$core$List$cons, token, state.v)
			});
	});
var $author$project$M$Expression$pushOrCommit_ = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.v) ? A2($author$project$M$Expression$commit, token, state) : A2($author$project$M$Expression$push, token, state);
	});
var $author$project$M$Expression$pushOrCommit = F2(
	function (token, state) {
		switch (token.$) {
			case 4:
				return A2($author$project$M$Expression$pushOrCommit_, token, state);
			case 5:
				return A2($author$project$M$Expression$pushOrCommit_, token, state);
			case 6:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 7:
				return A2($author$project$M$Expression$pushOrCommit_, token, state);
			case 8:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 0:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 1:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 2:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 3:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			default:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
		}
	});
var $author$project$M$Tokenizer$LB = function (a) {
	return {$: 0, a: a};
};
var $author$project$M$Tokenizer$RB = function (a) {
	return {$: 1, a: a};
};
var $author$project$M$Tokenizer$S = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$M$Tokenizer$BracketedMath = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$M$Tokenizer$CodeToken = function (a) {
	return {$: 8, a: a};
};
var $author$project$M$Tokenizer$LMB = function (a) {
	return {$: 2, a: a};
};
var $author$project$M$Tokenizer$MathToken = function (a) {
	return {$: 6, a: a};
};
var $author$project$M$Tokenizer$RMB = function (a) {
	return {$: 3, a: a};
};
var $author$project$M$Tokenizer$TokenError = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$M$Tokenizer$W = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$M$Tokenizer$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 0:
				var meta = token.a;
				return $author$project$M$Tokenizer$LB(
					_Utils_update(
						meta,
						{jz: k}));
			case 1:
				var meta = token.a;
				return $author$project$M$Tokenizer$RB(
					_Utils_update(
						meta,
						{jz: k}));
			case 2:
				var meta = token.a;
				return $author$project$M$Tokenizer$LMB(
					_Utils_update(
						meta,
						{jz: k}));
			case 3:
				var meta = token.a;
				return $author$project$M$Tokenizer$RMB(
					_Utils_update(
						meta,
						{jz: k}));
			case 4:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$S,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 5:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$W,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 6:
				var meta = token.a;
				return $author$project$M$Tokenizer$MathToken(
					_Utils_update(
						meta,
						{jz: k}));
			case 7:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$BracketedMath,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 8:
				var meta = token.a;
				return $author$project$M$Tokenizer$CodeToken(
					_Utils_update(
						meta,
						{jz: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$TokenError,
					list,
					_Utils_update(
						meta,
						{jz: k}));
		}
	});
var $author$project$M$Tokenizer$changeTokenIndicesFrom = F3(
	function (from, delta, tokens) {
		var f = function (token) {
			var k = $author$project$M$Tokenizer$indexOf(token);
			return (_Utils_cmp(k, from) > -1) ? A2($author$project$M$Tokenizer$setIndex, k + delta, token) : token;
		};
		return A2(
			$elm$core$List$map,
			function (token) {
				return f(token);
			},
			tokens);
	});
var $author$project$M$Expression$dummyTokenIndex = 0;
var $author$project$M$Expression$dummyLoc = {qb: 0, rb: 0, jz: $author$project$M$Expression$dummyTokenIndex};
var $author$project$M$Expression$dummyLocWithId = {qb: 0, rb: 0, hg: 'dummy (2)', jz: $author$project$M$Expression$dummyTokenIndex};
var $author$project$M$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$M$Expression$dummyLocWithId)
			]),
		$author$project$M$Expression$dummyLocWithId);
};
var $author$project$M$Expression$errorSuffix = function (rest) {
	if (!rest.b) {
		return ']?';
	} else {
		if ((rest.a.$ === 5) && (!rest.b.b)) {
			var _v1 = rest.a;
			return ']?';
		} else {
			return '';
		}
	}
};
var $author$project$Tools$ParserHelpers$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$M$Expression$addErrorMessage = F2(
	function (message, state) {
		var committed = A2(
			$elm$core$List$cons,
			$author$project$M$Expression$errorMessage(message),
			state.l);
		return _Utils_update(
			state,
			{l: committed});
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$M$Symbol$value = function (symbol) {
	switch (symbol) {
		case 0:
			return 1;
		case 1:
			return -1;
		case 3:
			return 1;
		case 4:
			return -1;
		case 5:
			return 0;
		case 8:
			return 0;
		case 6:
			return 0;
		case 2:
			return 0;
		case 7:
			return 0;
		default:
			return 0;
	}
};
var $author$project$M$Symbol$balance = function (symbols) {
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$M$Symbol$value, symbols));
};
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$M$Expression$bracketError = function (k) {
	if (k < 0) {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, -k, ']'));
		return $author$project$M$Expression$errorMessage(
			' ' + (brackets + (' << Too many right brackets (' + ($elm$core$String$fromInt(-k) + ')'))));
	} else {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, k, '['));
		return $author$project$M$Expression$errorMessage(
			' ' + (brackets + (' << Too many left brackets (' + ($elm$core$String$fromInt(k) + ')'))));
	}
};
var $author$project$M$Expression$bracketErrorAsString = function (k) {
	return (k < 0) ? ('Too many right brackets (' + ($elm$core$String$fromInt(-k) + ')')) : ('Too many left brackets (' + ($elm$core$String$fromInt(k) + ')'));
};
var $author$project$M$Symbol$C = 7;
var $author$project$M$Symbol$M = 6;
var $author$project$M$Symbol$WS = 8;
var $author$project$M$Match$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$M$Match$getSegment = F2(
	function (sym, symbols) {
		var seg_ = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			function (sym_) {
				return !_Utils_eq(sym_, sym);
			},
			A2($elm$core$List$drop, 1, symbols));
		var n = $elm$core$List$length(seg_);
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, n + 1, symbols);
		if (_v0.$ === 1) {
			return A2($elm$core$List$cons, sym, seg_);
		} else {
			var last = _v0.a;
			return A2(
				$elm$core$List$cons,
				sym,
				_Utils_ap(
					seg_,
					_List_fromArray(
						[last])));
		}
	});
var $author$project$Tools$ParserHelpers$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Tools$ParserHelpers$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Tools$ParserHelpers$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$M$Match$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.gb);
	if (_v0.$ === 1) {
		return $author$project$Tools$ParserHelpers$Done($elm$core$Maybe$Nothing);
	} else {
		var sym = _v0.a;
		var brackets = state.gB + $author$project$M$Symbol$value(sym);
		return (brackets < 0) ? $author$project$Tools$ParserHelpers$Done($elm$core$Maybe$Nothing) : ((!brackets) ? $author$project$Tools$ParserHelpers$Done(
			$elm$core$Maybe$Just(state.jz)) : $author$project$Tools$ParserHelpers$Loop(
			{
				gB: brackets,
				jz: state.jz + 1,
				gb: A2($elm$core$List$drop, 1, state.gb)
			}));
	}
};
var $author$project$M$Match$match = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var symbol = _v0.a;
		return A2(
			$elm$core$List$member,
			symbol,
			_List_fromArray(
				[7, 6])) ? $elm$core$Maybe$Just(
			$elm$core$List$length(
				A2($author$project$M$Match$getSegment, symbol, symbols)) - 1) : (($author$project$M$Symbol$value(symbol) < 0) ? $elm$core$Maybe$Nothing : A2(
			$author$project$Tools$ParserHelpers$loop,
			{
				gB: $author$project$M$Symbol$value(symbol),
				jz: 1,
				gb: A2($elm$core$List$drop, 1, symbols)
			},
			$author$project$M$Match$nextStep));
	}
};
var $author$project$M$Match$splitAt = F2(
	function (k, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, k, list),
			A2($elm$core$List$drop, k, list));
	});
var $author$project$M$Match$split = function (symbols) {
	var _v0 = $author$project$M$Match$match(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$M$Match$splitAt, k + 1, symbols));
	}
};
var $author$project$M$Match$hasReducibleArgs = function (symbols) {
	hasReducibleArgs:
	while (true) {
		if (!symbols.b) {
			return true;
		} else {
			switch (symbols.a) {
				case 0:
					var _v14 = symbols.a;
					return $author$project$M$Match$reducibleAux(symbols);
				case 3:
					var _v15 = symbols.a;
					return $author$project$M$Match$reducibleAux(symbols);
				case 7:
					var _v16 = symbols.a;
					return $author$project$M$Match$reducibleAux(symbols);
				case 6:
					var _v17 = symbols.a;
					var seg = A2($author$project$M$Match$getSegment, 6, symbols);
					if ($author$project$M$Match$isReducible(seg)) {
						var $temp$symbols = A2(
							$elm$core$List$drop,
							$elm$core$List$length(seg),
							symbols);
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					} else {
						return false;
					}
				case 2:
					var _v18 = symbols.a;
					var rest = symbols.b;
					var $temp$symbols = rest;
					symbols = $temp$symbols;
					continue hasReducibleArgs;
				case 5:
					var _v19 = symbols.a;
					var rest = symbols.b;
					var $temp$symbols = rest;
					symbols = $temp$symbols;
					continue hasReducibleArgs;
				default:
					return false;
			}
		}
	}
};
var $author$project$M$Match$isReducible = function (symbols_) {
	var symbols = A2(
		$elm$core$List$filter,
		function (sym) {
			return sym !== 8;
		},
		symbols_);
	_v2$4:
	while (true) {
		if (symbols.b) {
			switch (symbols.a) {
				case 6:
					var _v3 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(6));
				case 7:
					var _v4 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(7));
				case 0:
					if (symbols.b.b && (symbols.b.a === 5)) {
						var _v5 = symbols.a;
						var _v6 = symbols.b;
						var _v7 = _v6.a;
						var rest = _v6.b;
						var _v8 = $elm$core$List$head(
							$elm$core$List$reverse(rest));
						if ((!_v8.$) && (_v8.a === 1)) {
							var _v9 = _v8.a;
							return $author$project$M$Match$hasReducibleArgs(
								$author$project$M$Match$dropLast(rest));
						} else {
							return false;
						}
					} else {
						break _v2$4;
					}
				case 3:
					var _v10 = symbols.a;
					var rest = symbols.b;
					var _v11 = $elm$core$List$head(
						$elm$core$List$reverse(rest));
					if ((!_v11.$) && (_v11.a === 4)) {
						var _v12 = _v11.a;
						return true;
					} else {
						return false;
					}
				default:
					break _v2$4;
			}
		} else {
			break _v2$4;
		}
	}
	return false;
};
var $author$project$M$Match$reducibleAux = function (symbols) {
	var _v0 = $author$project$M$Match$split(symbols);
	if (_v0.$ === 1) {
		return false;
	} else {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		return $author$project$M$Match$isReducible(a) && $author$project$M$Match$hasReducibleArgs(b);
	}
};
var $author$project$M$Expression$errorMessageInvisible = function (_v0) {
	return A3(
		$author$project$Generic$Language$Fun,
		'invisible',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, 'foo', $author$project$M$Expression$dummyLocWithId)
			]),
		$author$project$M$Expression$dummyLocWithId);
};
var $author$project$M$Tokenizer$TLB = 0;
var $author$project$M$Tokenizer$TRB = 1;
var $author$project$M$Tokenizer$TBracketedMath = 7;
var $author$project$M$Tokenizer$TCode = 8;
var $author$project$M$Tokenizer$TLMB = 2;
var $author$project$M$Tokenizer$TMath = 6;
var $author$project$M$Tokenizer$TRMB = 3;
var $author$project$M$Tokenizer$TS = 4;
var $author$project$M$Tokenizer$TTokenError = 9;
var $author$project$M$Tokenizer$TW = 5;
var $author$project$M$Tokenizer$type_ = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 6;
		case 7:
			return 7;
		case 8:
			return 8;
		default:
			return 9;
	}
};
var $author$project$M$Expression$isExpr = function (tokens) {
	return _Utils_eq(
		A2(
			$elm$core$List$map,
			$author$project$M$Tokenizer$type_,
			A2($elm$core$List$take, 1, tokens)),
		_List_fromArray(
			[0])) && _Utils_eq(
		A2(
			$elm$core$List$map,
			$author$project$M$Tokenizer$type_,
			A2(
				$elm$core$List$take,
				1,
				$elm$core$List$reverse(tokens))),
		_List_fromArray(
			[1]));
};
var $author$project$M$Symbol$BM = 2;
var $author$project$M$Symbol$E = 9;
var $author$project$M$Symbol$L = 0;
var $author$project$M$Symbol$LM = 3;
var $author$project$M$Symbol$R = 1;
var $author$project$M$Symbol$RM = 4;
var $author$project$M$Symbol$ST = 5;
var $author$project$M$Symbol$toSymbol = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 8;
		case 6:
			return 6;
		case 7:
			return 2;
		case 8:
			return 7;
		default:
			return 9;
	}
};
var $author$project$M$Symbol$toSymbols = function (tokens) {
	return A2($elm$core$List$map, $author$project$M$Symbol$toSymbol, tokens);
};
var $author$project$M$Expression$splitTokens = function (tokens) {
	var _v0 = $author$project$M$Match$match(
		$author$project$M$Symbol$toSymbols(tokens));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$M$Match$splitAt, k + 1, tokens));
	}
};
var $author$project$M$Expression$segLength = function (tokens) {
	return $elm$core$List$length(
		A2(
			$author$project$M$Match$getSegment,
			6,
			$author$project$M$Symbol$toSymbols(tokens)));
};
var $author$project$M$Expression$splitTokensWithSegment = function (tokens) {
	return A2(
		$author$project$M$Match$splitAt,
		$author$project$M$Expression$segLength(tokens) + 1,
		tokens);
};
var $author$project$M$Expression$unbracket = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		A2(
			$elm$core$List$take,
			$elm$core$List$length(list) - 1,
			list));
};
var $author$project$M$Expression$reduceRestOfTokens = F2(
	function (lineNumber, tokens) {
		if (tokens.b) {
			switch (tokens.a.$) {
				case 0:
					var _v15 = $author$project$M$Expression$splitTokens(tokens);
					if (_v15.$ === 1) {
						return _List_fromArray(
							[
								$author$project$M$Expression$errorMessageInvisible('Error on match'),
								A2($author$project$Generic$Language$Text, 'error on match', $author$project$M$Expression$dummyLocWithId)
							]);
					} else {
						var _v16 = _v15.a;
						var a = _v16.a;
						var b = _v16.b;
						return _Utils_ap(
							A2($author$project$M$Expression$reduceTokens, lineNumber, a),
							A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
					}
				case 2:
					var _v17 = $author$project$M$Expression$splitTokens(tokens);
					if (_v17.$ === 1) {
						return _List_fromArray(
							[
								$author$project$M$Expression$errorMessageInvisible('Error on match'),
								A2($author$project$Generic$Language$Text, 'error on match', $author$project$M$Expression$dummyLocWithId)
							]);
					} else {
						var _v18 = _v17.a;
						var a = _v18.a;
						var b = _v18.b;
						return _Utils_ap(
							A2($author$project$M$Expression$reduceTokens, lineNumber, a),
							A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
					}
				case 6:
					var _v19 = $author$project$M$Expression$splitTokensWithSegment(tokens);
					var a = _v19.a;
					var b = _v19.b;
					return _Utils_ap(
						A2($author$project$M$Expression$reduceTokens, lineNumber, a),
						A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
				case 8:
					var _v20 = $author$project$M$Expression$splitTokensWithSegment(tokens);
					var a = _v20.a;
					var b = _v20.b;
					return _Utils_ap(
						A2($author$project$M$Expression$reduceTokens, lineNumber, a),
						A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
				case 4:
					var _v21 = tokens.a;
					var str = _v21.a;
					var meta = _v21.b;
					return A2(
						$elm$core$List$cons,
						A2(
							$author$project$Generic$Language$Text,
							str,
							A3(
								$author$project$M$Expression$boostMeta,
								0,
								$author$project$M$Tokenizer$indexOf(
									A2($author$project$M$Tokenizer$S, str, meta)),
								meta)),
						A2(
							$author$project$M$Expression$reduceRestOfTokens,
							lineNumber,
							A2($elm$core$List$drop, 1, tokens)));
				default:
					var token = tokens.a;
					var _v22 = A2($author$project$M$Expression$stringTokenToExpr, lineNumber, token);
					if (!_v22.$) {
						var expr = _v22.a;
						return A2(
							$elm$core$List$cons,
							expr,
							A2(
								$author$project$M$Expression$reduceRestOfTokens,
								lineNumber,
								A2($elm$core$List$drop, 1, tokens)));
					} else {
						return _List_fromArray(
							[
								$author$project$M$Expression$errorMessage(
								'Line ' + ($elm$core$String$fromInt(lineNumber) + ', error converting token')),
								A2($author$project$Generic$Language$Text, 'error converting Token', $author$project$M$Expression$dummyLocWithId)
							]);
					}
			}
		} else {
			return _List_Nil;
		}
	});
var $author$project$M$Expression$reduceTokens = F2(
	function (lineNumber, tokens) {
		if ($author$project$M$Expression$isExpr(tokens)) {
			var args = $author$project$M$Expression$unbracket(tokens);
			if (args.b && (args.a.$ === 4)) {
				var _v1 = args.a;
				var name = _v1.a;
				var meta = _v1.b;
				return _List_fromArray(
					[
						A3(
						$author$project$Generic$Language$Fun,
						name,
						A2(
							$author$project$M$Expression$reduceRestOfTokens,
							lineNumber,
							A2($elm$core$List$drop, 1, args)),
						A3($author$project$M$Expression$boostMeta, lineNumber, meta.jz, meta))
					]);
			} else {
				return _List_fromArray(
					[
						$author$project$M$Expression$errorMessage('[????]')
					]);
			}
		} else {
			_v2$4:
			while (true) {
				if (tokens.b) {
					switch (tokens.a.$) {
						case 6:
							if (((tokens.b.b && (tokens.b.a.$ === 4)) && tokens.b.b.b) && (tokens.b.b.a.$ === 6)) {
								var meta = tokens.a.a;
								var _v3 = tokens.b;
								var _v4 = _v3.a;
								var str = _v4.a;
								var _v5 = _v3.b;
								var rest = _v5.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$VFun,
										'math',
										str,
										A3($author$project$M$Expression$boostMeta, lineNumber, meta.jz, meta)),
									A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								break _v2$4;
							}
						case 8:
							if (((tokens.b.b && (tokens.b.a.$ === 4)) && tokens.b.b.b) && (tokens.b.b.a.$ === 8)) {
								var meta = tokens.a.a;
								var _v6 = tokens.b;
								var _v7 = _v6.a;
								var str = _v7.a;
								var _v8 = _v6.b;
								var rest = _v8.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$VFun,
										'code',
										str,
										A3($author$project$M$Expression$boostMeta, lineNumber, meta.jz, meta)),
									A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								break _v2$4;
							}
						case 2:
							if (((tokens.b.b && (tokens.b.a.$ === 4)) && tokens.b.b.b) && (tokens.b.b.a.$ === 3)) {
								var meta = tokens.a.a;
								var _v9 = tokens.b;
								var _v10 = _v9.a;
								var str = _v10.a;
								var _v11 = _v9.b;
								var rest = _v11.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$VFun,
										'math',
										str,
										A3($author$project$M$Expression$boostMeta, lineNumber, meta.jz, meta)),
									A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								var meta = tokens.a.a;
								var rest = tokens.b;
								var reversedRest = $elm$core$List$reverse(rest);
								var _v12 = $elm$core$List$head(reversedRest);
								if ((!_v12.$) && (_v12.a.$ === 3)) {
									var content = A2(
										$elm$core$String$join,
										' ',
										A2(
											$elm$core$List$map,
											function (t) {
												switch (t.$) {
													case 4:
														var str = t.a;
														return str;
													case 0:
														return '[';
													case 1:
														return ']';
													default:
														return '';
												}
											},
											rest));
									return _List_fromArray(
										[
											A3(
											$author$project$Generic$Language$VFun,
											'math',
											content,
											A3($author$project$M$Expression$boostMeta, lineNumber, meta.jz, meta))
										]);
								} else {
									return _List_fromArray(
										[
											$author$project$M$Expression$errorMessage('[????]')
										]);
								}
							}
						default:
							break _v2$4;
					}
				} else {
					break _v2$4;
				}
			}
			return _List_fromArray(
				[
					$author$project$M$Expression$errorMessage('[????]')
				]);
		}
	});
var $author$project$M$Expression$reduceStack = function (state) {
	return A2(
		$author$project$M$Expression$reduceTokens,
		state.jR,
		$elm$core$List$reverse(state.v));
};
var $author$project$M$Expression$tokensAreReducible = function (state) {
	return $author$project$M$Match$isReducible(
		$elm$core$List$reverse(
			$author$project$M$Symbol$toSymbols(state.v)));
};
var $author$project$M$Expression$reduceState = function (state) {
	return $author$project$M$Expression$tokensAreReducible(state) ? _Utils_update(
		state,
		{
			l: _Utils_ap(
				$author$project$M$Expression$reduceStack(state),
				state.l),
			v: _List_Nil
		}) : state;
};
var $author$project$M$Expression$recoverFromUnknownError = function (state) {
	var k = $author$project$M$Symbol$balance(
		$author$project$M$Symbol$toSymbols(
			$elm$core$List$reverse(state.v)));
	var newStack = _Utils_ap(
		A2(
			$elm$core$List$repeat,
			k,
			$author$project$M$Tokenizer$RB($author$project$M$Expression$dummyLoc)),
		state.v);
	var newSymbols = $author$project$M$Symbol$toSymbols(
		$elm$core$List$reverse(newStack));
	var reducible = $author$project$M$Match$isReducible(newSymbols);
	return reducible ? $author$project$Tools$Loop$Done(
		A2(
			$author$project$M$Expression$addErrorMessage,
			' ?!?(1) ',
			$author$project$M$Expression$reduceState(
				_Utils_update(
					state,
					{
						l: A2(
							$elm$core$List$cons,
							$author$project$M$Expression$errorMessage(' ?!?(2) '),
							state.l),
						jU: A3(
							$author$project$Tools$ParserHelpers$prependMessage,
							state.jR,
							' ?!?(3) ' + ($elm$core$String$fromInt(k) + ' right brackets'),
							state.jU),
						ev: $elm$core$List$length(newStack),
						v: newStack,
						al: 0
					})))) : $author$project$Tools$Loop$Done(
		_Utils_update(
			state,
			{
				l: A2(
					$elm$core$List$cons,
					$author$project$M$Expression$bracketError(k),
					state.l),
				jU: A3(
					$author$project$Tools$ParserHelpers$prependMessage,
					state.jR,
					$author$project$M$Expression$bracketErrorAsString(k),
					state.jU)
			}));
};
var $author$project$M$Tokenizer$stringValue = function (token) {
	switch (token.$) {
		case 0:
			return '[';
		case 1:
			return ']';
		case 2:
			return '\\(';
		case 3:
			return '\\)';
		case 4:
			var str = token.a;
			return str;
		case 5:
			var str = token.a;
			return str;
		case 6:
			return '$';
		case 7:
			var s = token.a;
			return '\\(' + (s + '\\)');
		case 8:
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$M$Tokenizer$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$M$Tokenizer$stringValue, tokens));
};
var $author$project$M$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.v);
	_v0$11:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 2:
					var meta1 = _v0.a.a;
					var rest = _v0.b;
					var k = meta1.jz;
					var shiftedTokens = A3($author$project$M$Tokenizer$changeTokenIndicesFrom, k + 1, 4, state.bb);
					var errorTokens = _List_fromArray(
						[
							$author$project$M$Tokenizer$LB(
							{qb: 0, rb: 0, jz: k + 1}),
							A2(
							$author$project$M$Tokenizer$S,
							'red',
							{qb: 1, rb: 3, jz: k + 2}),
							A2(
							$author$project$M$Tokenizer$S,
							' unmatched \\(',
							{qb: 4, rb: 9, jz: k + 3}),
							$author$project$M$Tokenizer$RB(
							{qb: 10, rb: 10, jz: k + 4})
						]);
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'No terminating right math bracket', state.jU),
								v: _List_Nil,
								al: meta1.jz + 1,
								bb: _Utils_ap(
									A2($elm$core$List$take, k + 1, state.bb),
									_Utils_ap(
										errorTokens,
										A2($elm$core$List$drop, k + 1, shiftedTokens)))
							}));
				case 3:
					var meta1 = _v0.a.a;
					var k = meta1.jz;
					var shiftedTokens = A3($author$project$M$Tokenizer$changeTokenIndicesFrom, k + 1, 4, state.bb);
					var errorTokens = _List_fromArray(
						[
							$author$project$M$Tokenizer$LB(
							{qb: 0, rb: 0, jz: k + 1}),
							A2(
							$author$project$M$Tokenizer$S,
							'red',
							{qb: 1, rb: 3, jz: k + 2}),
							A2(
							$author$project$M$Tokenizer$S,
							'unmatched \\)',
							{qb: 4, rb: 9, jz: k + 3}),
							$author$project$M$Tokenizer$RB(
							{qb: 10, rb: 10, jz: k + 4})
						]);
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'No terminating right math bracket', state.jU),
								v: _List_Nil,
								al: meta1.jz + 1,
								bb: _Utils_ap(
									A2($elm$core$List$take, k + 1, state.bb),
									_Utils_ap(
										errorTokens,
										A2($elm$core$List$drop, k + 1, shiftedTokens)))
							}));
				case 0:
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 1:
								var _v1 = _v0.b;
								var meta = _v1.a.a;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$M$Expression$errorMessage('[?]'),
												state.l),
											jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'Brackets must enclose something', state.jU),
											v: _List_Nil,
											al: meta.jz + 1
										}));
							case 0:
								var meta1 = _v0.a.a;
								var _v2 = _v0.b;
								var k = meta1.jz;
								var shiftedTokens = A3($author$project$M$Tokenizer$changeTokenIndicesFrom, k + 1, 1, state.bb);
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'Consecutive left brackets', state.jU),
											v: _List_Nil,
											al: meta1.jz,
											bb: _Utils_ap(
												A2($elm$core$List$take, k + 1, state.bb),
												A2(
													$elm$core$List$cons,
													A2(
														$author$project$M$Tokenizer$S,
														'1[??',
														_Utils_update(
															$author$project$M$Expression$dummyLoc,
															{jz: k + 1})),
													A2($elm$core$List$drop, k + 1, shiftedTokens)))
										}));
							case 4:
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var fName = _v4.a;
								var meta = _v4.b;
								var rest = _v3.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$M$Expression$errorMessage(
													$author$project$M$Expression$errorSuffix(rest)),
												A2(
													$elm$core$List$cons,
													$author$project$M$Expression$errorMessage('[' + fName),
													state.l)),
											jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'Missing right bracket', state.jU),
											v: _List_Nil,
											al: meta.jz + 1
										}));
							case 5:
								if (_v0.b.a.a === ' ') {
									var _v5 = _v0.b;
									var _v6 = _v5.a;
									var meta = _v6.b;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												l: A2(
													$elm$core$List$cons,
													$author$project$M$Expression$errorMessage('[ - can\'t have space after the bracket '),
													state.l),
												jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'Can\'t have space after left bracket - try [something ...', state.jU),
												v: _List_Nil,
												al: meta.jz + 1
											}));
								} else {
									break _v0$11;
								}
							default:
								break _v0$11;
						}
					} else {
						return $author$project$Tools$Loop$Done(
							_Utils_update(
								state,
								{
									l: A2(
										$elm$core$List$cons,
										$author$project$M$Expression$errorMessage('[...?'),
										state.l),
									jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'That left bracket needs something after it', state.jU),
									ev: 0,
									v: _List_Nil,
									al: 0
								}));
					}
				case 1:
					var meta = _v0.a.a;
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage(' extra ]?'),
									state.l),
								jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'Extra right bracket(s)', state.jU),
								v: _List_Nil,
								al: meta.jz + 1
							}));
				case 6:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$M$Tokenizer$toString(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage(message),
									state.l),
								jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'opening dollar sign needs to be matched with a closing one', state.jU),
								ev: 0,
								v: _List_Nil,
								al: meta.jz + 1
							}));
				case 8:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$M$Tokenizer$toString(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage(message),
									state.l),
								jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'opening backtick needs to be matched with a closing one', state.jU),
								ev: 0,
								v: _List_Nil,
								al: meta.jz + 1
							}));
				case 9:
					var _v7 = _v0.a;
					var meta = _v7.b;
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage('\\[..??'),
									state.l),
								jU: A3($author$project$Tools$ParserHelpers$prependMessage, state.jR, 'No mathching \\]??', state.jU),
								v: _List_Nil,
								al: meta.jz + 1
							}));
				default:
					break _v0$11;
			}
		} else {
			break _v0$11;
		}
	}
	return $author$project$M$Expression$recoverFromUnknownError(state);
};
var $author$project$M$Expression$stackIsEmpty = function (state) {
	return $elm$core$List$isEmpty(state.v);
};
var $author$project$M$Expression$nextStep = function (state) {
	var _v0 = $author$project$M$Expression$getToken(state);
	if (_v0.$ === 1) {
		return $author$project$M$Expression$stackIsEmpty(state) ? $author$project$Tools$Loop$Done(state) : $author$project$M$Expression$recoverFromError(state);
	} else {
		var token = _v0.a;
		return $author$project$Tools$Loop$Loop(
			function (st) {
				return _Utils_update(
					st,
					{h1: st.h1 + 1});
			}(
				$author$project$M$Expression$reduceState(
					A2(
						$author$project$M$Expression$pushOrCommit,
						token,
						$author$project$M$Expression$advanceTokenIndex(state)))));
	}
};
var $author$project$M$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				l: $elm$core$List$reverse(state_.l)
			});
	}(
		A2($author$project$Tools$Loop$loop, state, $author$project$M$Expression$nextStep));
};
var $author$project$M$Expression$parseTokenListToState = F2(
	function (lineNumber, tokens) {
		var state = $author$project$M$Expression$run(
			A2($author$project$M$Expression$initWithTokens, lineNumber, tokens));
		return state;
	});
var $author$project$M$Tokenizer$Normal = 0;
var $author$project$M$Tokenizer$init = function (str) {
	return {
		c6: $elm$core$Maybe$Nothing,
		fP: 0,
		dx: 0,
		tt: str,
		kU: $elm$core$String$length(str),
		al: 0,
		bb: _List_Nil
	};
};
var $author$project$Tools$ParserTools$ExpectingPrefix = {$: 0};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.e, s.oV);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{lW: 1, n: s.n, hh: s.hh, e: s.e + 1, ta: s.ta + 1, oV: s.oV}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{lW: s.lW + 1, n: s.n, hh: s.hh, e: newOffset, ta: s.ta, oV: s.oV}));
		};
	});
var $author$project$Tools$ParserTools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									qb: start,
									iV: A3($elm$core$String$slice, start, finish, content),
									rb: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$Tools$ParserTools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$M$Tokenizer$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$CodeToken(
					{qb: start, rb: start, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === '`';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$codeChars = _List_fromArray(
	['`']);
var $author$project$M$Tokenizer$languageChars = _List_fromArray(
	['[', ']', '`', '$', '\\']);
var $author$project$M$Tokenizer$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.iV,
					{qb: start, rb: ((start + data.rb) - data.qb) - 1, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$W,
					data.iV,
					{qb: start, rb: start, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === ' ';
				},
				function (c) {
					return c === ' ';
				}));
	});
var $author$project$M$Tokenizer$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$M$Tokenizer$codeTextParser, start, index),
					A2($author$project$M$Tokenizer$codeParser, start, index),
					A2($author$project$M$Tokenizer$whiteSpaceParser, start, index)
				]));
	});
var $author$project$M$Tokenizer$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$MathToken(
					{qb: start, rb: start, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === '$';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$mathChars = _List_fromArray(
	['$']);
var $author$project$M$Tokenizer$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.iV,
					{qb: start, rb: ((start + data.rb) - data.qb) - 1, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$M$Tokenizer$mathTextParser, start, index),
					A2($author$project$M$Tokenizer$mathParser, start, index),
					A2($author$project$M$Tokenizer$whiteSpaceParser, start, index)
				]));
	});
var $author$project$M$Tokenizer$backSlashedPrefixParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.iV,
					{qb: start, rb: ((start + data.rb) - data.qb) - 1, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === '\\';
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$languageChars));
				}));
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $author$project$M$Tokenizer$leftBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$LB(
					{qb: start, rb: start, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === '[';
				},
				function (_v0) {
					return false;
				}));
	});
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $author$project$M$Tokenizer$leftMathBracketParser_ = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$LMB(
					{qb: start, rb: start + 1, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === '(';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$leftMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (_v1) {
				return A2($author$project$M$Tokenizer$leftMathBracketParser_, start, index);
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === '\\';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$rightBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$RB(
					{qb: start, rb: start, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === ']';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$rightMathBracketParser_ = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$RMB(
					{qb: start, rb: start + 1, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return c === ')';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$rightMathBracketParser = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$backtrackable(
			A2(
				$elm$parser$Parser$Advanced$andThen,
				function (_v1) {
					return A2($author$project$M$Tokenizer$rightMathBracketParser_, start, index);
				},
				A2(
					$author$project$Tools$ParserTools$text,
					function (c) {
						return c === '\\';
					},
					function (_v0) {
						return false;
					})));
	});
var $author$project$M$Tokenizer$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.iV,
					{qb: start, rb: ((start + data.rb) - data.qb) - 1, jz: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$Advanced$backtrackable(
							A2($author$project$M$Tokenizer$leftMathBracketParser, start, index)),
							$elm$parser$Parser$Advanced$backtrackable(
							A2($author$project$M$Tokenizer$rightMathBracketParser, start, index)),
							A2($author$project$M$Tokenizer$backSlashedPrefixParser, start, index)
						])),
					A2($author$project$M$Tokenizer$whiteSpaceParser, start, index),
					A2($author$project$M$Tokenizer$textParser, start, index),
					A2($author$project$M$Tokenizer$leftBracketParser, start, index),
					A2($author$project$M$Tokenizer$rightBracketParser, start, index),
					A2($author$project$M$Tokenizer$mathParser, start, index),
					A2($author$project$M$Tokenizer$codeParser, start, index)
				]));
	});
var $author$project$M$Tokenizer$tokenParser = F3(
	function (mode, start, index) {
		switch (mode) {
			case 0:
				return A2($author$project$M$Tokenizer$tokenParser_, start, index);
			case 1:
				return A2($author$project$M$Tokenizer$mathParser_, start, index);
			default:
				return A2($author$project$M$Tokenizer$codeParser_, start, index);
		}
	});
var $author$project$M$Tokenizer$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$M$Tokenizer$tokenParser, state.fP, start, state.al),
			input);
		if (!_v0.$) {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$M$Tokenizer$TokenError,
				errorList,
				{qb: start, rb: start + 1, jz: state.al});
		}
	});
var $author$project$M$Tokenizer$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$M$Tokenizer$type_(token),
		_List_fromArray(
			[5, 4]));
};
var $author$project$M$Tokenizer$length = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 1:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 2:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 3:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 4:
			var meta = token.b;
			return meta.rb - meta.qb;
		case 6:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 8:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 7:
			var meta = token.b;
			return meta.rb - meta.qb;
		case 5:
			var meta = token.b;
			return meta.rb - meta.qb;
		default:
			var meta = token.b;
			return meta.rb - meta.qb;
	}
};
var $author$project$M$Tokenizer$InCode = 2;
var $author$project$M$Tokenizer$InMath = 1;
var $author$project$M$Tokenizer$newMode = F2(
	function (token, currentMode) {
		switch (currentMode) {
			case 0:
				switch (token.$) {
					case 6:
						return 1;
					case 8:
						return 2;
					default:
						return 0;
				}
			case 1:
				if (token.$ === 6) {
					return 0;
				} else {
					return 1;
				}
			default:
				if (token.$ === 8) {
					return 0;
				} else {
					return 2;
				}
		}
	});
var $author$project$M$Tokenizer$getMeta = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return m;
		case 1:
			var m = token.a;
			return m;
		case 2:
			var m = token.a;
			return m;
		case 3:
			var m = token.a;
			return m;
		case 4:
			var m = token.b;
			return m;
		case 5:
			var m = token.b;
			return m;
		case 6:
			var m = token.a;
			return m;
		case 7:
			var m = token.b;
			return m;
		case 8:
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$M$Tokenizer$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$M$Tokenizer$getMeta(lastToken);
		var currentTokenMeta = $author$project$M$Tokenizer$getMeta(currentToken);
		var meta = {qb: lastTokenMeta.qb, rb: currentTokenMeta.rb, jz: -1};
		return A2(
			$author$project$M$Tokenizer$S,
			_Utils_ap(
				$author$project$M$Tokenizer$stringValue(lastToken),
				$author$project$M$Tokenizer$stringValue(currentToken)),
			meta);
	});
var $author$project$M$Tokenizer$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 1) {
			return $elm$core$Maybe$Just(
				A2($author$project$M$Tokenizer$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$M$Tokenizer$setIndex,
					index,
					A2($author$project$M$Tokenizer$mergeToken, token_, token)));
		}
	});
var $author$project$M$Tokenizer$nextStep = function (state) {
	if (_Utils_cmp(state.dx, state.kU) > -1) {
		var _v0 = state.c6;
		if (!_v0.$) {
			var token = _v0.a;
			return $author$project$Tools$ParserHelpers$Done(
				A2($elm$core$List$cons, token, state.bb));
		} else {
			return $author$project$Tools$ParserHelpers$Done(state.bb);
		}
	} else {
		var token = A3(
			$author$project$M$Tokenizer$get,
			state,
			state.dx,
			A2($elm$core$String$dropLeft, state.dx, state.tt));
		var newScanPointer = (state.dx + $author$project$M$Tokenizer$length(token)) + 1;
		var _v1 = function () {
			if ($author$project$M$Tokenizer$isTextToken(token)) {
				return _Utils_eq(
					A2(
						$elm$core$Maybe$map,
						$author$project$M$Tokenizer$type_,
						$elm$core$List$head(state.bb)),
					$elm$core$Maybe$Just(0)) ? _Utils_Tuple3(
					A2(
						$elm$core$List$cons,
						A2($author$project$M$Tokenizer$setIndex, state.al, token),
						state.bb),
					state.al + 1,
					$elm$core$Maybe$Nothing) : _Utils_Tuple3(
					state.bb,
					state.al,
					A3($author$project$M$Tokenizer$updateCurrentToken, state.al, token, state.c6));
			} else {
				if (!$author$project$M$Tokenizer$type_(token)) {
					var _v2 = state.c6;
					if (_v2.$ === 1) {
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.al, token),
								state.bb),
							state.al + 1,
							$elm$core$Maybe$Nothing);
					} else {
						var textToken = _v2.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.al + 1, token),
								A2(
									$elm$core$List$cons,
									A2($author$project$M$Tokenizer$setIndex, state.al, textToken),
									state.bb)),
							state.al + 2,
							$elm$core$Maybe$Nothing);
					}
				} else {
					var _v3 = state.c6;
					if (_v3.$ === 1) {
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.al, token),
								state.bb),
							state.al + 1,
							$elm$core$Maybe$Nothing);
					} else {
						var textToken = _v3.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.al + 1, token),
								A2($elm$core$List$cons, textToken, state.bb)),
							state.al + 2,
							$elm$core$Maybe$Nothing);
					}
				}
			}
		}();
		var tokens = _v1.a;
		var tokenIndex = _v1.b;
		var currentToken_ = _v1.c;
		var currentToken = $author$project$M$Tokenizer$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Tools$ParserHelpers$Loop(
			_Utils_update(
				state,
				{
					c6: currentToken,
					fP: A2($author$project$M$Tokenizer$newMode, token, state.fP),
					dx: newScanPointer,
					al: tokenIndex,
					bb: tokens
				}));
	}
};
var $author$project$M$Tokenizer$run = function (source) {
	return A2(
		$author$project$Tools$ParserHelpers$loop,
		$author$project$M$Tokenizer$init(source),
		$author$project$M$Tokenizer$nextStep);
};
var $author$project$M$Expression$parseToState = F2(
	function (lineNumber, str) {
		return A2(
			$author$project$M$Expression$parseTokenListToState,
			lineNumber,
			$author$project$M$Tokenizer$run(str));
	});
var $author$project$M$Expression$parse = F2(
	function (lineNumber, str) {
		var state = A2($author$project$M$Expression$parseToState, lineNumber, str);
		return $author$project$M$Expression$fixup(state.l);
	});
var $author$project$MicroLaTeX$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			l: _List_Nil,
			jR: lineNumber,
			jU: _List_Nil,
			ev: $elm$core$List$length(tokens),
			v: _List_Nil,
			h1: 0,
			al: 0,
			bb: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$MicroLaTeX$Helpers$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$MicroLaTeX$Helpers$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$Helpers$Loop = function (a) {
	return {$: 0, a: a};
};
var $rtfeldman$console_print$Console$bgBlue = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[44m', str, '\u001B[49m']));
};
var $author$project$MicroLaTeX$LogTools$forklog_ = F6(
	function (fg, bg, label, width, f, a) {
		return a;
	});
var $rtfeldman$console_print$Console$white = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[37m', str, '\u001B[39m']));
};
var $author$project$MicroLaTeX$LogTools$forklogBlue = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgBlue, label, width, f, a);
	});
var $rtfeldman$console_print$Console$bgCyan = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[46m', str, '\u001B[49m']));
};
var $rtfeldman$console_print$Console$black = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[30m', str, '\u001B[39m']));
};
var $author$project$MicroLaTeX$LogTools$forklogCyan = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgCyan, label, width, f, a);
	});
var $rtfeldman$console_print$Console$bgRed = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[41m', str, '\u001B[49m']));
};
var $author$project$MicroLaTeX$LogTools$forklogRed = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgRed, label, width, f, a);
	});
var $author$project$MicroLaTeX$Expression$makeId = F2(
	function (lineNumber, tokenIndex) {
		return $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(lineNumber) + ('.' + $elm$core$String$fromInt(tokenIndex)));
	});
var $author$project$MicroLaTeX$Expression$boostMeta = F2(
	function (lineNumber, meta) {
		return _Utils_update(
			meta,
			{
				hg: A2($author$project$MicroLaTeX$Expression$makeId, lineNumber, 0)
			});
	});
var $author$project$MicroLaTeX$Expression$exprOfToken = F2(
	function (lineNumber, token) {
		switch (token.$) {
			case 3:
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$Generic$Language$Fun,
						str,
						_List_Nil,
						A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, meta)));
			case 6:
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, meta)));
			case 7:
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, meta)));
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$MicroLaTeX$Expression$commit = F2(
	function (token, state) {
		var _v0 = A2($author$project$MicroLaTeX$Expression$exprOfToken, state.jR, token);
		if (_v0.$ === 1) {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					l: A2($elm$core$List$cons, expr, state.l)
				});
		}
	});
var $author$project$MicroLaTeX$Expression$pushOnStack = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				v: A2($elm$core$List$cons, token, state.v)
			});
	});
var $author$project$MicroLaTeX$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				v: A2($elm$core$List$cons, token, state.v)
			});
	});
var $author$project$MicroLaTeX$Expression$pushOrCommit = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.v) ? A2($author$project$MicroLaTeX$Expression$commit, token, state) : A2($author$project$MicroLaTeX$Expression$push, token, state);
	});
var $author$project$MicroLaTeX$Expression$pushToken = F2(
	function (token, state) {
		switch (token.$) {
			case 6:
				return A2($author$project$MicroLaTeX$Expression$pushOrCommit, token, state);
			case 3:
				return A2($author$project$MicroLaTeX$Expression$commit, token, state);
			case 7:
				return A2($author$project$MicroLaTeX$Expression$pushOrCommit, token, state);
			case 8:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 4:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 5:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 9:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 0:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 1:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 2:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			default:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
		}
	});
var $author$project$MicroLaTeX$Expression$dummyTokenIndex = 0;
var $author$project$MicroLaTeX$Expression$dummyLocWithId = {qb: 0, rb: 0, hg: 'dummy (3)', jz: $author$project$MicroLaTeX$Expression$dummyTokenIndex};
var $author$project$MicroLaTeX$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorMessage2 = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'blue',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorMessageBold = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Generic$Language$Fun,
				'red',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, message, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorSuffix = function (rest) {
	if (!rest.b) {
		return ']?';
	} else {
		if ((rest.a.$ === 7) && (!rest.b.b)) {
			var _v1 = rest.a;
			return ']?';
		} else {
			return '';
		}
	}
};
var $author$project$MicroLaTeX$Helpers$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$MicroLaTeX$Token$RB = function (a) {
	return {$: 2, a: a};
};
var $author$project$MicroLaTeX$Expression$addErrorMessage = F2(
	function (message, state) {
		var committed = A2(
			$elm$core$List$cons,
			$author$project$MicroLaTeX$Expression$errorMessage(message),
			state.l);
		return _Utils_update(
			state,
			{l: committed});
	});
var $author$project$MicroLaTeX$Symbol$value = function (symbol) {
	switch (symbol) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return -1;
		case 3:
			return 0;
		case 4:
			return 0;
		case 5:
			return 1;
		case 6:
			return -1;
		case 7:
			return 0;
		case 8:
			return 0;
		case 9:
			return 0;
		default:
			return 0;
	}
};
var $author$project$MicroLaTeX$Symbol$balance = function (symbols) {
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$MicroLaTeX$Symbol$value, symbols));
};
var $author$project$MicroLaTeX$Expression$boostMeta_ = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.qb;
		var end = _v0.rb;
		var index = _v0.jz;
		return {
			qb: begin,
			rb: end,
			hg: A2($author$project$MicroLaTeX$Expression$makeId, lineNumber, tokenIndex),
			jz: index
		};
	});
var $author$project$MicroLaTeX$Expression$braceErrorAsString = function (k) {
	return (k < 0) ? ('Too many right braces (' + ($elm$core$String$fromInt(-k) + ')')) : ('Too many left braces (' + ($elm$core$String$fromInt(k) + ')'));
};
var $author$project$MicroLaTeX$Expression$bracketError = function (k) {
	if (k < 0) {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, -k, ']'));
		return $author$project$MicroLaTeX$Expression$errorMessage(' ' + ('\\' + (brackets + '?')));
	} else {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, k, '['));
		return $author$project$MicroLaTeX$Expression$errorMessage(' ' + ('\\' + (brackets + '?')));
	}
};
var $author$project$MicroLaTeX$Symbol$B = 0;
var $author$project$MicroLaTeX$Symbol$C = 7;
var $author$project$MicroLaTeX$Symbol$Fn = 8;
var $author$project$MicroLaTeX$Symbol$L = 1;
var $author$project$MicroLaTeX$Symbol$LM = 5;
var $author$project$MicroLaTeX$Symbol$M = 4;
var $author$project$MicroLaTeX$Symbol$R = 2;
var $author$project$MicroLaTeX$Symbol$RM = 6;
var $author$project$MicroLaTeX$Symbol$St = 3;
var $author$project$MicroLaTeX$Symbol$TEs = 10;
var $author$project$MicroLaTeX$Symbol$Ws = 9;
var $author$project$MicroLaTeX$Symbol$toSymbol2 = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 8:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 9:
			return 7;
		case 6:
			return 3;
		case 3:
			return 8;
		case 7:
			return 9;
		default:
			return 10;
	}
};
var $author$project$MicroLaTeX$Symbol$convertTokens2 = function (tokens) {
	return A2($elm$core$List$map, $author$project$MicroLaTeX$Symbol$toSymbol2, tokens);
};
var $author$project$MicroLaTeX$Expression$dummyLoc = {qb: 0, rb: 0, jz: $author$project$MicroLaTeX$Expression$dummyTokenIndex};
var $author$project$MicroLaTeX$Token$TLB = 1;
var $author$project$MicroLaTeX$Match$getSegment = F2(
	function (sym, symbols) {
		var seg_ = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			function (sym_) {
				return !_Utils_eq(sym_, sym);
			},
			A2($elm$core$List$drop, 1, symbols));
		var n = $elm$core$List$length(seg_);
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, n + 1, symbols);
		if (_v0.$ === 1) {
			return A2($elm$core$List$cons, sym, seg_);
		} else {
			var last = _v0.a;
			return A2(
				$elm$core$List$cons,
				sym,
				_Utils_ap(
					seg_,
					_List_fromArray(
						[last])));
		}
	});
var $author$project$MicroLaTeX$Util$middle = function (list) {
	return $author$project$MicroLaTeX$Util$dropLast(
		A2($elm$core$List$drop, 1, list));
};
var $author$project$MicroLaTeX$Match$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.gb);
	if (_v0.$ === 1) {
		return $author$project$Tools$Loop$Done($elm$core$Maybe$Nothing);
	} else {
		var sym = _v0.a;
		var brackets = state.gB + $author$project$MicroLaTeX$Symbol$value(sym);
		return (brackets < 0) ? $author$project$Tools$Loop$Done($elm$core$Maybe$Nothing) : ((!brackets) ? $author$project$Tools$Loop$Done(
			$elm$core$Maybe$Just(state.jz)) : $author$project$Tools$Loop$Loop(
			{
				gB: brackets,
				jz: state.jz + 1,
				gb: A2($elm$core$List$drop, 1, state.gb)
			}));
	}
};
var $author$project$MicroLaTeX$Match$match = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var symbol = _v0.a;
		return A2(
			$elm$core$List$member,
			symbol,
			_List_fromArray(
				[7, 4])) ? $elm$core$Maybe$Just(
			$elm$core$List$length(
				A2($author$project$MicroLaTeX$Match$getSegment, symbol, symbols)) - 1) : (($author$project$MicroLaTeX$Symbol$value(symbol) < 0) ? $elm$core$Maybe$Nothing : A2(
			$author$project$Tools$Loop$loop,
			{
				gB: $author$project$MicroLaTeX$Symbol$value(symbol),
				jz: 1,
				gb: A2($elm$core$List$drop, 1, symbols)
			},
			$author$project$MicroLaTeX$Match$nextStep));
	}
};
var $author$project$MicroLaTeX$Match$splitAt = F2(
	function (k, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, k, list),
			A2($elm$core$List$drop, k, list));
	});
var $author$project$MicroLaTeX$Match$split = function (symbols) {
	var _v0 = $author$project$MicroLaTeX$Match$match(symbols);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$MicroLaTeX$Match$splitAt, k + 1, symbols));
	}
};
var $author$project$MicroLaTeX$Match$hasReducibleArgs = function (symbols) {
	hasReducibleArgs:
	while (true) {
		_v15$7:
		while (true) {
			if (!symbols.b) {
				return true;
			} else {
				switch (symbols.a) {
					case 5:
						if (((symbols.b.b && (symbols.b.a === 3)) && symbols.b.b.b) && (symbols.b.b.a === 6)) {
							var _v16 = symbols.a;
							var _v17 = symbols.b;
							var _v18 = _v17.a;
							var _v19 = _v17.b;
							var _v20 = _v19.a;
							var _v21 = $author$project$MicroLaTeX$Match$split(symbols);
							if (_v21.$ === 1) {
								return false;
							} else {
								var _v22 = _v21.a;
								var a = _v22.a;
								var b = _v22.b;
								return $author$project$MicroLaTeX$Match$hasReducibleArgs(
									$author$project$MicroLaTeX$Util$middle(a)) && $author$project$MicroLaTeX$Match$hasReducibleArgs(b);
							}
						} else {
							break _v15$7;
						}
					case 1:
						var _v23 = symbols.a;
						var _v24 = $author$project$MicroLaTeX$Match$split(symbols);
						if (_v24.$ === 1) {
							return false;
						} else {
							var _v25 = _v24.a;
							var a = _v25.a;
							var b = _v25.b;
							return $author$project$MicroLaTeX$Match$hasReducibleArgs(
								$author$project$MicroLaTeX$Util$middle(a)) && $author$project$MicroLaTeX$Match$hasReducibleArgs(b);
						}
					case 7:
						var _v26 = symbols.a;
						return $author$project$MicroLaTeX$Match$reducibleAux(symbols);
					case 4:
						var _v27 = symbols.a;
						var seg = A2($author$project$MicroLaTeX$Match$getSegment, 4, symbols);
						if ($author$project$MicroLaTeX$Match$reducible(seg)) {
							var $temp$symbols = A2(
								$elm$core$List$drop,
								$elm$core$List$length(seg),
								symbols);
							symbols = $temp$symbols;
							continue hasReducibleArgs;
						} else {
							return false;
						}
					case 0:
						var _v28 = symbols.a;
						var rest = symbols.b;
						var $temp$symbols = rest;
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					case 3:
						var _v29 = symbols.a;
						var rest = symbols.b;
						var $temp$symbols = rest;
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					default:
						break _v15$7;
				}
			}
		}
		return false;
	}
};
var $author$project$MicroLaTeX$Match$reducible = function (symbols) {
	_v2$4:
	while (true) {
		if (symbols.b) {
			switch (symbols.a) {
				case 5:
					if ((((symbols.b.b && (symbols.b.a === 3)) && symbols.b.b.b) && (symbols.b.b.a === 6)) && (!symbols.b.b.b.b)) {
						var _v3 = symbols.a;
						var _v4 = symbols.b;
						var _v5 = _v4.a;
						var _v6 = _v4.b;
						var _v7 = _v6.a;
						return true;
					} else {
						break _v2$4;
					}
				case 4:
					var _v8 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(4));
				case 7:
					var _v9 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just(7));
				case 0:
					if (symbols.b.b && (symbols.b.a === 3)) {
						var _v10 = symbols.a;
						var _v11 = symbols.b;
						var _v12 = _v11.a;
						var rest = _v11.b;
						var _v13 = $elm_community$list_extra$List$Extra$last(rest);
						if ((!_v13.$) && (_v13.a === 2)) {
							var _v14 = _v13.a;
							return $author$project$MicroLaTeX$Match$hasReducibleArgs(rest);
						} else {
							return false;
						}
					} else {
						break _v2$4;
					}
				default:
					break _v2$4;
			}
		} else {
			break _v2$4;
		}
	}
	return false;
};
var $author$project$MicroLaTeX$Match$reducibleAux = function (symbols) {
	var _v0 = $author$project$MicroLaTeX$Match$split(symbols);
	if (_v0.$ === 1) {
		return false;
	} else {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		return $author$project$MicroLaTeX$Match$reducible(a) && $author$project$MicroLaTeX$Match$hasReducibleArgs(b);
	}
};
var $author$project$MicroLaTeX$Expression$isReducible = function (tokens) {
	var symbols = $author$project$MicroLaTeX$Symbol$convertTokens2(
		$elm$core$List$reverse(tokens));
	return _Utils_eq(symbols, _List_Nil) ? false : $author$project$MicroLaTeX$Match$reducible(symbols);
};
var $rtfeldman$console_print$Console$bgYellow = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[43m', str, '\u001B[49m']));
};
var $author$project$MicroLaTeX$LogTools$forklogYellow = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgYellow, label, width, f, a);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $author$project$MicroLaTeX$Token$stringValue = function (token) {
	switch (token.$) {
		case 0:
			return '\\';
		case 3:
			return 'F';
		case 1:
			return '{';
		case 2:
			return '}';
		case 4:
			return '\\(';
		case 5:
			return '\\)';
		case 6:
			var str = token.a;
			return str;
		case 7:
			var str = token.a;
			return str;
		case 8:
			return '$';
		case 9:
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$MicroLaTeX$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$MicroLaTeX$Token$stringValue, tokens));
};
var $author$project$MicroLaTeX$Expression$handleBracketedMath = function (state) {
	var content = $author$project$MicroLaTeX$Token$toString(
		$elm$core$List$reverse(state.v));
	var trailing = A2($elm$core$String$right, 1, content);
	var committed = (trailing === ')') ? A2(
		$elm$core$List$cons,
		A3(
			$author$project$Generic$Language$VFun,
			'math',
			A2(
				$elm$core$String$dropRight,
				2,
				A2($elm$core$String$dropLeft, 2, content)),
			A3(
				$author$project$MicroLaTeX$Expression$boostMeta_,
				state.al,
				2,
				{qb: 0, rb: 0, jz: 0})),
		state.l) : A2(
		$elm$core$List$cons,
		A3(
			$author$project$Generic$Language$Fun,
			'red',
			_List_fromArray(
				[
					A2($author$project$Generic$Language$Text, '$', $author$project$MicroLaTeX$Expression$dummyLocWithId)
				]),
			$author$project$MicroLaTeX$Expression$dummyLocWithId),
		A2(
			$elm$core$List$cons,
			A3(
				$author$project$Generic$Language$VFun,
				'math',
				A3($elm$core$String$replace, '$', '', content),
				{
					qb: 0,
					rb: 0,
					hg: A2($author$project$MicroLaTeX$Expression$makeId, state.jR, state.al),
					jz: 0
				}),
			state.l));
	return _Utils_update(
		state,
		{l: committed, v: _List_Nil});
};
var $author$project$MicroLaTeX$Expression$handleCode = function (state) {
	var content = $author$project$MicroLaTeX$Token$toString(
		$elm$core$List$reverse(state.v));
	var trailing = A2($elm$core$String$right, 1, content);
	var committed = function () {
		if ((trailing === '`') && (content === '`')) {
			var _v0 = function () {
				var _v1 = state.l;
				if (_v1.b) {
					var first = _v1.a;
					var rest = _v1.b;
					return _Utils_Tuple2(first, rest);
				} else {
					return _Utils_Tuple2(
						A3(
							$author$project$Generic$Language$Fun,
							'red',
							_List_fromArray(
								[
									A2(
									$author$project$Generic$Language$Text,
									'????(4)',
									A3($author$project$MicroLaTeX$Expression$boostMeta_, state.jR, state.al, $author$project$MicroLaTeX$Expression$dummyLoc))
								]),
							$author$project$MicroLaTeX$Expression$dummyLocWithId),
						_List_Nil);
				}
			}();
			var first_ = _v0.a;
			var rest_ = _v0.b;
			return A2(
				$elm$core$List$cons,
				first_,
				A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$Fun,
						'red',
						_List_fromArray(
							[
								A2(
								$author$project$Generic$Language$Text,
								'`',
								A3($author$project$MicroLaTeX$Expression$boostMeta_, state.jR, state.al, $author$project$MicroLaTeX$Expression$dummyLoc))
							]),
						$author$project$MicroLaTeX$Expression$dummyLocWithId),
					rest_));
		} else {
			if (trailing === '`') {
				return A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$VFun,
						'code',
						A3($elm$core$String$replace, '`', '', content),
						A3(
							$author$project$MicroLaTeX$Expression$boostMeta_,
							state.jR,
							state.al,
							{qb: 0, rb: 0, jz: 0})),
					state.l);
			} else {
				return A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$Fun,
						'red',
						_List_fromArray(
							[
								A2($author$project$Generic$Language$Text, '`', $author$project$MicroLaTeX$Expression$dummyLocWithId)
							]),
						$author$project$MicroLaTeX$Expression$dummyLocWithId),
					A2(
						$elm$core$List$cons,
						A3(
							$author$project$Generic$Language$VFun,
							'code',
							A3($elm$core$String$replace, '`', '', content),
							A3(
								$author$project$MicroLaTeX$Expression$boostMeta_,
								state.jR,
								state.al,
								{qb: 0, rb: 0, jz: 0})),
						state.l));
			}
		}
	}();
	return _Utils_update(
		state,
		{l: committed, v: _List_Nil});
};
var $author$project$MicroLaTeX$Expression$handleMath = function (state) {
	var _v0 = state.v;
	if ((((((_v0.b && (_v0.a.$ === 8)) && _v0.b.b) && (_v0.b.a.$ === 6)) && _v0.b.b.b) && (_v0.b.b.a.$ === 8)) && (!_v0.b.b.b.b)) {
		var _v1 = _v0.b;
		var _v2 = _v1.a;
		var str = _v2.a;
		var m2 = _v2.b;
		var _v3 = _v1.b;
		return _Utils_update(
			state,
			{
				l: A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$VFun,
						'math',
						str,
						A2($author$project$MicroLaTeX$Expression$boostMeta, state.jR, m2)),
					state.l),
				v: _List_Nil
			});
	} else {
		return state;
	}
};
var $author$project$MicroLaTeX$Token$BS = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroLaTeX$Token$RMathBracket = function (a) {
	return {$: 5, a: a};
};
var $author$project$MicroLaTeX$Expression$errorMessage1Part = function (a) {
	return A3(
		$author$project$Generic$Language$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, a, $author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorMessage3Part = F3(
	function (a, b, c) {
		return _List_fromArray(
			[
				A3(
				$author$project$Generic$Language$Fun,
				'blue',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, a, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId),
				A3(
				$author$project$Generic$Language$Fun,
				'errorHighlight',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, b, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId),
				A3(
				$author$project$Generic$Language$Fun,
				'errorHighlight',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, c, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId)
			]);
	});
var $author$project$MicroLaTeX$Expression$isLBToken = function (maybeTok) {
	if ((!maybeTok.$) && (maybeTok.a.$ === 1)) {
		return true;
	} else {
		return false;
	}
};
var $author$project$MicroLaTeX$Expression$split = function (tokens) {
	var _v0 = $author$project$MicroLaTeX$Match$match(
		$author$project$MicroLaTeX$Symbol$convertTokens2(tokens));
	if (_v0.$ === 1) {
		return _Utils_Tuple2(tokens, _List_Nil);
	} else {
		var k = _v0.a;
		return A2($author$project$MicroLaTeX$Match$splitAt, k + 1, tokens);
	}
};
var $author$project$MicroLaTeX$Expression$reduceRestOfTokens = F3(
	function (macroName, lineNumber, tokens) {
		_v10$5:
		while (true) {
			if (tokens.b) {
				switch (tokens.a.$) {
					case 0:
						return A2($author$project$MicroLaTeX$Expression$reduceTokens, lineNumber, tokens);
					case 6:
						var _v11 = tokens.a;
						var str = _v11.a;
						var m1 = _v11.b;
						var rest = tokens.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$author$project$Generic$Language$Text,
								str,
								A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m1)),
							A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, rest));
					case 1:
						var _v12 = $author$project$MicroLaTeX$Match$match(
							$author$project$MicroLaTeX$Symbol$convertTokens2(tokens));
						if (_v12.$ === 1) {
							return A3(
								$author$project$MicroLaTeX$Expression$errorMessage3Part,
								'\\' + A2($elm$core$Maybe$withDefault, 'x', macroName),
								$author$project$MicroLaTeX$Token$toString(tokens),
								' ?}');
						} else {
							var k = _v12.a;
							var _v13 = A2($author$project$MicroLaTeX$Match$splitAt, k + 1, tokens);
							var a = _v13.a;
							var b = _v13.b;
							var aa = A2(
								$elm$core$List$drop,
								1,
								A2(
									$elm$core$List$take,
									$elm$core$List$length(a) - 1,
									a));
							return _Utils_ap(
								A2($author$project$MicroLaTeX$Expression$reduceTokens, lineNumber, aa),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, b));
						}
					case 8:
						if (((tokens.b.b && (tokens.b.a.$ === 6)) && tokens.b.b.b) && (tokens.b.b.a.$ === 8)) {
							var _v14 = tokens.b;
							var _v15 = _v14.a;
							var str = _v15.a;
							var m2 = _v15.b;
							var _v16 = _v14.b;
							var more = _v16.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$VFun,
									'math',
									str,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
						} else {
							break _v10$5;
						}
					case 4:
						if (((tokens.b.b && (tokens.b.a.$ === 6)) && tokens.b.b.b) && (tokens.b.b.a.$ === 5)) {
							var _v17 = tokens.b;
							var _v18 = _v17.a;
							var str = _v18.a;
							var m2 = _v18.b;
							var _v19 = _v17.b;
							var more = _v19.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$VFun,
									'math',
									str,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
						} else {
							break _v10$5;
						}
					default:
						break _v10$5;
				}
			} else {
				return _List_Nil;
			}
		}
		var token = tokens.a;
		var more = tokens.b;
		var _v20 = A2($author$project$MicroLaTeX$Expression$exprOfToken, lineNumber, token);
		if (!_v20.$) {
			var expr = _v20.a;
			return A2(
				$elm$core$List$cons,
				expr,
				A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
		} else {
			return _List_fromArray(
				[
					$author$project$MicroLaTeX$Expression$errorMessage('•••?(7)')
				]);
		}
	});
var $author$project$MicroLaTeX$Expression$reduceTokens = F2(
	function (lineNumber, tokens) {
		_v0$4:
		while (true) {
			if (tokens.b) {
				switch (tokens.a.$) {
					case 6:
						if (tokens.b.b && (!tokens.b.a.$)) {
							var _v1 = tokens.a;
							var t = _v1.a;
							var m1 = _v1.b;
							var _v2 = tokens.b;
							var m2 = _v2.a.a;
							var rest = _v2.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$author$project$Generic$Language$Text,
									t,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m1)),
								A2(
									$author$project$MicroLaTeX$Expression$reduceTokens,
									lineNumber,
									A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Token$BS(m2),
										rest)));
						} else {
							var _v3 = tokens.a;
							var t = _v3.a;
							var m2 = _v3.b;
							var rest = tokens.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$author$project$Generic$Language$Text,
									t,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, rest));
						}
					case 4:
						if (((tokens.b.b && (tokens.b.a.$ === 6)) && tokens.b.b.b) && (tokens.b.b.a.$ === 5)) {
							var m1 = tokens.a.a;
							var _v4 = tokens.b;
							var _v5 = _v4.a;
							var str = _v5.a;
							var m2 = _v5.b;
							var _v6 = _v4.b;
							var m3 = _v6.a.a;
							var rest = _v6.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$VFun,
									'math',
									str,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A2(
									$author$project$MicroLaTeX$Expression$reduceTokens,
									lineNumber,
									A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Token$RMathBracket(m3),
										rest)));
						} else {
							break _v0$4;
						}
					case 0:
						if (tokens.b.b && (tokens.b.a.$ === 6)) {
							var m1 = tokens.a.a;
							var _v7 = tokens.b;
							var _v8 = _v7.a;
							var name = _v8.a;
							var rest = _v7.b;
							var _v9 = $author$project$MicroLaTeX$Expression$split(rest);
							var a = _v9.a;
							var b = _v9.b;
							return _Utils_eq(b, _List_Nil) ? _List_fromArray(
								[
									A3(
									$author$project$Generic$Language$Fun,
									name,
									A3(
										$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
										$elm$core$Maybe$Just(name),
										lineNumber,
										rest),
									m1)
								]) : ($author$project$MicroLaTeX$Expression$isLBToken(
								$elm$core$List$head(b)) ? _List_fromArray(
								[
									A3(
									$author$project$Generic$Language$Fun,
									name,
									_Utils_ap(
										A3(
											$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											a),
										A3(
											$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											b)),
									m1)
								]) : _Utils_ap(
								_List_fromArray(
									[
										A3(
										$author$project$Generic$Language$Fun,
										name,
										A3(
											$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											a),
										m1)
									]),
								A3(
									$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
									$elm$core$Maybe$Just(name),
									lineNumber,
									b)));
						} else {
							break _v0$4;
						}
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		}
		return _List_fromArray(
			[
				$author$project$MicroLaTeX$Expression$errorMessage1Part('{??}')
			]);
	});
var $author$project$MicroLaTeX$Expression$reduceState_ = function (state) {
	var symbols = A4(
		$author$project$MicroLaTeX$LogTools$forklogYellow,
		'Symbols (reduceState_)',
		12,
		$elm$core$Basics$identity,
		$elm$core$List$reverse(
			$author$project$MicroLaTeX$Symbol$convertTokens2(state.v)));
	var _v0 = $elm$core$List$head(symbols);
	_v0$4:
	while (true) {
		if (!_v0.$) {
			switch (_v0.a) {
				case 0:
					var _v1 = _v0.a;
					var _v2 = A2(
						$author$project$MicroLaTeX$Expression$reduceTokens,
						state.jR,
						$elm$core$List$reverse(state.v));
					if (((((_v2.b && (_v2.a.$ === 1)) && (_v2.a.a === 'ERROR')) && _v2.a.b.b) && (!_v2.a.b.a.$)) && (!_v2.a.b.b.b)) {
						var _v3 = _v2.a;
						var _v4 = _v3.b;
						var _v5 = _v4.a;
						var message = _v5.a;
						var rest = _v2.b;
						return _Utils_update(
							state,
							{
								l: _Utils_ap(rest, state.l),
								jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, message, state.jU),
								v: _List_Nil
							});
					} else {
						var exprs = _v2;
						return _Utils_update(
							state,
							{
								l: _Utils_ap(exprs, state.l),
								v: _List_Nil
							});
					}
				case 4:
					var _v6 = _v0.a;
					return $author$project$MicroLaTeX$Expression$handleMath(state);
				case 5:
					var _v7 = _v0.a;
					return $author$project$MicroLaTeX$Expression$handleBracketedMath(state);
				case 7:
					var _v8 = _v0.a;
					return $author$project$MicroLaTeX$Expression$handleCode(state);
				default:
					break _v0$4;
			}
		} else {
			break _v0$4;
		}
	}
	return state;
};
var $author$project$MicroLaTeX$Token$TBS = 0;
var $author$project$MicroLaTeX$Token$TCode = 9;
var $author$project$MicroLaTeX$Token$TF = 3;
var $author$project$MicroLaTeX$Token$TLMathBrace = 4;
var $author$project$MicroLaTeX$Token$TMath = 8;
var $author$project$MicroLaTeX$Token$TRB = 2;
var $author$project$MicroLaTeX$Token$TRMathBrace = 5;
var $author$project$MicroLaTeX$Token$TS = 6;
var $author$project$MicroLaTeX$Token$TTokenError = 10;
var $author$project$MicroLaTeX$Token$TW = 7;
var $author$project$MicroLaTeX$Token$type_ = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 3:
			return 3;
		case 1:
			return 1;
		case 2:
			return 2;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 6;
		case 7:
			return 7;
		case 8:
			return 8;
		case 9:
			return 9;
		default:
			return 10;
	}
};
var $author$project$MicroLaTeX$Expression$reduceState = function (state) {
	var peek = A2($elm_community$list_extra$List$Extra$getAt, state.al, state.bb);
	return ($author$project$MicroLaTeX$Expression$isReducible(state.v) && (!_Utils_eq(
		A2($elm$core$Maybe$map, $author$project$MicroLaTeX$Token$type_, peek),
		$elm$core$Maybe$Just(1)))) ? $author$project$MicroLaTeX$Expression$reduceState_(state) : A4(
		$author$project$MicroLaTeX$LogTools$forklogRed,
		'Not reducible',
		12,
		function (state_) {
			return $elm$core$List$reverse(
				$author$project$MicroLaTeX$Symbol$convertTokens2(state_.v));
		},
		state);
};
var $author$project$MicroLaTeX$Expression$recoverFromError2 = function (state) {
	var k = $author$project$MicroLaTeX$Symbol$balance(
		$author$project$MicroLaTeX$Symbol$convertTokens2(
			$elm$core$List$reverse(state.v)));
	var newStack = _Utils_ap(
		A2(
			$elm$core$List$repeat,
			k,
			$author$project$MicroLaTeX$Token$RB(
				A3($author$project$MicroLaTeX$Expression$boostMeta_, state.jR, state.al, $author$project$MicroLaTeX$Expression$dummyLoc))),
		state.v);
	var newSymbols = $author$project$MicroLaTeX$Symbol$convertTokens2(
		$elm$core$List$reverse(newStack));
	var reducible = $author$project$MicroLaTeX$Match$reducible(newSymbols);
	return reducible ? $author$project$MicroLaTeX$Helpers$Done(
		A2(
			$author$project$MicroLaTeX$Expression$addErrorMessage,
			' ]? ',
			$author$project$MicroLaTeX$Expression$reduceState(
				_Utils_update(
					state,
					{
						l: A2(
							$elm$core$List$cons,
							$author$project$MicroLaTeX$Expression$errorMessage('{'),
							state.l),
						ev: $elm$core$List$length(newStack),
						v: newStack,
						al: 0
					})))) : $author$project$MicroLaTeX$Helpers$Done(
		_Utils_update(
			state,
			{
				l: A2(
					$elm$core$List$cons,
					$author$project$MicroLaTeX$Expression$bracketError(k),
					state.l),
				jU: A3(
					$author$project$MicroLaTeX$Helpers$prependMessage,
					state.jR,
					$author$project$MicroLaTeX$Expression$braceErrorAsString(k),
					state.jU)
			}));
};
var $author$project$MicroLaTeX$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.v);
	_v0$12:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 0:
					if (_v0.b.b && (_v0.b.a.$ === 6)) {
						if (!_v0.b.b.b) {
							var _v1 = _v0.b;
							var _v2 = _v1.a;
							var fname = _v2.a;
							var m = _v2.b;
							return $author$project$MicroLaTeX$Helpers$Done(
								_Utils_update(
									state,
									{
										l: A2(
											$elm$core$List$cons,
											A3($author$project$Generic$Language$Fun, fname, _List_Nil, m),
											state.l),
										v: _List_Nil
									}));
						} else {
							if (_v0.b.b.a.$ === 1) {
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var fname = _v4.a;
								var _v5 = _v3.b;
								var m3 = _v5.a.a;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage('\\' + (fname + '{')),
												state.l),
											jU: A3(
												$author$project$MicroLaTeX$Helpers$prependMessage,
												state.jR,
												'Missing right brace, column ' + $elm$core$String$fromInt(m3.qb),
												state.jU),
											v: _List_Nil,
											al: m3.jz + 1
										}));
							} else {
								break _v0$12;
							}
						}
					} else {
						break _v0$12;
					}
				case 1:
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 2:
								var _v6 = _v0.b;
								var meta = _v6.a.a;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage('{?}'),
												state.l),
											jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'Brackets need to enclose something', state.jU),
											v: _List_Nil,
											al: meta.jz + 1
										}));
							case 1:
								var _v7 = _v0.b;
								var meta = _v7.a.a;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage('{'),
												state.l),
											jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'You have consecutive left brackets', state.jU),
											v: _List_Nil,
											al: meta.jz
										}));
							case 6:
								var _v8 = _v0.b;
								var _v9 = _v8.a;
								var fName = _v9.a;
								var meta = _v9.b;
								var rest = _v8.b;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage(
													$author$project$MicroLaTeX$Expression$errorSuffix(rest)),
												A2(
													$elm$core$List$cons,
													$author$project$MicroLaTeX$Expression$errorMessage2('{' + fName),
													state.l)),
											jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'Missing right bracket', state.jU),
											v: _List_Nil,
											al: meta.jz + 1
										}));
							case 7:
								if (_v0.b.a.a === ' ') {
									var _v10 = _v0.b;
									var _v11 = _v10.a;
									var meta = _v11.b;
									return $author$project$MicroLaTeX$Helpers$Loop(
										_Utils_update(
											state,
											{
												l: A2(
													$elm$core$List$cons,
													$author$project$MicroLaTeX$Expression$errorMessage('{ - can\'t have space after the brace '),
													state.l),
												jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'Can\'t have space after left bracket - try [something ...', state.jU),
												v: _List_Nil,
												al: meta.jz + 1
											}));
								} else {
									break _v0$12;
								}
							default:
								break _v0$12;
						}
					} else {
						return $author$project$MicroLaTeX$Helpers$Done(
							_Utils_update(
								state,
								{
									l: A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Expression$errorMessage('..extra{?'),
										state.l),
									jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'That left bracket needs something after it', state.jU),
									ev: 0,
									v: _List_Nil,
									al: 0
								}));
					}
				case 2:
					var meta = _v0.a.a;
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Expression$errorMessage(' extra }?'),
									state.l),
								jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'Extra right braces(s)', state.jU),
								v: _List_Nil,
								al: meta.jz + 1
							}));
				case 8:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$MicroLaTeX$Token$toString(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Expression$errorMessage(message),
									state.l),
								jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'opening dollar sign needs to be matched with a closing one', state.jU),
								ev: 0,
								v: _List_Nil,
								al: meta.jz + 1
							}));
				case 4:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var reversedStack = $elm$core$List$reverse(state.v);
					var toCommitted = function () {
						if (((reversedStack.b && (reversedStack.a.$ === 4)) && reversedStack.b.b) && (reversedStack.b.a.$ === 6)) {
							var _v13 = reversedStack.b;
							var _v14 = _v13.a;
							var c = _v14.a;
							var m = _v14.b;
							var rest_ = _v13.b;
							return A2(
								$elm$core$List$cons,
								A2($author$project$Generic$Language$Text, c, m),
								A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, 'insert \\(', m)
											]),
										m),
									state.l));
						} else {
							return state.l;
						}
					}();
					var newTokenIndex = meta.jz + 2;
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								l: toCommitted,
								jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'left bracket needs to be matched with a right bracket', state.jU),
								ev: 0,
								v: _List_Nil,
								al: newTokenIndex
							}));
				case 5:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var reversedStack = $elm$core$List$reverse(state.v);
					var toCommitted = function () {
						if (reversedStack.b && (reversedStack.a.$ === 5)) {
							var m = reversedStack.a.a;
							var rest_ = reversedStack.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$Fun,
									'red',
									_List_fromArray(
										[
											A2($author$project$Generic$Language$Text, 'extra \\)', m)
										]),
									m),
								state.l);
						} else {
							return state.l;
						}
					}();
					var newTokenIndex = meta.jz + 1;
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								l: toCommitted,
								jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'left bracket needs to be matched with a right bracket', state.jU),
								ev: 0,
								v: _List_Nil,
								al: newTokenIndex
							}));
				case 9:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$MicroLaTeX$Token$toString(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Expression$errorMessageBold(message),
									state.l),
								jU: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.jR, 'opening backtick needs to be matched with a closing one', state.jU),
								ev: 0,
								v: _List_Nil,
								al: meta.jz + 1
							}));
				default:
					break _v0$12;
			}
		} else {
			break _v0$12;
		}
	}
	return $author$project$MicroLaTeX$Expression$recoverFromError2(state);
};
var $author$project$Generic$Language$simplifyExpr = function (expr) {
	switch (expr.$) {
		case 1:
			var name = expr.a;
			var args = expr.b;
			return A3(
				$author$project$Generic$Language$Fun,
				name,
				A2($elm$core$List$map, $author$project$Generic$Language$simplifyExpr, args),
				0);
		case 2:
			var name = expr.a;
			var arg = expr.b;
			return A3($author$project$Generic$Language$VFun, name, arg, 0);
		case 0:
			var text = expr.a;
			return A2($author$project$Generic$Language$Text, text, 0);
		default:
			var eList = expr.a;
			return A2($author$project$Generic$Language$Text, 'text', 0);
	}
};
var $author$project$MicroLaTeX$Token$stringValue2 = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return 'BS:' + $elm$core$String$fromInt(m.jz);
		case 3:
			var m = token.b;
			return 'F:' + $elm$core$String$fromInt(m.jz);
		case 1:
			var m = token.a;
			return 'LB:' + $elm$core$String$fromInt(m.jz);
		case 2:
			var m = token.a;
			return 'RB:' + $elm$core$String$fromInt(m.jz);
		case 4:
			var m = token.a;
			return 'LTB:' + $elm$core$String$fromInt(m.jz);
		case 5:
			var m = token.a;
			return 'RTB:' + $elm$core$String$fromInt(m.jz);
		case 6:
			var str = token.a;
			var m = token.b;
			return 'S ' + (str + (': ' + $elm$core$String$fromInt(m.jz)));
		case 7:
			var m = token.b;
			return 'W:' + $elm$core$String$fromInt(m.jz);
		case 8:
			var m = token.a;
			return '$:' + $elm$core$String$fromInt(m.jz);
		case 9:
			var m = token.a;
			return 'C:' + $elm$core$String$fromInt(m.jz);
		default:
			var m = token.b;
			return 'tokenError:' + $elm$core$String$fromInt(m.jz);
	}
};
var $author$project$MicroLaTeX$Token$toString2 = function (tokens) {
	return A2(
		$elm$core$String$join,
		'; ',
		A2($elm$core$List$map, $author$project$MicroLaTeX$Token$stringValue2, tokens));
};
var $author$project$MicroLaTeX$Expression$show = function (state) {
	return _Utils_Tuple2(
		$author$project$MicroLaTeX$Token$toString2(
			$elm$core$List$reverse(state.v)),
		A2($elm$core$List$map, $author$project$Generic$Language$simplifyExpr, state.l));
};
var $author$project$MicroLaTeX$Expression$nextStep = function (state) {
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.al, state.bb);
	if (_v0.$ === 1) {
		return $elm$core$List$isEmpty(state.v) ? $author$project$MicroLaTeX$Helpers$Done(
			A4($author$project$MicroLaTeX$LogTools$forklogBlue, 'Done', 12, $author$project$MicroLaTeX$Expression$show, state)) : $author$project$MicroLaTeX$Expression$recoverFromError(
			A4($author$project$MicroLaTeX$LogTools$forklogRed, 'Recover', 12, $author$project$MicroLaTeX$Expression$show, state));
	} else {
		var token = _v0.a;
		return $author$project$MicroLaTeX$Helpers$Loop(
			A4(
				$author$project$MicroLaTeX$LogTools$forklogCyan,
				'Push-Reduce',
				12,
				$author$project$MicroLaTeX$Expression$show,
				function (st) {
					return _Utils_update(
						st,
						{h1: st.h1 + 1});
				}(
					$author$project$MicroLaTeX$Expression$reduceState(
						A2(
							$author$project$MicroLaTeX$Expression$pushToken,
							token,
							_Utils_update(
								state,
								{al: state.al + 1}))))));
	}
};
var $author$project$MicroLaTeX$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				l: $elm$core$List$reverse(state_.l)
			});
	}(
		A2($author$project$MicroLaTeX$Helpers$loop, state, $author$project$MicroLaTeX$Expression$nextStep));
};
var $author$project$MicroLaTeX$Token$Normal = {$: 0};
var $author$project$MicroLaTeX$Token$init = function (str) {
	return {
		c6: $elm$core$Maybe$Nothing,
		fP: $author$project$MicroLaTeX$Token$Normal,
		dx: 0,
		tt: str,
		kU: $elm$core$String$length(str),
		al: 0,
		bb: _List_Nil
	};
};
var $author$project$MicroLaTeX$Token$finish = function (state) {
	var _v0 = state.c6;
	if (!_v0.$) {
		var token = _v0.a;
		return $author$project$MicroLaTeX$Helpers$Done(
			A2($elm$core$List$cons, token, state.bb));
	} else {
		return $author$project$MicroLaTeX$Helpers$Done(state.bb);
	}
};
var $author$project$MicroLaTeX$Token$TokenError = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$MicroLaTeX$Token$CodeToken = function (a) {
	return {$: 9, a: a};
};
var $author$project$MicroLaTeX$Tools$ExpectingPrefix = {$: 0};
var $author$project$MicroLaTeX$Tools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									qb: start,
									iV: A3($elm$core$String$slice, start, finish, content),
									rb: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$MicroLaTeX$Tools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$MicroLaTeX$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$CodeToken(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return c === '`';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$S = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$codeChars = _List_fromArray(
	['`']);
var $author$project$MicroLaTeX$Token$languageChars = _List_fromArray(
	['\\', '{', '}', '`', '$']);
var $author$project$MicroLaTeX$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$S,
					data.iV,
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Token$W = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$W,
					data.iV,
					{
						qb: start,
						rb: start,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return c === ' ';
				},
				function (c) {
					return c === ' ';
				}));
	});
var $author$project$MicroLaTeX$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$codeTextParser, start, index),
					A2($author$project$MicroLaTeX$Token$codeParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$LMathBracket = function (a) {
	return {$: 4, a: a};
};
var $author$project$MicroLaTeX$Tools$ExpectingSymbol = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$Tools$symbol = function (symb) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (start, finish) {
						return {qb: start, iV: symb, rb: finish};
					})),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getOffset,
				$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						symb,
						$author$project$MicroLaTeX$Tools$ExpectingSymbol(symb))))),
		$elm$parser$Parser$Advanced$getOffset);
};
var $author$project$MicroLaTeX$Token$leftMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$MicroLaTeX$Token$LMathBracket(
					{
						qb: start,
						rb: start + 1,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			$author$project$MicroLaTeX$Tools$symbol('\\('));
	});
var $author$project$MicroLaTeX$Token$mathChars = _List_fromArray(
	['$']);
var $author$project$MicroLaTeX$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$S,
					data.iV,
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Token$rightMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$MicroLaTeX$Token$RMathBracket(
					{
						qb: start,
						rb: start + 1,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			$author$project$MicroLaTeX$Tools$symbol('\\)'));
	});
var $author$project$MicroLaTeX$Token$mathParser2_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$mathTextParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$MathToken = function (a) {
	return {$: 8, a: a};
};
var $author$project$MicroLaTeX$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$MathToken(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return c === '$';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$mathTextParser, start, index),
					A2($author$project$MicroLaTeX$Token$mathParser, start, index),
					A2($author$project$MicroLaTeX$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$backslashParser1 = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$BS(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return c === '\\';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$F = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$first = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (x) {
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return x;
					},
					q);
			},
			p);
	});
var $author$project$MicroLaTeX$Token$backslashParser2 = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$F,
					A2($elm$core$String$dropLeft, 1, data.iV),
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Token$first,
				A2(
					$author$project$MicroLaTeX$Tools$text,
					function (c) {
						return c === '\\';
					},
					function (c) {
						return (c !== ' ') && (c !== '{');
					}),
				$author$project$MicroLaTeX$Tools$symbol(' ')));
	});
var $author$project$MicroLaTeX$Token$backslashParser = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2($author$project$MicroLaTeX$Token$backslashParser2, start, index)),
					A2($author$project$MicroLaTeX$Token$backslashParser1, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$LB = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$Token$leftBraceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$LB(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return c === '{';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$rightBraceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$RB(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return c === '}';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$S,
					data.iV,
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$MicroLaTeX$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$textParser, start, index),
					A2($author$project$MicroLaTeX$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$backslashParser, start, index),
					A2($author$project$MicroLaTeX$Token$leftBraceParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightBraceParser, start, index),
					A2($author$project$MicroLaTeX$Token$mathParser, start, index),
					A2($author$project$MicroLaTeX$Token$codeParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode.$) {
			case 0:
				return A2($author$project$MicroLaTeX$Token$tokenParser_, start, index);
			case 1:
				if (!mode.a) {
					var _v1 = mode.a;
					return A2($author$project$MicroLaTeX$Token$mathParser_, start, index);
				} else {
					var _v2 = mode.a;
					return A2($author$project$MicroLaTeX$Token$mathParser2_, start, index);
				}
			default:
				return A2($author$project$MicroLaTeX$Token$codeParser_, start, index);
		}
	});
var $author$project$MicroLaTeX$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$MicroLaTeX$Token$tokenParser, state.fP, start, state.al),
			input);
		if (!_v0.$) {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$MicroLaTeX$Token$TokenError,
				errorList,
				{
					qb: start,
					rb: start + 1,
					hg: A2($author$project$MicroLaTeX$Token$makeId, start, state.al),
					jz: state.al
				});
		}
	});
var $author$project$MicroLaTeX$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 0:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$BS(
					_Utils_update(
						meta,
						{jz: k}));
			case 3:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$F,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 1:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$LB(
					_Utils_update(
						meta,
						{jz: k}));
			case 2:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$RB(
					_Utils_update(
						meta,
						{jz: k}));
			case 4:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$LMathBracket(
					_Utils_update(
						meta,
						{jz: k}));
			case 5:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$RMathBracket(
					_Utils_update(
						meta,
						{jz: k}));
			case 6:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$S,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 7:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$W,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 8:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$MathToken(
					_Utils_update(
						meta,
						{jz: k}));
			case 9:
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$CodeToken(
					_Utils_update(
						meta,
						{jz: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{jz: k}));
		}
	});
var $author$project$MicroLaTeX$Token$handleBS = F2(
	function (state, token) {
		var _v0 = state.c6;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.al, token),
					state.bb),
				state.al + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.al + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$MicroLaTeX$Token$setIndex, state.al, textToken),
						state.bb)),
				state.al + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Token$handleDefault = F2(
	function (state, token) {
		var _v0 = state.c6;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.al, token),
					state.bb),
				state.al + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.al + 1, token),
					A2($elm$core$List$cons, textToken, state.bb)),
				state.al + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Token$handleLB = F2(
	function (state, token) {
		var _v0 = state.c6;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.al, token),
					state.bb),
				state.al + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.al + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$MicroLaTeX$Token$setIndex, state.al, textToken),
						state.bb)),
				state.al + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Token$boostExprMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.qb;
		var end = _v0.rb;
		var index = _v0.jz;
		return {
			qb: begin,
			rb: end,
			hg: A2($author$project$MicroLaTeX$Token$makeId, lineNumber, tokenIndex),
			jz: index
		};
	});
var $author$project$MicroLaTeX$Token$getExprMeta = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return m;
		case 3:
			var m = token.b;
			return m;
		case 1:
			var m = token.a;
			return m;
		case 2:
			var m = token.a;
			return m;
		case 4:
			var m = token.a;
			return m;
		case 5:
			var m = token.a;
			return m;
		case 6:
			var m = token.b;
			return m;
		case 7:
			var m = token.b;
			return m;
		case 8:
			var m = token.a;
			return m;
		case 9:
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$MicroLaTeX$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenExprMeta = $author$project$MicroLaTeX$Token$getExprMeta(lastToken);
		var currentTokenExprMeta = $author$project$MicroLaTeX$Token$getExprMeta(currentToken);
		var meta = {qb: lastTokenExprMeta.qb, rb: currentTokenExprMeta.rb, jz: -1};
		return A2(
			$author$project$MicroLaTeX$Token$S,
			_Utils_ap(
				$author$project$MicroLaTeX$Token$stringValue(lastToken),
				$author$project$MicroLaTeX$Token$stringValue(currentToken)),
			A3($author$project$MicroLaTeX$Token$boostExprMeta, meta.qb, meta.rb, meta));
	});
var $author$project$MicroLaTeX$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 1) {
			return $elm$core$Maybe$Just(
				A2($author$project$MicroLaTeX$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$MicroLaTeX$Token$setIndex,
					index,
					A2($author$project$MicroLaTeX$Token$mergeToken, token_, token)));
		}
	});
var $author$project$MicroLaTeX$Token$handleMerge = F2(
	function (state, token) {
		return _Utils_Tuple3(
			state.bb,
			state.al,
			A3($author$project$MicroLaTeX$Token$updateCurrentToken, state.al, token, state.c6));
	});
var $author$project$MicroLaTeX$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$MicroLaTeX$Token$type_(token),
		_List_fromArray(
			[7, 6]));
};
var $author$project$MicroLaTeX$Token$length = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 3:
			var meta = token.b;
			return meta.rb - meta.qb;
		case 1:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 2:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 4:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 5:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 6:
			var meta = token.b;
			return meta.rb - meta.qb;
		case 8:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 9:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 7:
			var meta = token.b;
			return meta.rb - meta.qb;
		default:
			var meta = token.b;
			return meta.rb - meta.qb;
	}
};
var $author$project$MicroLaTeX$Token$ILBracket = 1;
var $author$project$MicroLaTeX$Token$ILDollar = 0;
var $author$project$MicroLaTeX$Token$InCode = {$: 2};
var $author$project$MicroLaTeX$Token$InMath = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroLaTeX$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode.$) {
			case 0:
				switch (token.$) {
					case 8:
						return $author$project$MicroLaTeX$Token$InMath(0);
					case 4:
						return $author$project$MicroLaTeX$Token$InMath(1);
					case 9:
						return $author$project$MicroLaTeX$Token$InCode;
					default:
						return $author$project$MicroLaTeX$Token$Normal;
				}
			case 1:
				if (!currentMode.a) {
					var _v2 = currentMode.a;
					switch (token.$) {
						case 8:
							return $author$project$MicroLaTeX$Token$Normal;
						case 5:
							return $author$project$MicroLaTeX$Token$InMath(0);
						default:
							return $author$project$MicroLaTeX$Token$InMath(0);
					}
				} else {
					var _v4 = currentMode.a;
					switch (token.$) {
						case 8:
							return $author$project$MicroLaTeX$Token$InMath(1);
						case 5:
							return $author$project$MicroLaTeX$Token$Normal;
						default:
							return $author$project$MicroLaTeX$Token$InMath(1);
					}
				}
			default:
				if (token.$ === 9) {
					return $author$project$MicroLaTeX$Token$Normal;
				} else {
					return $author$project$MicroLaTeX$Token$InCode;
				}
		}
	});
var $author$project$MicroLaTeX$Token$nextStep = function (state) {
	if (_Utils_cmp(state.dx, state.kU) > -1) {
		return $author$project$MicroLaTeX$Token$finish(state);
	} else {
		var token = A3(
			$author$project$MicroLaTeX$Token$get,
			state,
			state.dx,
			A2($elm$core$String$dropLeft, state.dx, state.tt));
		var newScanPointer = (state.dx + $author$project$MicroLaTeX$Token$length(token)) + 1;
		var _v0 = $author$project$MicroLaTeX$Token$isTextToken(token) ? A2($author$project$MicroLaTeX$Token$handleMerge, state, token) : ((!$author$project$MicroLaTeX$Token$type_(token)) ? A2($author$project$MicroLaTeX$Token$handleBS, state, token) : (($author$project$MicroLaTeX$Token$type_(token) === 1) ? A2($author$project$MicroLaTeX$Token$handleLB, state, token) : A2($author$project$MicroLaTeX$Token$handleDefault, state, token)));
		var tokens = _v0.a;
		var tokenIndex = _v0.b;
		var currentToken_ = _v0.c;
		var currentToken = $author$project$MicroLaTeX$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$MicroLaTeX$Helpers$Loop(
			_Utils_update(
				state,
				{
					c6: currentToken,
					fP: A2($author$project$MicroLaTeX$Token$newMode, token, state.fP),
					dx: newScanPointer,
					al: tokenIndex,
					bb: tokens
				}));
	}
};
var $author$project$MicroLaTeX$Token$run = function (source) {
	return A2(
		$author$project$MicroLaTeX$Helpers$loop,
		$author$project$MicroLaTeX$Token$init(source),
		$author$project$MicroLaTeX$Token$nextStep);
};
var $author$project$MicroLaTeX$Expression$parse = F2(
	function (lineNumber, str) {
		return $author$project$MicroLaTeX$Expression$run(
			A2(
				$author$project$MicroLaTeX$Expression$initWithTokens,
				lineNumber,
				$author$project$MicroLaTeX$Token$run(str))).l;
	});
var $author$project$XMarkdown$Expression$forkLogWidth = 12;
var $author$project$XMarkdown$ForkLog$forklog_ = F6(
	function (fg, bg, label, width, f, a) {
		return a;
	});
var $author$project$XMarkdown$ForkLog$forklogCyan = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgCyan, label, width, f, a);
	});
var $author$project$XMarkdown$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			l: _List_Nil,
			jR: lineNumber,
			jU: _List_Nil,
			ev: $elm$core$List$length(tokens),
			v: _List_Nil,
			h1: 0,
			al: 0,
			bb: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$XMarkdown$Symbol$LBracket = 0;
var $author$project$XMarkdown$Symbol$LParen = 2;
var $author$project$XMarkdown$Symbol$RBracket = 1;
var $author$project$XMarkdown$Symbol$RParen = 3;
var $author$project$XMarkdown$Symbol$SBold = 4;
var $author$project$XMarkdown$Symbol$SItalic = 5;
var $author$project$XMarkdown$Expression$advanceTokenIndex = function (state) {
	return _Utils_update(
		state,
		{al: state.al + 1});
};
var $author$project$XMarkdown$Symbol$C = 10;
var $author$project$XMarkdown$Symbol$M = 9;
var $author$project$XMarkdown$Symbol$SAT = 7;
var $author$project$XMarkdown$Symbol$SImage = 6;
var $author$project$XMarkdown$Symbol$toSymbol = function (token) {
	switch (token.$) {
		case 0:
			return $elm$core$Maybe$Just(0);
		case 1:
			return $elm$core$Maybe$Just(1);
		case 2:
			return $elm$core$Maybe$Just(2);
		case 6:
			return $elm$core$Maybe$Just(4);
		case 7:
			return $elm$core$Maybe$Just(5);
		case 4:
			return $elm$core$Maybe$Just(6);
		case 5:
			return $elm$core$Maybe$Just(7);
		case 3:
			return $elm$core$Maybe$Just(3);
		case 10:
			return $elm$core$Maybe$Just(9);
		case 11:
			return $elm$core$Maybe$Just(10);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$maybe_extra$Maybe$Extra$cons = F2(
	function (item, list) {
		if (!item.$) {
			var v = item.a;
			return A2($elm$core$List$cons, v, list);
		} else {
			return list;
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$values = A2($elm$core$List$foldr, $elm_community$maybe_extra$Maybe$Extra$cons, _List_Nil);
var $author$project$XMarkdown$Symbol$convertTokens = function (tokens) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$XMarkdown$Symbol$toSymbol, tokens));
};
var $author$project$XMarkdown$ForkLog$forklogBlue = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgBlue, label, width, f, a);
	});
var $author$project$XMarkdown$ForkLog$forklogRed = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgRed, label, width, f, a);
	});
var $author$project$M$Expression$parseWithMessages = F2(
	function (lineNumber, str) {
		var state = A2($author$project$M$Expression$parseToState, lineNumber, str);
		return _Utils_Tuple2(state.l, state.jU);
	});
var $author$project$XMarkdown$Token$stringValue = function (token) {
	switch (token.$) {
		case 0:
			return '[';
		case 1:
			return ']';
		case 2:
			return '(';
		case 3:
			return ')';
		case 6:
			return '**';
		case 7:
			return '*';
		case 4:
			return 'image';
		case 5:
			return '@';
		case 8:
			var str = token.a;
			return str;
		case 9:
			var str = token.a;
			return str;
		case 10:
			return '$';
		case 11:
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$XMarkdown$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$XMarkdown$Token$stringValue, tokens));
};
var $author$project$XMarkdown$Expression$handleAt = function (state) {
	var content = A4(
		$author$project$XMarkdown$ForkLog$forklogRed,
		'STACK (AT)',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A2(
			$elm$core$String$dropLeft,
			1,
			$author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.v))));
	var expr = A2($author$project$M$Expression$parseWithMessages, 0, content).a;
	return _Utils_update(
		state,
		{
			l: _Utils_ap(expr, state.l),
			v: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$makeId = F2(
	function (lineNumber, tokenIndex) {
		return $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(lineNumber) + ('.' + $elm$core$String$fromInt(tokenIndex)));
	});
var $author$project$XMarkdown$Expression$handleBracketedText = function (state) {
	var str = function () {
		var _v0 = state.v;
		if ((((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 2)) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var str_ = _v2.a;
			var _v3 = _v1.b;
			return '[' + (str_ + ']');
		} else {
			return $author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.v));
		}
	}();
	var meta = {
		qb: 0,
		rb: 0,
		hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
		jz: 0
	};
	var expr = A2($author$project$Generic$Language$Text, str, meta);
	return _Utils_update(
		state,
		{
			l: A2($elm$core$List$cons, expr, state.l),
			v: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$takeMiddleReversed = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		$elm$core$List$reverse(
			A2($elm$core$List$drop, 1, list)));
};
var $author$project$XMarkdown$Token$stringValue2 = function (token) {
	switch (token.$) {
		case 0:
			return 'LB';
		case 1:
			return 'RB';
		case 2:
			return 'LP';
		case 3:
			return 'RP';
		case 6:
			return 'BOLD';
		case 7:
			return 'ITALIC';
		case 4:
			return 'IMAGE';
		case 5:
			return '@';
		case 8:
			var str = token.a;
			return str;
		case 9:
			var str = token.a;
			return str;
		case 10:
			return 'M';
		case 11:
			return 'C';
		default:
			return 'tokenError';
	}
};
var $author$project$XMarkdown$Token$toString2 = function (tokens) {
	return A2(
		$elm$core$String$join,
		', ',
		A2($elm$core$List$map, $author$project$XMarkdown$Token$stringValue2, tokens));
};
var $author$project$XMarkdown$Expression$handleCodeSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[10, 10]))) {
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddleReversed(state.v));
			var expr = A3(
				$author$project$Generic$Language$VFun,
				'code',
				content,
				{
					qb: 0,
					rb: 0,
					hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
					jz: 0
				});
			return _Utils_update(
				state,
				{
					l: A2($elm$core$List$cons, expr, state.l),
					v: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleImage = function (state) {
	var meta = {
		qb: 0,
		rb: 0,
		hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
		jz: 0
	};
	var data = function () {
		var _v0 = state.v;
		if ((((((((((((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 2)) && _v0.b.b.b.b) && (_v0.b.b.b.a.$ === 1)) && _v0.b.b.b.b.b) && (_v0.b.b.b.b.a.$ === 8)) && _v0.b.b.b.b.b.b) && (!_v0.b.b.b.b.b.a.$)) && _v0.b.b.b.b.b.b.b) && (_v0.b.b.b.b.b.b.a.$ === 4)) && (!_v0.b.b.b.b.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var url = _v2.a;
			var _v3 = _v1.b;
			var _v4 = _v3.b;
			var _v5 = _v4.b;
			var _v6 = _v5.a;
			var label = _v6.a;
			var _v7 = _v5.b;
			var _v8 = _v7.b;
			return {fI: label, uz: url};
		} else {
			return {fI: 'no image label', uz: 'no image url'};
		}
	}();
	var expr = A4(
		$author$project$XMarkdown$ForkLog$forklogRed,
		'EXPR',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A3(
			$author$project$Generic$Language$Fun,
			'image',
			_List_fromArray(
				[
					A2($author$project$Generic$Language$Text, data.uz + (' ' + data.fI), meta)
				]),
			meta));
	return _Utils_update(
		state,
		{
			l: A2($elm$core$List$cons, expr, state.l),
			v: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleLink = function (state) {
	var meta = {
		qb: 0,
		rb: 0,
		hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
		jz: 0
	};
	var expr = function () {
		var _v0 = state.v;
		_v0$3:
		while (true) {
			if (((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
				if (_v0.b.b.b.b.b.b) {
					if ((((((_v0.b.a.$ === 8) && (_v0.b.b.a.$ === 2)) && (_v0.b.b.b.a.$ === 1)) && (_v0.b.b.b.b.a.$ === 8)) && (!_v0.b.b.b.b.b.a.$)) && (!_v0.b.b.b.b.b.b.b)) {
						var _v1 = _v0.b;
						var _v2 = _v1.a;
						var url = _v2.a;
						var _v3 = _v1.b;
						var _v4 = _v3.b;
						var _v5 = _v4.b;
						var _v6 = _v5.a;
						var linkText = _v6.a;
						var _v7 = _v5.b;
						return A3(
							$author$project$Generic$Language$Fun,
							'link',
							_List_fromArray(
								[
									A2($author$project$Generic$Language$Text, linkText + (' ' + url), meta)
								]),
							meta);
					} else {
						break _v0$3;
					}
				} else {
					if (!_v0.b.b.b.b.a.$) {
						switch (_v0.b.a.$) {
							case 2:
								if ((_v0.b.b.a.$ === 1) && (_v0.b.b.b.a.$ === 8)) {
									var _v8 = _v0.b;
									var _v9 = _v8.b;
									var _v10 = _v9.b;
									var _v11 = _v10.a;
									var linkText = _v11.a;
									var _v12 = _v10.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '[' + (linkText + '](no label)'), meta)
											]),
										meta);
								} else {
									break _v0$3;
								}
							case 8:
								if ((_v0.b.b.a.$ === 2) && (_v0.b.b.b.a.$ === 1)) {
									var _v13 = _v0.b;
									var _v14 = _v13.a;
									var url = _v14.a;
									var _v15 = _v13.b;
									var _v16 = _v15.b;
									var _v17 = _v16.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '[Link: no label](' + (url + ')'), meta)
											]),
										meta);
								} else {
									break _v0$3;
								}
							default:
								break _v0$3;
						}
					} else {
						break _v0$3;
					}
				}
			} else {
				break _v0$3;
			}
		}
		return A3(
			$author$project$Generic$Language$Fun,
			'red',
			_List_fromArray(
				[
					A2($author$project$Generic$Language$Text, '[Link: no label or url]', meta)
				]),
			meta);
	}();
	return _Utils_update(
		state,
		{
			l: A2($elm$core$List$cons, expr, state.l),
			v: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleMathSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[9, 9]))) {
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddleReversed(state.v));
			var expr = A3(
				$author$project$Generic$Language$VFun,
				'math',
				content,
				{
					qb: 0,
					rb: 0,
					hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
					jz: 0
				});
			return _Utils_update(
				state,
				{
					l: A2($elm$core$List$cons, expr, state.l),
					v: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleParens = function (state) {
	var str = function () {
		var _v0 = state.v;
		if ((((((_v0.b && (_v0.a.$ === 3)) && _v0.b.b) && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 2)) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var str_ = _v2.a;
			var _v3 = _v1.b;
			return '(' + (str_ + ')');
		} else {
			return $author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.v));
		}
	}();
	var meta = {
		qb: 0,
		rb: 0,
		hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
		jz: 0
	};
	var expr = A2($author$project$Generic$Language$Text, str, meta);
	return _Utils_update(
		state,
		{
			l: A2($elm$core$List$cons, expr, state.l),
			v: _List_Nil
		});
};
var $author$project$XMarkdown$Symbol$O = 8;
var $author$project$XMarkdown$ForkLog$forklogYellow = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgYellow, label, width, f, a);
	});
var $author$project$XMarkdown$Match$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$XMarkdown$Match$middle = function (list) {
	return $author$project$XMarkdown$Match$dropLast(
		A2($elm$core$List$drop, 1, list));
};
var $author$project$XMarkdown$Match$reducibleAux = function (symbols) {
	reducibleAux:
	while (true) {
		if ($elm$core$List$isEmpty(symbols)) {
			return true;
		} else {
			if (_Utils_eq(
				$elm$core$List$head(symbols),
				$elm$core$Maybe$Just(0)) && _Utils_eq(
				$elm_community$list_extra$List$Extra$last(symbols),
				$elm$core$Maybe$Just(1))) {
				var $temp$symbols = $author$project$XMarkdown$Match$middle(symbols);
				symbols = $temp$symbols;
				continue reducibleAux;
			} else {
				return false;
			}
		}
	}
};
var $author$project$XMarkdown$Match$reducibleF = function (symbols) {
	return _Utils_eq(
		symbols,
		_List_fromArray(
			[0, 1, 2, 3])) || _Utils_eq(
		symbols,
		_List_fromArray(
			[2, 3]));
};
var $author$project$XMarkdown$Match$reducible = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	_v0$7:
	while (true) {
		if (!_v0.$) {
			switch (_v0.a) {
				case 9:
					var _v1 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(9));
				case 10:
					var _v2 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(10));
				case 4:
					var _v3 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(4));
				case 5:
					var _v4 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just(5));
				case 6:
					var _v5 = _v0.a;
					return _Utils_eq(
						symbols,
						_List_fromArray(
							[6, 0, 1, 2, 3]));
				case 0:
					var _v6 = _v0.a;
					return _Utils_eq(
						symbols,
						_List_fromArray(
							[0, 1, 2, 3])) ? true : false;
				case 7:
					var _v7 = _v0.a;
					return ($elm$core$List$length(symbols) > 1) ? $author$project$XMarkdown$Match$reducibleAux(
						A2($elm$core$List$drop, 1, symbols)) : false;
				default:
					break _v0$7;
			}
		} else {
			break _v0$7;
		}
	}
	return $author$project$XMarkdown$Match$reducibleF(symbols);
};
var $author$project$XMarkdown$Expression$isReducible = function (tokens) {
	var preliminary = A4(
		$author$project$XMarkdown$ForkLog$forklogYellow,
		'SYMBOLS',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A2(
			$elm$core$List$filter,
			function (sym) {
				return sym !== 8;
			},
			$author$project$XMarkdown$Symbol$convertTokens(
				$elm$core$List$reverse(tokens))));
	return _Utils_eq(preliminary, _List_Nil) ? false : A4(
		$author$project$XMarkdown$ForkLog$forklogYellow,
		'REDUCIBLE ?',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		$author$project$XMarkdown$Match$reducible(preliminary));
};
var $author$project$XMarkdown$Token$Bold = function (a) {
	return {$: 6, a: a};
};
var $author$project$XMarkdown$Token$Italic = function (a) {
	return {$: 7, a: a};
};
var $author$project$XMarkdown$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				v: A2($elm$core$List$cons, token, state.v)
			});
	});
var $author$project$XMarkdown$Expression$pushOnStack = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				v: A2($elm$core$List$cons, token, state.v)
			});
	});
var $author$project$XMarkdown$Expression$exprOfToken = function (token) {
	switch (token.$) {
		case 8:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Generic$Language$Text, str, loc));
		case 9:
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Generic$Language$Text, str, loc));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Language$getMeta = function (expr) {
	switch (expr.$) {
		case 1:
			var meta = expr.c;
			return meta;
		case 2:
			var meta = expr.c;
			return meta;
		case 0:
			var meta = expr.b;
			return meta;
		default:
			var meta = expr.b;
			return meta;
	}
};
var $author$project$Generic$Language$ExprList = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$Generic$Language$setMeta = F2(
	function (meta, expr) {
		switch (expr.$) {
			case 1:
				var name = expr.a;
				var args = expr.b;
				return A3($author$project$Generic$Language$Fun, name, args, meta);
			case 2:
				var name = expr.a;
				var arg = expr.b;
				return A3($author$project$Generic$Language$VFun, name, arg, meta);
			case 0:
				var text = expr.a;
				return A2($author$project$Generic$Language$Text, text, meta);
			default:
				var eList = expr.a;
				return A2($author$project$Generic$Language$ExprList, eList, meta);
		}
	});
var $author$project$Generic$Language$updateMeta = F2(
	function (update, expr) {
		return A2(
			$author$project$Generic$Language$setMeta,
			update(
				$author$project$Generic$Language$getMeta(expr)),
			expr);
	});
var $author$project$XMarkdown$Expression$commit = F2(
	function (token, state) {
		var _v0 = $author$project$XMarkdown$Expression$exprOfToken(token);
		if (_v0.$ === 1) {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					l: A2(
						$elm$core$List$cons,
						A2(
							$author$project$Generic$Language$updateMeta,
							function (m) {
								return _Utils_update(
									m,
									{
										hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, 0)
									});
							},
							expr),
						state.l)
				});
		}
	});
var $author$project$XMarkdown$Expression$pushOrCommit = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.v) ? A2($author$project$XMarkdown$Expression$commit, token, state) : A2($author$project$XMarkdown$Expression$push, token, state);
	});
var $author$project$XMarkdown$Expression$pushToken = F2(
	function (token, state) {
		switch (token.$) {
			case 8:
				var str = token.a;
				var meta = token.b;
				if (A2($elm$core$String$right, 1, str) === ' ') {
					return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
				} else {
					var _v1 = A2($elm_community$list_extra$List$Extra$getAt, meta.jz + 1, state.bb);
					_v1$2:
					while (true) {
						if (!_v1.$) {
							switch (_v1.a.$) {
								case 7:
									var meta_ = _v1.a.a;
									return $author$project$XMarkdown$Expression$advanceTokenIndex(
										A2(
											$author$project$XMarkdown$Expression$push,
											$author$project$XMarkdown$Token$Italic(meta_),
											A2($author$project$XMarkdown$Expression$push, token, state)));
								case 6:
									var meta_ = _v1.a.a;
									return $author$project$XMarkdown$Expression$advanceTokenIndex(
										A2(
											$author$project$XMarkdown$Expression$push,
											$author$project$XMarkdown$Token$Bold(meta_),
											A2($author$project$XMarkdown$Expression$push, token, state)));
								default:
									break _v1$2;
							}
						} else {
							break _v1$2;
						}
					}
					return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
				}
			case 9:
				return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
			default:
				return A2($author$project$XMarkdown$Expression$pushOnStack, token, state);
		}
	});
var $author$project$XMarkdown$Token$S = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2($elm$core$List$drop, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					A2($elm$core$List$take, index, list),
					A2(
						$elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var $elm_community$list_extra$List$Extra$setAt = F2(
	function (index, value) {
		return A2(
			$elm_community$list_extra$List$Extra$updateAt,
			index,
			$elm$core$Basics$always(value));
	});
var $author$project$XMarkdown$Token$changeTokenContentAt = F3(
	function (k, newContent, tokens) {
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, k, tokens);
		if (_v0.$ === 1) {
			return tokens;
		} else {
			var tok = _v0.a;
			if (tok.$ === 8) {
				var meta = tok.b;
				return A3(
					$elm_community$list_extra$List$Extra$setAt,
					k,
					A2($author$project$XMarkdown$Token$S, newContent, meta),
					tokens);
			} else {
				return tokens;
			}
		}
	});
var $author$project$XMarkdown$Token$indexOf = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.jz;
		case 1:
			var meta = token.a;
			return meta.jz;
		case 8:
			var meta = token.b;
			return meta.jz;
		case 9:
			var meta = token.b;
			return meta.jz;
		case 10:
			var meta = token.a;
			return meta.jz;
		case 11:
			var meta = token.a;
			return meta.jz;
		case 12:
			var meta = token.b;
			return meta.jz;
		case 2:
			var meta = token.a;
			return meta.jz;
		case 3:
			var meta = token.a;
			return meta.jz;
		case 4:
			var meta = token.a;
			return meta.jz;
		case 5:
			var meta = token.a;
			return meta.jz;
		case 6:
			var meta = token.a;
			return meta.jz;
		default:
			var meta = token.a;
			return meta.jz;
	}
};
var $author$project$XMarkdown$Token$AT = function (a) {
	return {$: 5, a: a};
};
var $author$project$XMarkdown$Token$CodeToken = function (a) {
	return {$: 11, a: a};
};
var $author$project$XMarkdown$Token$Image = function (a) {
	return {$: 4, a: a};
};
var $author$project$XMarkdown$Token$LB = function (a) {
	return {$: 0, a: a};
};
var $author$project$XMarkdown$Token$LP = function (a) {
	return {$: 2, a: a};
};
var $author$project$XMarkdown$Token$MathToken = function (a) {
	return {$: 10, a: a};
};
var $author$project$XMarkdown$Token$RB = function (a) {
	return {$: 1, a: a};
};
var $author$project$XMarkdown$Token$RP = function (a) {
	return {$: 3, a: a};
};
var $author$project$XMarkdown$Token$TokenError = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $author$project$XMarkdown$Token$W = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$XMarkdown$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 0:
				var meta = token.a;
				return $author$project$XMarkdown$Token$LB(
					_Utils_update(
						meta,
						{jz: k}));
			case 1:
				var meta = token.a;
				return $author$project$XMarkdown$Token$RB(
					_Utils_update(
						meta,
						{jz: k}));
			case 2:
				var meta = token.a;
				return $author$project$XMarkdown$Token$LP(
					_Utils_update(
						meta,
						{jz: k}));
			case 3:
				var meta = token.a;
				return $author$project$XMarkdown$Token$RP(
					_Utils_update(
						meta,
						{jz: k}));
			case 6:
				var meta = token.a;
				return $author$project$XMarkdown$Token$Bold(
					_Utils_update(
						meta,
						{jz: k}));
			case 7:
				var meta = token.a;
				return $author$project$XMarkdown$Token$Italic(
					_Utils_update(
						meta,
						{jz: k}));
			case 4:
				var meta = token.a;
				return $author$project$XMarkdown$Token$Image(
					_Utils_update(
						meta,
						{jz: k}));
			case 5:
				var meta = token.a;
				return $author$project$XMarkdown$Token$AT(
					_Utils_update(
						meta,
						{jz: k}));
			case 8:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$S,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 9:
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$W,
					str,
					_Utils_update(
						meta,
						{jz: k}));
			case 10:
				var meta = token.a;
				return $author$project$XMarkdown$Token$MathToken(
					_Utils_update(
						meta,
						{jz: k}));
			case 11:
				var meta = token.a;
				return $author$project$XMarkdown$Token$CodeToken(
					_Utils_update(
						meta,
						{jz: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{jz: k}));
		}
	});
var $author$project$XMarkdown$Token$changeTokenIndicesFrom = F3(
	function (from, delta, tokens) {
		var f = function (token) {
			var k = $author$project$XMarkdown$Token$indexOf(token);
			return (_Utils_cmp(k, from) > -1) ? A2($author$project$XMarkdown$Token$setIndex, k + delta, token) : token;
		};
		return A2(
			$elm$core$List$map,
			function (token) {
				return f(token);
			},
			tokens);
	});
var $author$project$XMarkdown$Meta$dummy = {qb: 0, rb: 0, hg: 'dummyId', jz: 0};
var $author$project$XMarkdown$Expression$dummyTokenIndex = 0;
var $author$project$XMarkdown$Expression$dummyLocWithId = {qb: 0, rb: 0, hg: 'dummy (3)', jz: $author$project$XMarkdown$Expression$dummyTokenIndex};
var $author$project$XMarkdown$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'red',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$XMarkdown$Expression$dummyLocWithId)
			]),
		$author$project$XMarkdown$Expression$dummyLocWithId);
};
var $author$project$XMarkdown$Expression$errorMessageBold = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Generic$Language$Fun,
				'red',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, message, $author$project$XMarkdown$Expression$dummyLocWithId)
					]),
				$author$project$XMarkdown$Expression$dummyLocWithId)
			]),
		$author$project$XMarkdown$Expression$dummyLocWithId);
};
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $author$project$XMarkdown$Expression$insertAt = F3(
	function (k, a, list) {
		var _v0 = A2($elm_community$list_extra$List$Extra$splitAt, k, list);
		var p = _v0.a;
		var q = _v0.b;
		return _Utils_ap(
			p,
			A2($elm$core$List$cons, a, q));
	});
var $author$project$XMarkdown$Expression$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$XMarkdown$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.v);
	_v0$14:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 8:
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 7:
								var _v1 = _v0.a;
								var content = _v1.a;
								var meta = _v1.b;
								var _v2 = _v0.b;
								var rest = _v2.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Generic$Language$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Generic$Language$Text, ' *', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												state.l),
											v: _List_Nil,
											al: meta.jz,
											bb: A3(
												$author$project$XMarkdown$Token$changeTokenIndicesFrom,
												meta.jz + 1,
												1,
												A3(
													$author$project$XMarkdown$Expression$insertAt,
													meta.jz,
													$author$project$XMarkdown$Token$Italic(meta),
													A3(
														$author$project$XMarkdown$Token$changeTokenContentAt,
														meta.jz,
														$elm$core$String$trim(content),
														state.bb)))
										}));
							case 6:
								var _v3 = _v0.a;
								var content = _v3.a;
								var meta = _v3.b;
								var _v4 = _v0.b;
								var rest = _v4.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Generic$Language$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Generic$Language$Text, ' **', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												state.l),
											v: _List_Nil,
											al: meta.jz,
											bb: A3(
												$author$project$XMarkdown$Token$changeTokenIndicesFrom,
												meta.jz + 1,
												1,
												A3(
													$author$project$XMarkdown$Expression$insertAt,
													meta.jz,
													$author$project$XMarkdown$Token$Bold(meta),
													A3(
														$author$project$XMarkdown$Token$changeTokenContentAt,
														meta.jz,
														$elm$core$String$trim(content),
														state.bb)))
										}));
							default:
								break _v0$14;
						}
					} else {
						break _v0$14;
					}
				case 0:
					if ((((_v0.b.b && (_v0.b.a.$ === 8)) && _v0.b.b.b) && (_v0.b.b.a.$ === 1)) && (!_v0.b.b.b.b)) {
						var _v5 = _v0.b;
						var _v6 = _v5.a;
						var txt = _v6.a;
						var meta = _v6.b;
						var _v7 = _v5.b;
						return $author$project$Tools$Loop$Loop(
							_Utils_update(
								state,
								{
									l: A2(
										$elm$core$List$cons,
										A2($author$project$Generic$Language$Text, '[' + (txt + ']'), meta),
										_List_Nil),
									v: _List_Nil
								}));
					} else {
						break _v0$14;
					}
				case 7:
					if (!_v0.b.b) {
						var meta = _v0.a.a;
						if ($elm$core$List$isEmpty(state.l)) {
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										l: A2(
											$elm$core$List$cons,
											$author$project$XMarkdown$Expression$errorMessage('*'),
											_List_Nil),
										v: _List_Nil
									}));
						} else {
							var expr = function () {
								var _v8 = $elm$core$List$head(state.l);
								if ((!_v8.$) && (!_v8.a.$)) {
									var _v9 = _v8.a;
									var str1 = _v9.a;
									var meta1 = _v9.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'italic',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, str1, meta1)
											]),
										meta1);
								} else {
									return A3(
										$author$project$Generic$Language$Fun,
										'italic',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '??', meta)
											]),
										meta);
								}
							}();
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										l: A2(
											$elm$core$List$cons,
											expr,
											A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('*?1'),
												A2($elm$core$List$drop, 1, state.l))),
										jU: _List_fromArray(
											['!!']),
										v: _List_Nil,
										al: meta.jz + 1
									}));
						}
					} else {
						if (_v0.b.a.$ === 8) {
							if (!_v0.b.b.b) {
								var meta1 = _v0.a.a;
								var _v10 = _v0.b;
								var _v11 = _v10.a;
								var str = _v11.a;
								var meta2 = _v11.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Generic$Language$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Generic$Language$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												A2(
													$elm$core$List$cons,
													A3(
														$author$project$Generic$Language$Fun,
														'italic',
														_List_fromArray(
															[
																A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
															]),
														$author$project$XMarkdown$Expression$dummyLocWithId),
													state.l)),
											v: _List_Nil,
											al: meta2.jz + 1
										}));
							} else {
								if (_v0.b.b.a.$ === 6) {
									if (!_v0.b.b.b.b) {
										var meta1 = _v0.a.a;
										var _v12 = _v0.b;
										var _v13 = _v12.a;
										var str = _v13.a;
										var meta2 = _v13.b;
										var _v14 = _v12.b;
										var meta3 = _v14.a.a;
										return $author$project$Tools$Loop$Loop(
											_Utils_update(
												state,
												{
													l: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, '* << extra? ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Generic$Language$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.l)),
													v: _List_Nil,
													al: meta3.jz + 1
												}));
									} else {
										var meta1 = _v0.a.a;
										var _v15 = _v0.b;
										var _v16 = _v15.a;
										var str = _v16.a;
										var meta2 = _v16.b;
										var _v17 = _v15.b;
										var meta3 = _v17.a.a;
										var rest = _v17.b;
										return (A2($elm$core$String$right, 1, str) === ' ') ? $author$project$Tools$Loop$Loop(
											_Utils_update(
												state,
												{
													l: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Generic$Language$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.l)),
													v: _List_Nil,
													al: meta3.jz
												})) : $author$project$Tools$Loop$Loop(
											_Utils_update(
												state,
												{
													l: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, '* << extra? ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Generic$Language$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.l)),
													v: _List_Nil,
													al: meta3.jz + 1
												}));
									}
								} else {
									var meta1 = _v0.a.a;
									var _v18 = _v0.b;
									var _v19 = _v18.a;
									var str = _v19.a;
									var meta2 = _v19.b;
									var rest = _v18.b;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												l: A2(
													$elm$core$List$cons,
													A3(
														$author$project$Generic$Language$Fun,
														'pink',
														_List_fromArray(
															[
																A2($author$project$Generic$Language$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
															]),
														$author$project$XMarkdown$Expression$dummyLocWithId),
													A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'italic',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														state.l)),
												v: _List_Nil,
												al: meta2.jz + 1
											}));
								}
							}
						} else {
							var meta1 = _v0.a.a;
							var rest = _v0.b;
							var _v20 = $elm_community$list_extra$List$Extra$last(rest);
							if (!_v20.$) {
								if (_v20.a.$ === 6) {
									var meta2 = _v20.a.a;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												v: _List_Nil,
												al: meta2.jz + 2,
												bb: A3(
													$author$project$XMarkdown$Token$changeTokenIndicesFrom,
													meta2.jz + 2,
													1,
													A3(
														$author$project$XMarkdown$Expression$insertAt,
														meta2.jz,
														A2(
															$author$project$XMarkdown$Token$S,
															'* << extra? ',
															_Utils_update(
																meta2,
																{jz: meta2.jz + 1})),
														A3(
															$elm_community$list_extra$List$Extra$setAt,
															meta2.jz,
															$author$project$XMarkdown$Token$Italic(meta2),
															state.bb)))
											}));
								} else {
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												l: _Utils_ap(
													state.l,
													A2(
														$elm$core$List$cons,
														$author$project$XMarkdown$Expression$errorMessage('*??1a'),
														A2($elm$core$List$drop, 1, state.l))),
												jU: _List_fromArray(
													['!!']),
												v: _List_Nil,
												al: meta1.jz + 1
											}));
								}
							} else {
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: _Utils_ap(
												state.l,
												A2(
													$elm$core$List$cons,
													$author$project$XMarkdown$Expression$errorMessage('*??1b'),
													A2($elm$core$List$drop, 1, state.l))),
											jU: _List_fromArray(
												['!!']),
											v: _List_Nil,
											al: meta1.jz + 1
										}));
							}
						}
					}
				case 6:
					if (!_v0.b.b) {
						var meta = _v0.a.a;
						if ($elm$core$List$isEmpty(state.l)) {
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										l: A2(
											$elm$core$List$cons,
											$author$project$XMarkdown$Expression$errorMessage('**'),
											_List_Nil),
										v: _List_Nil
									}));
						} else {
							var expr = function () {
								var _v21 = $elm$core$List$head(state.l);
								if ((!_v21.$) && (!_v21.a.$)) {
									var _v22 = _v21.a;
									var str1 = _v22.a;
									var meta1 = _v22.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'bold',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, str1, meta1)
											]),
										meta1);
								} else {
									return A3(
										$author$project$Generic$Language$Fun,
										'bold',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '??', meta)
											]),
										meta);
								}
							}();
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										l: A2(
											$elm$core$List$cons,
											expr,
											A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('**?2'),
												A2($elm$core$List$drop, 1, state.l))),
										jU: _List_fromArray(
											['!!']),
										v: _List_Nil,
										al: meta.jz + 1
									}));
						}
					} else {
						if (_v0.b.a.$ === 8) {
							if (!_v0.b.b.b) {
								var _v23 = _v0.b;
								var _v24 = _v23.a;
								var str = _v24.a;
								var meta = _v24.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											l: A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('** '),
												A2(
													$elm$core$List$cons,
													A3(
														$author$project$Generic$Language$Fun,
														'bold',
														_List_fromArray(
															[
																A2($author$project$Generic$Language$Text, str, meta)
															]),
														meta),
													state.l)),
											jU: _List_fromArray(
												['!!']),
											v: _List_Nil,
											al: meta.jz + 1
										}));
							} else {
								if (_v0.b.b.a.$ === 7) {
									var meta1 = _v0.a.a;
									var _v25 = _v0.b;
									var _v26 = _v25.a;
									var str = _v26.a;
									var meta2 = _v26.b;
									var _v27 = _v25.b;
									var meta3 = _v27.a.a;
									var rest = _v27.b;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												l: A2(
													$elm$core$List$cons,
													$author$project$XMarkdown$Expression$errorMessage('* '),
													A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'bold',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														state.l)),
												jU: _List_fromArray(
													['!!']),
												v: _List_Nil,
												al: meta3.jz + 1
											}));
								} else {
									break _v0$14;
								}
							}
						} else {
							break _v0$14;
						}
					}
				case 10:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$XMarkdown$Token$toString2(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$XMarkdown$Expression$errorMessage(message),
									state.l),
								jU: A3($author$project$XMarkdown$Expression$prependMessage, state.jR, 'opening dollar sign needs to be matched with a closing one', state.jU),
								ev: 0,
								v: _List_Nil,
								al: meta.jz + 1
							}));
				case 11:
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$XMarkdown$Token$toString2(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								l: A2(
									$elm$core$List$cons,
									$author$project$XMarkdown$Expression$errorMessageBold(message),
									state.l),
								jU: A3($author$project$XMarkdown$Expression$prependMessage, state.jR, 'opening backtick needs to be matched with a closing one', state.jU),
								ev: 0,
								v: _List_Nil,
								al: meta.jz + 1
							}));
				default:
					break _v0$14;
			}
		} else {
			break _v0$14;
		}
	}
	return $author$project$Tools$Loop$Done(
		_Utils_update(
			state,
			{
				l: A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$Fun,
						'red',
						_List_fromArray(
							[
								A2(
								$author$project$Generic$Language$Text,
								$author$project$XMarkdown$Token$toString(
									$elm$core$List$reverse(state.v)),
								$author$project$XMarkdown$Meta$dummy)
							]),
						$author$project$XMarkdown$Meta$dummy),
					state.l),
				v: _List_Nil
			}));
};
var $author$project$XMarkdown$Expression$takeMiddle = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		A2(
			$elm$core$List$take,
			$elm$core$List$length(list) - 1,
			list));
};
var $author$project$XMarkdown$Expression$handleBoldItalic = function (state) {
	var n = $elm$core$List$length(state.v);
	var meta = {
		qb: 0,
		rb: 0,
		hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
		jz: 0
	};
	var inner = A2(
		$elm$core$List$drop,
		2,
		A2($elm$core$List$take, n - 2, state.v));
	var exprs = A2($author$project$XMarkdown$Expression$parseTokens, 0, inner);
	var expr = A3(
		$author$project$Generic$Language$Fun,
		'bold',
		_List_fromArray(
			[
				A3($author$project$Generic$Language$Fun, 'italic', exprs, meta)
			]),
		meta);
	return _Utils_update(
		state,
		{
			l: A2($elm$core$List$cons, expr, state.l),
			v: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleBoldSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			$elm$core$List$head(symbols),
			$elm$core$Maybe$Just(4)) && _Utils_eq(
			$elm_community$list_extra$List$Extra$last(symbols),
			$elm$core$Maybe$Just(4))) {
			var meta = {
				qb: 0,
				rb: 0,
				hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
				jz: 0
			};
			var innerExprs = A2(
				$author$project$XMarkdown$Expression$parseTokens,
				0,
				$author$project$XMarkdown$Expression$takeMiddle(state.v));
			var expr = A3($author$project$Generic$Language$Fun, 'bold', innerExprs, meta);
			return _Utils_update(
				state,
				{
					l: A2($elm$core$List$cons, expr, state.l),
					v: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleItalicSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			$elm$core$List$head(symbols),
			$elm$core$Maybe$Just(5)) && _Utils_eq(
			$elm_community$list_extra$List$Extra$last(symbols),
			$elm$core$Maybe$Just(5))) {
			var meta = {
				qb: 0,
				rb: 0,
				hg: A2($author$project$XMarkdown$Expression$makeId, state.jR, state.al),
				jz: 0
			};
			var innerExprs = A2(
				$author$project$XMarkdown$Expression$parseTokens,
				0,
				$author$project$XMarkdown$Expression$takeMiddle(state.v));
			var expr = A3($author$project$Generic$Language$Fun, 'italic', innerExprs, meta);
			return _Utils_update(
				state,
				{
					l: A2($elm$core$List$cons, expr, state.l),
					v: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$nextStep = function (state) {
	var _v17 = A2($elm_community$list_extra$List$Extra$getAt, state.al, state.bb);
	if (_v17.$ === 1) {
		return $elm$core$List$isEmpty(state.v) ? $author$project$Tools$Loop$Done(state) : $author$project$XMarkdown$Expression$recoverFromError(
			A4(
				$author$project$XMarkdown$ForkLog$forklogBlue,
				'RECOVER',
				12,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.v;
					},
					A2($elm$core$Basics$composeR, $elm$core$List$reverse, $author$project$XMarkdown$Token$toString2)),
				state));
	} else {
		var token = _v17.a;
		return $author$project$Tools$Loop$Loop(
			function (st) {
				return _Utils_update(
					st,
					{h1: st.h1 + 1});
			}(
				$author$project$XMarkdown$Expression$reduceState(
					A4(
						$author$project$XMarkdown$ForkLog$forklogBlue,
						'STACK',
						$author$project$XMarkdown$Expression$forkLogWidth,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.v;
							},
							$author$project$XMarkdown$Token$toString2),
						A2(
							$author$project$XMarkdown$Expression$pushToken,
							token,
							$author$project$XMarkdown$Expression$advanceTokenIndex(state))))));
	}
};
var $author$project$XMarkdown$Expression$parseTokens = F2(
	function (lineNumber, tokens) {
		return A4(
			$author$project$XMarkdown$ForkLog$forklogCyan,
			'LENGTH',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$List$length,
			$author$project$XMarkdown$Expression$run(
				A2(
					$author$project$XMarkdown$Expression$initWithTokens,
					lineNumber,
					A4($author$project$XMarkdown$ForkLog$forklogCyan, 'TOKENS', $author$project$XMarkdown$Expression$forkLogWidth, $author$project$XMarkdown$Token$toString2, tokens))).l);
	});
var $author$project$XMarkdown$Expression$reduceState = function (state) {
	var reducible1 = A4(
		$author$project$XMarkdown$ForkLog$forklogRed,
		'SYMBOLS (!!)',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		$author$project$XMarkdown$Expression$isReducible(state.v));
	if ((_Utils_cmp(state.al, state.ev) > -1) || reducible1) {
		var symbols = A4(
			$author$project$XMarkdown$ForkLog$forklogRed,
			'SYMBOLS',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$Basics$identity,
			$elm$core$List$reverse(
				$author$project$XMarkdown$Symbol$convertTokens(state.v)));
		var _v0 = $elm$core$List$head(symbols);
		_v0$8:
		while (true) {
			if (!_v0.$) {
				switch (_v0.a) {
					case 7:
						var _v1 = _v0.a;
						return $author$project$XMarkdown$Expression$handleAt(state);
					case 9:
						var _v2 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleMathSymbol, symbols, state);
					case 10:
						var _v3 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleCodeSymbol, symbols, state);
					case 4:
						var _v4 = _v0.a;
						if (((symbols.b && (symbols.a === 4)) && symbols.b.b) && (symbols.b.a === 5)) {
							var _v6 = symbols.a;
							var _v7 = symbols.b;
							var _v8 = _v7.a;
							var _v9 = $elm$core$List$reverse(symbols);
							if (((_v9.b && (_v9.a === 4)) && _v9.b.b) && (_v9.b.a === 5)) {
								var _v10 = _v9.a;
								var _v11 = _v9.b;
								var _v12 = _v11.a;
								return $author$project$XMarkdown$Expression$handleBoldItalic(state);
							} else {
								return state;
							}
						} else {
							return A2($author$project$XMarkdown$Expression$handleBoldSymbol, symbols, state);
						}
					case 5:
						var _v13 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleItalicSymbol, symbols, state);
					case 0:
						var _v14 = _v0.a;
						return _Utils_eq(
							symbols,
							_List_fromArray(
								[0, 1, 2, 3])) ? $author$project$XMarkdown$Expression$handleLink(state) : A4(
							$author$project$XMarkdown$ForkLog$forklogRed,
							'HANDLE[]',
							$author$project$XMarkdown$Expression$forkLogWidth,
							$elm$core$Basics$identity,
							$author$project$XMarkdown$Expression$handleBracketedText(state));
					case 6:
						var _v15 = _v0.a;
						return $author$project$XMarkdown$Expression$handleImage(state);
					case 2:
						var _v16 = _v0.a;
						return $author$project$XMarkdown$Expression$handleParens(state);
					default:
						break _v0$8;
				}
			} else {
				break _v0$8;
			}
		}
		return state;
	} else {
		return state;
	}
};
var $author$project$XMarkdown$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				l: $elm$core$List$reverse(state_.l)
			});
	}(
		A2($author$project$Tools$Loop$loop, state, $author$project$XMarkdown$Expression$nextStep));
};
var $author$project$XMarkdown$Token$Normal = 0;
var $author$project$XMarkdown$Token$init = function (str) {
	return {
		c6: $elm$core$Maybe$Nothing,
		fP: 0,
		dx: 0,
		tt: str,
		kU: $elm$core$String$length(str),
		al: 0,
		bb: _List_Nil
	};
};
var $author$project$XMarkdown$Token$TLB = 0;
var $author$project$XMarkdown$Token$fakeDebugLog = function (_v0) {
	return $elm$core$Basics$identity;
};
var $author$project$XMarkdown$Token$finish = function (state) {
	var _v0 = state.c6;
	if (!_v0.$) {
		var token = _v0.a;
		return $author$project$Tools$Loop$Done(
			A2($elm$core$List$cons, token, state.bb));
	} else {
		return $author$project$Tools$Loop$Done(state.bb);
	}
};
var $author$project$XMarkdown$Token$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$XMarkdown$ParserTools$ExpectingPrefix = {$: 0};
var $author$project$XMarkdown$ParserTools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									qb: start,
									iV: A3($elm$core$String$slice, start, finish, content),
									rb: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$XMarkdown$ParserTools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$XMarkdown$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$CodeToken(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === '`';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$codeChars = _List_fromArray(
	['`']);
var $author$project$XMarkdown$Token$languageChars = _List_fromArray(
	['\\', '[', ']', '(', ')', '`', '*', '$']);
var $author$project$XMarkdown$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.iV,
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$W,
					data.iV,
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === ' ';
				},
				function (c) {
					return c === ' ';
				}));
	});
var $author$project$XMarkdown$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$codeTextParser, start, index),
					A2($author$project$XMarkdown$Token$codeParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$MathToken(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === '$';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$mathChars = _List_fromArray(
	['$']);
var $author$project$XMarkdown$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.iV,
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$mathTextParser, start, index),
					A2($author$project$XMarkdown$Token$mathParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$ParserTools$ExpectingATStart = {$: 3};
var $author$project$XMarkdown$Token$atParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$AT(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '@[', $author$project$XMarkdown$ParserTools$ExpectingATStart)));
	});
var $author$project$XMarkdown$ParserTools$ExpectingSymbol = function (a) {
	return {$: 1, a: a};
};
var $author$project$XMarkdown$Token$boldParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$Bold(
					{
						qb: start,
						rb: start + 1,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'**',
					$author$project$XMarkdown$ParserTools$ExpectingSymbol('**'))));
	});
var $author$project$XMarkdown$ParserTools$ExpectingImageStart = {$: 2};
var $author$project$XMarkdown$Token$imageParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$Image(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '![', $author$project$XMarkdown$ParserTools$ExpectingImageStart)));
	});
var $author$project$XMarkdown$Token$italicParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$Italic(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === '*';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$leftBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$LB(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === '[';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$leftParenParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$LP(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === '(';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$rightBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$RB(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === ']';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$rightParenParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$RP(
					{
						qb: start,
						rb: start,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return c === ')';
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.iV,
					{
						qb: start,
						rb: ((start + data.rb) - data.qb) - 1,
						hg: A2($author$project$XMarkdown$Token$makeId, start, index),
						jz: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2($elm$core$List$cons, ' ', $author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$imageParser, start, index),
					A2($author$project$XMarkdown$Token$atParser, start, index),
					A2($author$project$XMarkdown$Token$textParser, start, index),
					A2($author$project$XMarkdown$Token$leftBracketParser, start, index),
					A2($author$project$XMarkdown$Token$rightBracketParser, start, index),
					A2($author$project$XMarkdown$Token$leftParenParser, start, index),
					A2($author$project$XMarkdown$Token$rightParenParser, start, index),
					A2($author$project$XMarkdown$Token$boldParser, start, index),
					A2($author$project$XMarkdown$Token$italicParser, start, index),
					A2($author$project$XMarkdown$Token$mathParser, start, index),
					A2($author$project$XMarkdown$Token$codeParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode) {
			case 0:
				return A2($author$project$XMarkdown$Token$tokenParser_, start, index);
			case 1:
				return A2($author$project$XMarkdown$Token$mathParser_, start, index);
			default:
				return A2($author$project$XMarkdown$Token$codeParser_, start, index);
		}
	});
var $author$project$XMarkdown$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$XMarkdown$Token$tokenParser, state.fP, start, state.al),
			input);
		if (!_v0.$) {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$XMarkdown$Token$TokenError,
				errorList,
				{
					qb: start,
					rb: start + 1,
					hg: A2($author$project$XMarkdown$Token$makeId, start, state.al),
					jz: state.al
				});
		}
	});
var $author$project$XMarkdown$Token$handleDefault = F2(
	function (state, token) {
		var _v0 = state.c6;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.al, token),
					state.bb),
				state.al + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.al + 1, token),
					A2($elm$core$List$cons, textToken, state.bb)),
				state.al + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$XMarkdown$Token$handleLB = F2(
	function (state, token) {
		var _v0 = state.c6;
		if (_v0.$ === 1) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.al, token),
					state.bb),
				state.al + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.al + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$XMarkdown$Token$setIndex, state.al, textToken),
						state.bb)),
				state.al + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$XMarkdown$Token$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.qb;
		var end = _v0.rb;
		var index = _v0.jz;
		return {
			qb: begin,
			rb: end,
			hg: A2($author$project$XMarkdown$Token$makeId, lineNumber, tokenIndex),
			jz: index
		};
	});
var $author$project$XMarkdown$Token$getMeta = function (token) {
	switch (token.$) {
		case 0:
			var m = token.a;
			return m;
		case 1:
			var m = token.a;
			return m;
		case 2:
			var m = token.a;
			return m;
		case 3:
			var m = token.a;
			return m;
		case 6:
			var m = token.a;
			return m;
		case 7:
			var m = token.a;
			return m;
		case 4:
			var m = token.a;
			return m;
		case 5:
			var m = token.a;
			return m;
		case 8:
			var m = token.b;
			return m;
		case 9:
			var m = token.b;
			return m;
		case 10:
			var m = token.a;
			return m;
		case 11:
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$XMarkdown$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$XMarkdown$Token$getMeta(lastToken);
		var currentTokenMeta = $author$project$XMarkdown$Token$getMeta(currentToken);
		var meta = {qb: lastTokenMeta.qb, rb: currentTokenMeta.rb, jz: -1};
		return A2(
			$author$project$XMarkdown$Token$S,
			_Utils_ap(
				$author$project$XMarkdown$Token$stringValue(lastToken),
				$author$project$XMarkdown$Token$stringValue(currentToken)),
			A3($author$project$XMarkdown$Token$boostMeta, meta.qb, meta.rb, meta));
	});
var $author$project$XMarkdown$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 1) {
			return $elm$core$Maybe$Just(
				A2($author$project$XMarkdown$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$XMarkdown$Token$setIndex,
					index,
					A2($author$project$XMarkdown$Token$mergeToken, token_, token)));
		}
	});
var $author$project$XMarkdown$Token$handleMerge = F2(
	function (state, token) {
		return _Utils_Tuple3(
			state.bb,
			state.al,
			A3($author$project$XMarkdown$Token$updateCurrentToken, state.al, token, state.c6));
	});
var $author$project$XMarkdown$Token$TS = 8;
var $author$project$XMarkdown$Token$TW = 9;
var $author$project$XMarkdown$Token$TAT = 7;
var $author$project$XMarkdown$Token$TBold = 4;
var $author$project$XMarkdown$Token$TCode = 11;
var $author$project$XMarkdown$Token$TImage = 6;
var $author$project$XMarkdown$Token$TItalic = 5;
var $author$project$XMarkdown$Token$TLP = 2;
var $author$project$XMarkdown$Token$TMath = 10;
var $author$project$XMarkdown$Token$TRB = 1;
var $author$project$XMarkdown$Token$TRP = 3;
var $author$project$XMarkdown$Token$TTokenError = 12;
var $author$project$XMarkdown$Token$type_ = function (token) {
	switch (token.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 6:
			return 4;
		case 7:
			return 5;
		case 4:
			return 6;
		case 5:
			return 7;
		case 8:
			return 8;
		case 9:
			return 9;
		case 10:
			return 10;
		case 11:
			return 11;
		default:
			return 12;
	}
};
var $author$project$XMarkdown$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$XMarkdown$Token$type_(token),
		_List_fromArray(
			[9, 8]));
};
var $author$project$XMarkdown$Token$length = function (token) {
	switch (token.$) {
		case 0:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 1:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 2:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 3:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 6:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 7:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 4:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 5:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 8:
			var meta = token.b;
			return meta.rb - meta.qb;
		case 10:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 11:
			var meta = token.a;
			return meta.rb - meta.qb;
		case 9:
			var meta = token.b;
			return meta.rb - meta.qb;
		default:
			var meta = token.b;
			return meta.rb - meta.qb;
	}
};
var $author$project$XMarkdown$Token$InCode = 2;
var $author$project$XMarkdown$Token$InMath = 1;
var $author$project$XMarkdown$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode) {
			case 0:
				switch (token.$) {
					case 10:
						return 1;
					case 11:
						return 2;
					default:
						return 0;
				}
			case 1:
				if (token.$ === 10) {
					return 0;
				} else {
					return 1;
				}
			default:
				if (token.$ === 11) {
					return 0;
				} else {
					return 2;
				}
		}
	});
var $author$project$XMarkdown$Token$nextStep = function (state) {
	if (_Utils_cmp(state.dx, state.kU) > -1) {
		return $author$project$XMarkdown$Token$finish(state);
	} else {
		var token = A3(
			$author$project$XMarkdown$Token$get,
			state,
			state.dx,
			A2($elm$core$String$dropLeft, state.dx, state.tt));
		var newScanPointer = (state.dx + $author$project$XMarkdown$Token$length(token)) + 1;
		var _v0 = $author$project$XMarkdown$Token$isTextToken(token) ? A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(1)',
			A2($author$project$XMarkdown$Token$handleMerge, state, token)) : ((!$author$project$XMarkdown$Token$type_(token)) ? A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(2)',
			A2($author$project$XMarkdown$Token$handleLB, state, token)) : A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(3)',
			A2($author$project$XMarkdown$Token$handleDefault, state, token)));
		var tokens = _v0.a;
		var tokenIndex = _v0.b;
		var currentToken_ = _v0.c;
		var currentToken = $author$project$XMarkdown$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Tools$Loop$Loop(
			_Utils_update(
				state,
				{
					c6: currentToken,
					fP: A2($author$project$XMarkdown$Token$newMode, token, state.fP),
					dx: newScanPointer,
					al: tokenIndex,
					bb: tokens
				}));
	}
};
var $author$project$XMarkdown$Token$run = function (source) {
	return A2(
		$author$project$Tools$Loop$loop,
		$author$project$XMarkdown$Token$init(source),
		$author$project$XMarkdown$Token$nextStep);
};
var $author$project$XMarkdown$Expression$parse = F2(
	function (lineNumber, str) {
		return A4(
			$author$project$XMarkdown$ForkLog$forklogCyan,
			'LENGTH',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$List$length,
			$author$project$XMarkdown$Expression$run(
				A2(
					$author$project$XMarkdown$Expression$initWithTokens,
					lineNumber,
					A4(
						$author$project$XMarkdown$ForkLog$forklogCyan,
						'TOKENS',
						$author$project$XMarkdown$Expression$forkLogWidth,
						$author$project$XMarkdown$Token$toString2,
						$author$project$XMarkdown$Token$run(str)))).l);
	});
var $author$project$Generic$Language$boost = F2(
	function (position, meta) {
		return _Utils_update(
			meta,
			{qb: meta.qb + position, rb: meta.rb + position});
	});
var $toastal$either$Either$Left = function (a) {
	return {$: 0, a: a};
};
var $author$project$Generic$Language$updateMetaInBlock = F2(
	function (updater, block) {
		var newBody = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				var str = _v0.a;
				return $toastal$either$Either$Left(str);
			} else {
				var exprs = _v0.a;
				return $toastal$either$Either$Right(
					A2(
						$elm$core$List$map,
						$author$project$Generic$Language$updateMeta(updater),
						exprs));
			}
		}();
		return _Utils_update(
			block,
			{qh: newBody});
	});
var $author$project$Generic$Language$boostBlock = function (block) {
	return A2(
		$author$project$Generic$Language$updateMetaInBlock,
		$author$project$Generic$Language$boost(block.nJ.sO),
		block);
};
var $author$project$Generic$Language$emptyExprMeta = {qb: 0, rb: 0, hg: 'id', jz: 0};
var $author$project$Generic$Pipeline$fixItemsAux = F2(
	function (acc, input) {
		var folder = F2(
			function (str, list) {
				if (A2(
					$elm$core$String$left,
					1,
					$elm$core$String$trimLeft(str)) === '-') {
					return A2(
						$elm$core$List$cons,
						A2(
							$elm$core$String$dropLeft,
							2,
							$elm$core$String$trimLeft(str)),
						list);
				} else {
					if (!list.b) {
						return _List_Nil;
					} else {
						var first = list.a;
						var rest = list.b;
						return A2($elm$core$List$cons, first + (' ' + str), rest);
					}
				}
			});
		return A3($elm$core$List$foldl, folder, acc, input);
	});
var $author$project$Generic$Pipeline$fixItems = function (list) {
	return $elm$core$List$reverse(
		A2($author$project$Generic$Pipeline$fixItemsAux, _List_Nil, list));
};
var $author$project$Generic$Pipeline$fixNumberedItemsAux = F2(
	function (acc, input) {
		var folder = F2(
			function (str, list) {
				if (A2(
					$elm$core$String$left,
					1,
					$elm$core$String$trimLeft(str)) === '.') {
					return A2(
						$elm$core$List$cons,
						A2(
							$elm$core$String$dropLeft,
							2,
							$elm$core$String$trimLeft(str)),
						list);
				} else {
					if (!list.b) {
						return _List_Nil;
					} else {
						var first = list.a;
						var rest = list.b;
						return A2($elm$core$List$cons, first + (' ' + str), rest);
					}
				}
			});
		return A3($elm$core$List$foldl, folder, acc, input);
	});
var $author$project$Generic$Pipeline$fixNumberedItems = function (list) {
	return $elm$core$List$reverse(
		A2($author$project$Generic$Pipeline$fixNumberedItemsAux, _List_Nil, list));
};
var $author$project$Generic$Pipeline$toExpressionBlock_ = F2(
	function (parse, primitiveBlock) {
		return {
			lv: primitiveBlock.lv,
			qh: function () {
				var _v0 = primitiveBlock.fC;
				switch (_v0.$) {
					case 0:
						return $toastal$either$Either$Right(
							parse(
								A2($elm$core$String$join, '\n', primitiveBlock.qh)));
					case 1:
						switch (_v0.a) {
							case 'itemList':
								var items = $author$project$Generic$Pipeline$fixItems(
									A2($elm$core$List$cons, primitiveBlock.ri, primitiveBlock.qh));
								var content_ = A2($elm$core$List$map, parse, items);
								return $toastal$either$Either$Right(
									A2(
										$elm$core$List$map,
										function (list) {
											return A2($author$project$Generic$Language$ExprList, list, $author$project$Generic$Language$emptyExprMeta);
										},
										content_));
							case 'numberedList':
								var items = $author$project$Generic$Pipeline$fixNumberedItems(
									A2($elm$core$List$cons, primitiveBlock.ri, primitiveBlock.qh));
								var content_ = A2(
									$elm$core$List$map,
									$author$project$M$Expression$parse(0),
									items);
								return $toastal$either$Either$Right(
									A2(
										$elm$core$List$map,
										function (list) {
											return A2($author$project$Generic$Language$ExprList, list, $author$project$Generic$Language$emptyExprMeta);
										},
										content_));
							default:
								return $toastal$either$Either$Right(
									parse(
										A2($elm$core$String$join, '\n', primitiveBlock.qh)));
						}
					default:
						return $toastal$either$Either$Left(
							A2($elm$core$String$join, '\n', primitiveBlock.qh));
				}
			}(),
			ri: primitiveBlock.ri,
			fC: primitiveBlock.fC,
			hh: primitiveBlock.hh,
			nJ: primitiveBlock.nJ,
			sS: A3($elm$core$Dict$insert, 'id', primitiveBlock.nJ.hg, primitiveBlock.sS),
			f3: primitiveBlock.f3
		};
	});
var $author$project$Generic$Pipeline$toExpressionBlock = F2(
	function (parser, block) {
		return $author$project$Generic$Language$boostBlock(
			A2(
				$author$project$Generic$Pipeline$toExpressionBlock_,
				parser(block.nJ.jR),
				block));
	});
var $author$project$ScriptaV2$DifferentialCompiler$toExprBlock = function (lang) {
	switch (lang) {
		case 0:
			return $author$project$Generic$Pipeline$toExpressionBlock($author$project$MicroLaTeX$Expression$parse);
		case 1:
			return $author$project$Generic$Pipeline$toExpressionBlock($author$project$M$Expression$parse);
		case 2:
			return $author$project$Generic$Pipeline$toExpressionBlock($author$project$XMarkdown$Expression$parse);
		default:
			return function (primitiveBlock) {
				return {
					lv: _List_Nil,
					qh: $toastal$either$Either$Right(_List_Nil),
					ri: '',
					fC: $author$project$Generic$Language$Paragraph,
					hh: 0,
					nJ: $author$project$Generic$Language$emptyBlockMeta,
					sS: $elm$core$Dict$empty,
					f3: $elm$core$Maybe$Nothing
				};
			};
	}
};
var $author$project$Generic$Acc$SNotInList = 1;
var $author$project$Generic$Vector$init = function (k) {
	return {
		iV: A2($elm$core$List$repeat, k, 0),
		eJ: k
	};
};
var $author$project$Generic$Settings$numberedBlockNames = _List_fromArray(
	['q', 'axiom', 'box', 'theorem', 'definition', 'lemma', 'construction', 'principle', 'proposition', 'corollary', 'note', 'remark', 'exercise', 'question', 'problem', 'example', 'equation', 'aligned', 'quiver', 'image', 'iframe', 'chart']);
var $author$project$ETeX$MathMacros$MacroBody = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$ETeX$Transform$findMaxParamInMathMacros = function (exprs) {
	findMaxParamInMathMacros:
	while (true) {
		_v0$7:
		while (true) {
			if (!exprs.b) {
				return 0;
			} else {
				switch (exprs.a.$) {
					case 6:
						var n = exprs.a.a;
						var rest = exprs.b;
						return A2(
							$elm$core$Basics$max,
							n,
							$author$project$ETeX$Transform$findMaxParamInMathMacros(rest));
					case 3:
						var innerExprs = exprs.a.a;
						var rest = exprs.b;
						return A2(
							$elm$core$Basics$max,
							$author$project$ETeX$Transform$findMaxParamInMathMacros(innerExprs),
							$author$project$ETeX$Transform$findMaxParamInMathMacros(rest));
					case 14:
						var _v1 = exprs.a;
						var args = _v1.b;
						var rest = exprs.b;
						return A2(
							$elm$core$Basics$max,
							$author$project$ETeX$Transform$findMaxParamInMathMacros(args),
							$author$project$ETeX$Transform$findMaxParamInMathMacros(rest));
					case 15:
						var innerExprs = exprs.a.a;
						var rest = exprs.b;
						return A2(
							$elm$core$Basics$max,
							$author$project$ETeX$Transform$findMaxParamInMathMacros(innerExprs),
							$author$project$ETeX$Transform$findMaxParamInMathMacros(rest));
					case 4:
						if (!exprs.a.a.$) {
							var expr = exprs.a.a.a;
							var rest = exprs.b;
							return A2(
								$elm$core$Basics$max,
								$author$project$ETeX$Transform$findMaxParamInMathMacros(
									_List_fromArray(
										[expr])),
								$author$project$ETeX$Transform$findMaxParamInMathMacros(rest));
						} else {
							break _v0$7;
						}
					case 5:
						if (!exprs.a.a.$) {
							var expr = exprs.a.a.a;
							var rest = exprs.b;
							return A2(
								$elm$core$Basics$max,
								$author$project$ETeX$Transform$findMaxParamInMathMacros(
									_List_fromArray(
										[expr])),
								$author$project$ETeX$Transform$findMaxParamInMathMacros(rest));
						} else {
							break _v0$7;
						}
					default:
						break _v0$7;
				}
			}
		}
		var rest = exprs.b;
		var $temp$exprs = rest;
		exprs = $temp$exprs;
		continue findMaxParamInMathMacros;
	}
};
var $author$project$ETeX$Transform$makeEntry = function (newCommand_) {
	if (((((!newCommand_.$) && (newCommand_.a.a.$ === 1)) && newCommand_.a.c.b) && (newCommand_.a.c.a.$ === 3)) && (!newCommand_.a.c.b.b)) {
		var _v1 = newCommand_.a;
		var name = _v1.a.a;
		var arity = _v1.b;
		var _v2 = _v1.c;
		var body = _v2.a.a;
		var deducedArity = (arity > 0) ? arity : $author$project$ETeX$Transform$findMaxParamInMathMacros(body);
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				name,
				A2($author$project$ETeX$MathMacros$MacroBody, deducedArity, body)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$ETeX$Transform$ExpectingLeftBrace = 0;
var $author$project$ETeX$Transform$ExpectingNewCommand = 20;
var $author$project$ETeX$Transform$ExpectingRightBrace = 17;
var $author$project$ETeX$MathMacros$NewCommand = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$ETeX$MathMacros$AlphaNum = function (a) {
	return {$: 0, a: a};
};
var $author$project$ETeX$MathMacros$Arg = function (a) {
	return {$: 3, a: a};
};
var $author$project$ETeX$MathMacros$Comma = {$: 16};
var $author$project$ETeX$MathMacros$DecoI = function (a) {
	return {$: 1, a: a};
};
var $author$project$ETeX$MathMacros$DecoM = function (a) {
	return {$: 0, a: a};
};
var $author$project$ETeX$MathMacros$Expr = function (a) {
	return {$: 15, a: a};
};
var $author$project$ETeX$MathMacros$LeftMathBrace = {$: 11};
var $author$project$ETeX$MathMacros$LeftParen = {$: 17};
var $author$project$ETeX$MathMacros$Macro = F2(
	function (a, b) {
		return {$: 14, a: a, b: b};
	});
var $author$project$ETeX$MathMacros$MacroName = function (a) {
	return {$: 1, a: a};
};
var $author$project$ETeX$MathMacros$MathMediumSpace = {$: 10};
var $author$project$ETeX$MathMacros$MathSmallSpace = {$: 9};
var $author$project$ETeX$MathMacros$MathSpace = {$: 8};
var $author$project$ETeX$MathMacros$MathSymbols = function (a) {
	return {$: 13, a: a};
};
var $author$project$ETeX$MathMacros$Param = function (a) {
	return {$: 6, a: a};
};
var $author$project$ETeX$MathMacros$RightMathBrace = {$: 12};
var $author$project$ETeX$MathMacros$RightParen = {$: 18};
var $author$project$ETeX$MathMacros$Sub = function (a) {
	return {$: 4, a: a};
};
var $author$project$ETeX$MathMacros$Super = function (a) {
	return {$: 5, a: a};
};
var $author$project$ETeX$MathMacros$WS = {$: 7};
var $author$project$ETeX$Transform$convertToETeXDeco = function (deco) {
	if (!deco.$) {
		var mathExpr = deco.a;
		return $author$project$ETeX$MathMacros$DecoM(
			$author$project$ETeX$Transform$convertToETeXMathExpr(mathExpr));
	} else {
		var n = deco.a;
		return $author$project$ETeX$MathMacros$DecoI(n);
	}
};
var $author$project$ETeX$Transform$convertToETeXMathExpr = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return $author$project$ETeX$MathMacros$AlphaNum(str);
		case 1:
			var str = expr.a;
			return $author$project$ETeX$MathMacros$MacroName(str);
		case 7:
			var n = expr.a;
			return $author$project$ETeX$MathMacros$Param(n);
		case 8:
			return $author$project$ETeX$MathMacros$WS;
		case 9:
			return $author$project$ETeX$MathMacros$MathSpace;
		case 10:
			return $author$project$ETeX$MathMacros$MathSmallSpace;
		case 11:
			return $author$project$ETeX$MathMacros$MathMediumSpace;
		case 12:
			return $author$project$ETeX$MathMacros$LeftMathBrace;
		case 13:
			return $author$project$ETeX$MathMacros$RightMathBrace;
		case 17:
			var str = expr.a;
			return $author$project$ETeX$MathMacros$MathSymbols(str);
		case 2:
			var exprs = expr.a;
			return $author$project$ETeX$MathMacros$Arg(
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, exprs));
		case 3:
			var exprs = expr.a;
			return $author$project$ETeX$MathMacros$Arg(
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, exprs));
		case 4:
			var exprs = expr.a;
			return $author$project$ETeX$MathMacros$Expr(
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, exprs));
		case 5:
			var decoExpr = expr.a;
			return $author$project$ETeX$MathMacros$Sub(
				$author$project$ETeX$Transform$convertToETeXDeco(decoExpr));
		case 6:
			var decoExpr = expr.a;
			return $author$project$ETeX$MathMacros$Super(
				$author$project$ETeX$Transform$convertToETeXDeco(decoExpr));
		case 18:
			var name = expr.a;
			var args = expr.b;
			return A2(
				$author$project$ETeX$MathMacros$Macro,
				name,
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, args));
		case 19:
			var name = expr.a;
			var args = expr.b;
			return A2(
				$author$project$ETeX$MathMacros$Macro,
				name,
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, args));
		case 20:
			var exprs = expr.a;
			return $author$project$ETeX$MathMacros$Expr(
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, exprs));
		case 14:
			return $author$project$ETeX$MathMacros$LeftParen;
		case 15:
			return $author$project$ETeX$MathMacros$RightParen;
		case 16:
			return $author$project$ETeX$MathMacros$Comma;
		default:
			var str = expr.a;
			return $author$project$ETeX$MathMacros$MathSymbols(str);
	}
};
var $author$project$ETeX$Transform$ExpectingBackslash = 19;
var $author$project$ETeX$Transform$F0 = function (a) {
	return {$: 1, a: a};
};
var $author$project$ETeX$Transform$ExpectingAlpha = 1;
var $author$project$ETeX$Transform$alphaNumParser_ = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getOffset,
					A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isAlpha, 1)),
				$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isAlphaNum))),
		$elm$parser$Parser$Advanced$getOffset),
	$elm$parser$Parser$Advanced$getSource);
var $author$project$ETeX$Transform$second = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (_v0) {
				return q;
			},
			p);
	});
var $author$project$ETeX$Transform$f0Parser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$ETeX$Transform$F0,
	A2(
		$author$project$ETeX$Transform$second,
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\\', 19)),
		$author$project$ETeX$Transform$alphaNumParser_));
var $author$project$ETeX$Transform$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					p),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$ETeX$Transform$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$ETeX$Transform$manyHelp(p));
};
var $author$project$ETeX$Transform$AlphaNum = function (a) {
	return {$: 0, a: a};
};
var $author$project$ETeX$Transform$Arg = function (a) {
	return {$: 2, a: a};
};
var $author$project$ETeX$Transform$DecoM = function (a) {
	return {$: 0, a: a};
};
var $author$project$ETeX$Transform$ExpectingCaret = 15;
var $author$project$ETeX$Transform$ExpectingLeftParen = 12;
var $author$project$ETeX$Transform$ExpectingRightParen = 13;
var $author$project$ETeX$Transform$ExpectingUnderscore = 14;
var $author$project$ETeX$Transform$FCall = F2(
	function (a, b) {
		return {$: 19, a: a, b: b};
	});
var $author$project$ETeX$Transform$Macro = F2(
	function (a, b) {
		return {$: 18, a: a, b: b};
	});
var $author$project$ETeX$Transform$PArg = function (a) {
	return {$: 3, a: a};
};
var $author$project$ETeX$Transform$ParenthExpr = function (a) {
	return {$: 4, a: a};
};
var $author$project$ETeX$Transform$Sub = function (a) {
	return {$: 5, a: a};
};
var $author$project$ETeX$Transform$Super = function (a) {
	return {$: 6, a: a};
};
var $author$project$ETeX$KaTeX$accents = _List_fromArray(
	['hat', 'widehat', 'check', 'widecheck', 'tilde', 'widetilde', 'acute', 'grave', 'dot', 'ddot', 'breve', 'bar', 'vec', 'mathring', 'overline', 'underline', 'overleftarrow', 'overrightarrow', 'overleftrightarrow', 'underleftarrow', 'underrightarrow', 'underleftrightarrow', 'overgroup', 'undergroup', 'overbrace', 'underbrace', 'overparen', 'underparen', 'overrightleftharpoons', 'boxed', 'underlinesegment', 'overlinesegment']);
var $author$project$ETeX$KaTeX$arrows = _List_fromArray(
	['leftarrow', 'gets', 'rightarrow', 'to', 'leftrightarrow', 'Leftarrow', 'Rightarrow', 'Leftrightarrow', 'iff', 'uparrow', 'downarrow', 'updownarrow', 'Uparrow', 'Downarrow', 'Updownarrow', 'mapsto', 'hookleftarrow', 'hookrightarrow', 'leftharpoonup', 'rightharpoonup', 'leftharpoondown', 'rightharpoondown', 'rightleftharpoons', 'longleftarrow', 'longrightarrow', 'longleftrightarrow', 'Longleftarrow', 'impliedby', 'Longrightarrow', 'implies', 'Longleftrightarrow', 'longmapsto', 'nearrow', 'searrow', 'swarrow', 'nwarrow', 'dashleftarrow', 'dashrightarrow', 'leftleftarrows', 'rightrightarrows', 'leftrightarrows', 'rightleftarrows', 'Lleftarrow', 'Rrightarrow', 'twoheadleftarrow', 'twoheadrightarrow', 'leftarrowtail', 'rightarrowtail', 'looparrowleft', 'looparrowright', 'curvearrowleft', 'curvearrowright', 'circlearrowleft', 'circlearrowright', 'multimap', 'leftrightsquigarrow', 'rightsquigarrow', 'leadsto', 'restriction']);
var $author$project$ETeX$KaTeX$bigOperators = _List_fromArray(
	['sum', 'prod', 'coprod', 'bigcup', 'bigcap', 'bigvee', 'bigwedge', 'bigoplus', 'bigotimes', 'bigodot', 'biguplus', 'bigsqcup', 'int', 'oint', 'iint', 'iiint', 'iiiint', 'intop', 'smallint']);
var $author$project$ETeX$KaTeX$binaryOperators = _List_fromArray(
	['pm', 'mp', 'times', 'div', 'cdot', 'ast', 'star', 'circ', 'bullet', 'oplus', 'ominus', 'otimes', 'oslash', 'odot', 'dagger', 'ddagger', 'vee', 'lor', 'wedge', 'land', 'cap', 'cup', 'setminus', 'smallsetminus', 'triangleleft', 'triangleright', 'bigtriangleup', 'bigtriangledown', 'lhd', 'rhd', 'unlhd', 'unrhd', 'amalg', 'uplus', 'sqcap', 'sqcup', 'boxplus', 'boxminus', 'boxtimes', 'boxdot', 'leftthreetimes', 'rightthreetimes', 'curlyvee', 'curlywedge', 'dotplus', 'divideontimes', 'doublebarwedge']);
var $author$project$ETeX$KaTeX$binomials = _List_fromArray(
	['binom', 'dbinom', 'tbinom', 'brace', 'brack']);
var $author$project$ETeX$KaTeX$delimiters = _List_fromArray(
	['lbrace', 'rbrace', 'lbrack', 'rbrack', 'langle', 'rangle', 'vert', 'Vert', 'lvert', 'rvert', 'lVert', 'rVert', 'lfloor', 'rfloor', 'lceil', 'rceil', 'lgroup', 'rgroup', 'lmoustache', 'rmoustache', 'ulcorner', 'urcorner', 'llcorner', 'lrcorner']);
var $author$project$ETeX$KaTeX$fonts = _List_fromArray(
	['mathrm', 'mathit', 'mathbf', 'boldsymbol', 'pmb', 'mathbb', 'Bbb', 'mathcal', 'cal', 'mathscr', 'scr', 'mathfrak', 'frak', 'mathsf', 'sf', 'mathtt', 'tt', 'mathnormal', 'text', 'textbf', 'textit', 'textrm', 'textsf', 'texttt', 'textnormal', 'textup', 'operatorname', 'operatorname*']);
var $author$project$ETeX$KaTeX$fractions = _List_fromArray(
	['frac', 'dfrac', 'tfrac', 'cfrac', 'genfrac', 'over', 'atop', 'choose']);
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$ETeX$KaTeX$greekLetters = _List_fromArray(
	['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'varepsilon', 'zeta', 'eta', 'theta', 'vartheta', 'iota', 'kappa', 'varkappa', 'lambda', 'mu', 'nu', 'xi', 'pi', 'varpi', 'rho', 'varrho', 'sigma', 'varsigma', 'tau', 'upsilon', 'phi', 'varphi', 'chi', 'psi', 'omega', 'Gamma', 'Delta', 'Theta', 'Lambda', 'Xi', 'Pi', 'Sigma', 'Upsilon', 'Phi', 'Psi', 'Omega', 'digamma', 'varGamma', 'varDelta', 'varTheta', 'varLambda', 'varXi', 'varPi', 'varSigma', 'varUpsilon', 'varPhi', 'varPsi', 'varOmega']);
var $author$project$ETeX$KaTeX$logicAndSetTheory = _List_fromArray(
	['forall', 'exists', 'nexists', 'complement', 'subset', 'supset', 'mid', 'nmid', 'notsubset', 'nsubset', 'nsupset', 'nsupseteq', 'nsubseteq', 'subsetneq', 'supsetneq', 'subsetneqq', 'supsetneqq', 'varsubsetneq', 'varsupsetneq', 'varsubsetneqq', 'varsupsetneqq', 'isin', 'notin', 'notni', 'niton', 'in', 'ni', 'emptyset', 'varnothing', 'setminus', 'smallsetminus', 'complement', 'neg', 'lnot']);
var $author$project$ETeX$KaTeX$mathFunctions = _List_fromArray(
	['sin', 'cos', 'tan', 'cot', 'sec', 'csc', 'sinh', 'cosh', 'tanh', 'coth', 'sech', 'csch', 'arcsin', 'arccos', 'arctan', 'arctg', 'arcctg', 'ln', 'log', 'lg', 'exp', 'deg', 'det', 'dim', 'hom', 'ker', 'lim', 'liminf', 'limsup', 'max', 'min', 'sup', 'inf', 'Pr', 'gcd', 'lcm', 'arg', 'mod', 'bmod', 'pmod', 'pod']);
var $author$project$ETeX$KaTeX$miscSymbols = _List_fromArray(
	['infty', 'aleph', 'beth', 'gimel', 'daleth', 'eth', 'hbar', 'hslash', 'Finv', 'Game', 'ell', 'wp', 'Re', 'Im', 'partial', 'nabla', 'Box', 'square', 'blacksquare', 'blacklozenge', 'lozenge', 'Diamond', 'triangle', 'triangledown', 'angle', 'measuredangle', 'sphericalangle', 'prime', 'backprime', 'degree', 'flat', 'natural', 'sharp', 'surd', 'top', 'bot', 'emptyset', 'varnothing', 'clubsuit', 'diamondsuit', 'heartsuit', 'spadesuit', 'blacktriangleright', 'blacktriangleleft', 'blacktriangledown', 'blacktriangle', 'bigstar', 'maltese', 'checkmark', 'diagup', 'diagdown', 'ddag', 'dag', 'copyright', 'circledR', 'pounds', 'yen', 'euro', 'cent', 'maltese']);
var $author$project$ETeX$KaTeX$relationSymbols = _List_fromArray(
	['leq', 'le', 'geq', 'ge', 'neq', 'ne', 'sim', 'simeq', 'approx', 'cong', 'equiv', 'prec', 'succ', 'preceq', 'succeq', 'll', 'gg', 'subset', 'supset', 'subseteq', 'supseteq', 'nsubseteq', 'nsupseteq', 'sqsubset', 'sqsupset', 'sqsubseteq', 'sqsupseteq', 'in', 'ni', 'notin', 'notni', 'propto', 'varpropto', 'perp', 'parallel', 'nparallel', 'smile', 'frown', 'doteq', 'fallingdotseq', 'risingdotseq', 'coloneq', 'eqcirc', 'circeq', 'triangleq', 'bumpeq', 'Bumpeq', 'doteqdot', 'thicksim', 'thickapprox', 'approxeq', 'backsim', 'backsimeq', 'preccurlyeq', 'succcurlyeq', 'curlyeqprec', 'curlyeqsucc', 'precsim', 'succsim', 'precapprox', 'succapprox', 'vartriangleleft', 'vartriangleright', 'trianglelefteq', 'trianglerighteq', 'between', 'pitchfork', 'shortmid', 'shortparallel', 'therefore', 'because', 'eqcolon', 'simcolon', 'approxcolon', 'colonapprox', 'colonsim', 'Colon', 'ratio']);
var $author$project$ETeX$KaTeX$roots = _List_fromArray(
	['sqrt', 'sqrtsign']);
var $author$project$ETeX$KaTeX$spacing = _List_fromArray(
	['quad', 'qquad', 'space', 'thinspace', 'medspace', 'thickspace', 'enspace', 'negspace', 'negmedspace', 'negthickspace', 'negthinspace', 'mkern', 'mskip', 'hskip', 'hspace', 'hspace*', 'kern', 'phantom', 'hphantom', 'vphantom', 'mathstrut', 'strut', '!', ':', ';', ',']);
var $author$project$ETeX$KaTeX$textOperators = _List_fromArray(
	['not', 'cancel', 'bcancel', 'xcancel', 'cancelto', 'sout', 'overline', 'underline', 'overset', 'underset', 'stackrel', 'atop', 'substack', 'sideset']);
var $author$project$ETeX$KaTeX$katexCommands = $elm$core$Set$fromList(
	$elm$core$List$concat(
		_List_fromArray(
			[$author$project$ETeX$KaTeX$greekLetters, $author$project$ETeX$KaTeX$binaryOperators, $author$project$ETeX$KaTeX$relationSymbols, $author$project$ETeX$KaTeX$arrows, $author$project$ETeX$KaTeX$delimiters, $author$project$ETeX$KaTeX$bigOperators, $author$project$ETeX$KaTeX$mathFunctions, $author$project$ETeX$KaTeX$accents, $author$project$ETeX$KaTeX$fonts, $author$project$ETeX$KaTeX$spacing, $author$project$ETeX$KaTeX$logicAndSetTheory, $author$project$ETeX$KaTeX$miscSymbols, $author$project$ETeX$KaTeX$fractions, $author$project$ETeX$KaTeX$binomials, $author$project$ETeX$KaTeX$roots, $author$project$ETeX$KaTeX$textOperators])));
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $author$project$ETeX$KaTeX$isKaTeX = function (command) {
	return A2($elm$core$Set$member, command, $author$project$ETeX$KaTeX$katexCommands);
};
var $author$project$ETeX$Transform$isUserDefinedMacro = F2(
	function (dict, name) {
		return A2($elm$core$Dict$member, name, dict);
	});
var $author$project$ETeX$Transform$alphaNumOrMacroParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (name) {
			return ($author$project$ETeX$KaTeX$isKaTeX(name) || A2($author$project$ETeX$Transform$isUserDefinedMacro, userMacroDict, name)) ? A2($author$project$ETeX$Transform$Macro, name, _List_Nil) : $author$project$ETeX$Transform$AlphaNum(name);
		},
		$author$project$ETeX$Transform$alphaNumParser_);
};
var $author$project$ETeX$Transform$Comma = {$: 16};
var $author$project$ETeX$Transform$ExpectingComma = 21;
var $author$project$ETeX$Transform$commaParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$Comma),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, ',', 21)));
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return function (s) {
		var _v0 = thunk(0);
		var parse = _v0;
		return parse(s);
	};
};
var $author$project$ETeX$Transform$ExpectingLeftMathBrace = 10;
var $author$project$ETeX$Transform$LeftMathBrace = {$: 12};
var $author$project$ETeX$Transform$leftBraceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$LeftMathBrace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\{', 10)));
var $author$project$ETeX$Transform$many1 = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$List$cons),
			p),
		$author$project$ETeX$Transform$many(p));
};
var $author$project$ETeX$Transform$ExpectingMathMediumSpace = 6;
var $author$project$ETeX$Transform$MathMediumSpace = {$: 11};
var $author$project$ETeX$Transform$mathMediumSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$MathMediumSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\;', 6)));
var $author$project$ETeX$Transform$ExpectingMathSmallSpace = 5;
var $author$project$ETeX$Transform$MathSmallSpace = {$: 10};
var $author$project$ETeX$Transform$mathSmallSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$MathSmallSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\,', 5)));
var $author$project$ETeX$Transform$ExpectingMathSpace = 8;
var $author$project$ETeX$Transform$MathSpace = {$: 9};
var $author$project$ETeX$Transform$mathSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$MathSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\ ', 8)));
var $author$project$ETeX$Transform$ExpectingNotAlpha = 2;
var $author$project$ETeX$Transform$MathSymbols = function (a) {
	return {$: 17, a: a};
};
var $author$project$ETeX$Transform$mathSymbolsParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$ETeX$Transform$MathSymbols,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$getOffset,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							function (c) {
								return (!$elm$core$Char$isAlpha(c)) && (!A2(
									$elm$core$List$member,
									c,
									_List_fromArray(
										['_', '^', '#', '\\', '{', '}', '(', ')', ',', '\"'])));
							},
							2)),
					$elm$parser$Parser$Advanced$chompWhile(
						function (c) {
							return (!$elm$core$Char$isAlpha(c)) && (!A2(
								$elm$core$List$member,
								c,
								_List_fromArray(
									['_', '^', '#', '\\', '{', '}', '(', ')', ',', '\"'])));
						}))),
			$elm$parser$Parser$Advanced$getOffset),
		$elm$parser$Parser$Advanced$getSource));
var $author$project$ETeX$Transform$DecoI = function (a) {
	return {$: 1, a: a};
};
var $author$project$ETeX$Transform$ExpectingInt = 3;
var $author$project$ETeX$Transform$InvalidNumber = 4;
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {lW: s.lW + (newOffset - s.e), n: s.n, hh: s.hh, e: newOffset, ta: s.ta, oV: s.oV};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 1) {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.e, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.oV);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.ta, s.lW - (floatOffset + s.e), invalid, s.n));
		} else {
			if (_Utils_eq(s.e, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.e, intPair, s);
				} else {
					if (floatSettings.$ === 1) {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.e, floatOffset, s.oV));
						if (_v1.$ === 1) {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return function (s) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.e, s.oV)) {
			var zeroOffset = s.e + 1;
			var baseOffset = zeroOffset + 1;
			return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.oV) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.rO,
				c.rs,
				baseOffset,
				A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.oV),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.oV) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.rO,
				c.n$,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.oV),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.oV) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.rO,
				c.lD,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.oV),
				s) : A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.rO,
				c.mq,
				c.m3,
				c.my,
				_Utils_Tuple2(zeroOffset, 0),
				s)));
		} else {
			return A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.rO,
				c.mq,
				c.m3,
				c.my,
				A3($elm$parser$Parser$Advanced$consumeBase, 10, s.e, s.oV),
				s);
		}
	};
};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				lD: $elm$core$Result$Err(invalid),
				mq: expecting,
				my: $elm$core$Result$Err(invalid),
				rs: $elm$core$Result$Err(invalid),
				m3: $elm$core$Result$Ok($elm$core$Basics$identity),
				rO: invalid,
				n$: $elm$core$Result$Err(invalid)
			});
	});
var $author$project$ETeX$Transform$numericDecoParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$ETeX$Transform$DecoI,
	A2($elm$parser$Parser$Advanced$int, 3, 4));
var $author$project$ETeX$Transform$ExpectingHash = 18;
var $author$project$ETeX$Transform$Param = function (a) {
	return {$: 7, a: a};
};
var $author$project$ETeX$Transform$paramParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$ETeX$Transform$Param,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '#', 18))),
		A2($elm$parser$Parser$Advanced$int, 3, 4)));
var $author$project$ETeX$Transform$ExpectingRightMathBrace = 11;
var $author$project$ETeX$Transform$RightMathBrace = {$: 13};
var $author$project$ETeX$Transform$rightBraceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$RightMathBrace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\}', 11)));
var $author$project$ETeX$Transform$sepByCommaHelp = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (item) {
								return $elm$parser$Parser$Advanced$Loop(
									A2(
										$elm$core$List$cons,
										item,
										A2($elm$core$List$cons, $author$project$ETeX$Transform$Comma, revItems)));
							}),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, ',', 21))),
					itemParser),
					$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(revItems)))
				]));
	});
var $author$project$ETeX$Transform$sepByComma = function (itemParser) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$andThen,
				function (firstItem) {
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[firstItem]),
						$author$project$ETeX$Transform$sepByCommaHelp(itemParser));
				},
				itemParser),
				$elm$parser$Parser$Advanced$succeed(_List_Nil)
			]));
};
var $author$project$ETeX$Transform$ExpectingQuote = 22;
var $author$project$ETeX$Transform$Text = function (a) {
	return {$: 21, a: a};
};
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.e, s1.e, s0.oV),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $author$project$ETeX$Transform$textParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$Text),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\"', 22))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return c !== '\"';
				})),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\"', 22))));
var $author$project$ETeX$Transform$ExpectingSpace = 16;
var $author$project$ETeX$Transform$WS = {$: 8};
var $author$project$ETeX$Transform$whitespaceParser = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$ETeX$Transform$WS;
	},
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, ' ', 16)));
var $author$project$ETeX$Transform$alphaNumWithLookaheadParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (name) {
			return $elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$map,
						function (args) {
							return ($author$project$ETeX$KaTeX$isKaTeX(name) || A2($author$project$ETeX$Transform$isUserDefinedMacro, userMacroDict, name)) ? A2($author$project$ETeX$Transform$Macro, name, args) : A2($author$project$ETeX$Transform$FCall, name, args);
						},
						$author$project$ETeX$Transform$functionArgsParser(userMacroDict)),
						$elm$parser$Parser$Advanced$succeed(
						($author$project$ETeX$KaTeX$isKaTeX(name) || A2($author$project$ETeX$Transform$isUserDefinedMacro, userMacroDict, name)) ? A2($author$project$ETeX$Transform$Macro, name, _List_Nil) : $author$project$ETeX$Transform$AlphaNum(name))
					]));
		},
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$author$project$ETeX$Transform$alphaNumParser_));
};
var $author$project$ETeX$Transform$argParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$ETeX$Transform$Arg,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '{', 0))),
				$elm$parser$Parser$Advanced$lazy(
					function (_v7) {
						return $author$project$ETeX$Transform$many(
							$author$project$ETeX$Transform$mathExprParser(userMacroDict));
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', 17))));
};
var $author$project$ETeX$Transform$decoParser = function (userMacroDict) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$ETeX$Transform$numericDecoParser,
				A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$ETeX$Transform$DecoM,
				$elm$parser$Parser$Advanced$lazy(
					function (_v6) {
						return $author$project$ETeX$Transform$mathExprParser(userMacroDict);
					}))
			]));
};
var $author$project$ETeX$Transform$functionArgListParser = function (userMacroDict) {
	var argContentParser = $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$ETeX$Transform$textParser,
				$author$project$ETeX$Transform$mathMediumSpaceParser,
				$author$project$ETeX$Transform$mathSmallSpaceParser,
				$author$project$ETeX$Transform$mathSpaceParser,
				$author$project$ETeX$Transform$leftBraceParser,
				$author$project$ETeX$Transform$rightBraceParser,
				$author$project$ETeX$Transform$macroParser(userMacroDict),
				$author$project$ETeX$Transform$alphaNumOrMacroParser(userMacroDict),
				$author$project$ETeX$Transform$mathSymbolsParser,
				$elm$parser$Parser$Advanced$lazy(
				function (_v4) {
					return $author$project$ETeX$Transform$argParser(userMacroDict);
				}),
				$elm$parser$Parser$Advanced$lazy(
				function (_v5) {
					return $author$project$ETeX$Transform$standaloneParenthExprParser(userMacroDict);
				}),
				$author$project$ETeX$Transform$paramParser,
				$author$project$ETeX$Transform$whitespaceParser,
				$author$project$ETeX$Transform$f0Parser,
				$author$project$ETeX$Transform$subscriptParser(userMacroDict),
				$author$project$ETeX$Transform$superscriptParser(userMacroDict)
			]));
	return $author$project$ETeX$Transform$sepByComma(
		A2(
			$elm$parser$Parser$Advanced$map,
			$author$project$ETeX$Transform$PArg,
			$author$project$ETeX$Transform$many1(argContentParser)));
};
var $author$project$ETeX$Transform$functionArgsParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '(', 12))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$lazy(
				function (_v3) {
					return $author$project$ETeX$Transform$functionArgListParser(userMacroDict);
				}),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, ')', 13))));
};
var $author$project$ETeX$Transform$macroParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$ETeX$Transform$Macro),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\', 19))),
			$author$project$ETeX$Transform$alphaNumParser_),
		$author$project$ETeX$Transform$many(
			$author$project$ETeX$Transform$argParser(userMacroDict)));
};
var $author$project$ETeX$Transform$mathExprParser = function (userMacroDict) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$ETeX$Transform$textParser,
				$author$project$ETeX$Transform$mathMediumSpaceParser,
				$author$project$ETeX$Transform$mathSmallSpaceParser,
				$author$project$ETeX$Transform$mathSpaceParser,
				$author$project$ETeX$Transform$leftBraceParser,
				$author$project$ETeX$Transform$rightBraceParser,
				$author$project$ETeX$Transform$macroParser(userMacroDict),
				$author$project$ETeX$Transform$alphaNumWithLookaheadParser(userMacroDict),
				$elm$parser$Parser$Advanced$lazy(
				function (_v1) {
					return $author$project$ETeX$Transform$standaloneParenthExprParser(userMacroDict);
				}),
				$author$project$ETeX$Transform$commaParser,
				$author$project$ETeX$Transform$mathSymbolsParser,
				$elm$parser$Parser$Advanced$lazy(
				function (_v2) {
					return $author$project$ETeX$Transform$argParser(userMacroDict);
				}),
				$author$project$ETeX$Transform$paramParser,
				$author$project$ETeX$Transform$whitespaceParser,
				$author$project$ETeX$Transform$f0Parser,
				$author$project$ETeX$Transform$subscriptParser(userMacroDict),
				$author$project$ETeX$Transform$superscriptParser(userMacroDict)
			]));
};
var $author$project$ETeX$Transform$standaloneParenthExprParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$ETeX$Transform$ParenthExpr,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '(', 12))),
				$elm$parser$Parser$Advanced$lazy(
					function (_v0) {
						return $author$project$ETeX$Transform$many(
							$author$project$ETeX$Transform$mathExprParser(userMacroDict));
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, ')', 13))));
};
var $author$project$ETeX$Transform$subscriptParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$ETeX$Transform$Sub,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '_', 14))),
			$author$project$ETeX$Transform$decoParser(userMacroDict)));
};
var $author$project$ETeX$Transform$superscriptParser = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$ETeX$Transform$Super,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '^', 15))),
			$author$project$ETeX$Transform$decoParser(userMacroDict)));
};
var $author$project$ETeX$Transform$ExpectingLeftBracket = 7;
var $author$project$ETeX$Transform$ExpectingRightBracket = 9;
var $author$project$ETeX$Transform$optionalParamParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '[', 7))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$int, 3, 4),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, ']', 9))));
var $author$project$ETeX$Transform$newCommandParser1 = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (name, arity, body) {
									return A3(
										$author$project$ETeX$MathMacros$NewCommand,
										$author$project$ETeX$Transform$convertToETeXMathExpr(name),
										arity,
										A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, body));
								})),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, '\\newcommand', 20))),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '{', 0))),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$ETeX$Transform$f0Parser,
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '}', 17)))),
			$author$project$ETeX$Transform$optionalParamParser),
		$author$project$ETeX$Transform$many(
			$author$project$ETeX$Transform$mathExprParser(userMacroDict)));
};
var $author$project$ETeX$Transform$newCommandParser2 = function (userMacroDict) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F2(
							function (name, body) {
								return A3(
									$author$project$ETeX$MathMacros$NewCommand,
									$author$project$ETeX$Transform$convertToETeXMathExpr(name),
									0,
									A2($elm$core$List$map, $author$project$ETeX$Transform$convertToETeXMathExpr, body));
							})),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '\\newcommand', 20))),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '{', 0))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$ETeX$Transform$f0Parser,
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '}', 17)))),
		$author$project$ETeX$Transform$many(
			$author$project$ETeX$Transform$mathExprParser(userMacroDict)));
};
var $author$project$ETeX$Transform$newCommandParser = function (userMacroDict) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				$author$project$ETeX$Transform$newCommandParser1(userMacroDict)),
				$author$project$ETeX$Transform$newCommandParser2(userMacroDict)
			]));
};
var $author$project$ETeX$Transform$parseNewCommand = F2(
	function (userMacroDict, str) {
		return A2(
			$elm$parser$Parser$Advanced$run,
			$author$project$ETeX$Transform$newCommandParser(userMacroDict),
			str);
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $author$project$ETeX$Transform$SimpleBrace = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$ETeX$Transform$SimpleSpace = function (a) {
	return {$: 2, a: a};
};
var $author$project$ETeX$Transform$SimpleSymbol = function (a) {
	return {$: 3, a: a};
};
var $author$project$ETeX$Transform$SimpleWord = function (a) {
	return {$: 0, a: a};
};
var $author$project$ETeX$Transform$tokenToString = function (token) {
	switch (token.$) {
		case 0:
			var word = token.a;
			return word;
		case 1:
			return '\\';
		case 2:
			var s = token.a;
			return s;
		case 3:
			var s = token.a;
			return s;
		case 4:
			var open = token.a;
			var content = token.b;
			return open + (content + '}');
		default:
			var n = token.a;
			return '#' + $elm$core$String$fromInt(n);
	}
};
var $author$project$ETeX$Transform$convertArgsToBraces = function (args) {
	return A2(
		$elm$core$List$map,
		function (arg) {
			return A2(
				$author$project$ETeX$Transform$SimpleBrace,
				'{',
				$elm$core$String$concat(
					A2($elm$core$List$map, $author$project$ETeX$Transform$tokenToString, arg)));
		},
		args);
};
var $author$project$ETeX$Transform$extractParenArgs = F2(
	function (tokens, currentArg) {
		extractParenArgs:
		while (true) {
			_v0$3:
			while (true) {
				if (!tokens.b) {
					return $elm$core$List$isEmpty(currentArg) ? _Utils_Tuple2(_List_Nil, _List_Nil) : _Utils_Tuple2(
						_List_fromArray(
							[
								$elm$core$List$reverse(currentArg)
							]),
						_List_Nil);
				} else {
					if (tokens.a.$ === 3) {
						switch (tokens.a.a) {
							case ')':
								var rest = tokens.b;
								return $elm$core$List$isEmpty(currentArg) ? _Utils_Tuple2(_List_Nil, rest) : _Utils_Tuple2(
									_List_fromArray(
										[
											$elm$core$List$reverse(currentArg)
										]),
									rest);
							case ',':
								var rest = tokens.b;
								var _v1 = A2($author$project$ETeX$Transform$extractParenArgs, rest, _List_Nil);
								var args = _v1.a;
								var remaining = _v1.b;
								return _Utils_Tuple2(
									A2(
										$elm$core$List$cons,
										$elm$core$List$reverse(currentArg),
										args),
									remaining);
							default:
								break _v0$3;
						}
					} else {
						break _v0$3;
					}
				}
			}
			var token = tokens.a;
			var rest = tokens.b;
			var $temp$tokens = rest,
				$temp$currentArg = A2($elm$core$List$cons, token, currentArg);
			tokens = $temp$tokens;
			currentArg = $temp$currentArg;
			continue extractParenArgs;
		}
	});
var $author$project$ETeX$Transform$needsBraceConversion = function (cmd) {
	return A2(
		$elm$core$List$member,
		cmd,
		_List_fromArray(
			['frac', 'binom', 'overset', 'underset', 'stackrel', 'tfrac', 'dfrac', 'cfrac', 'dbinom', 'tbinom']));
};
var $author$project$ETeX$Transform$processTokensWithLookahead = F2(
	function (knownMacros, tokens) {
		_v0$4:
		while (true) {
			if (!tokens.b) {
				return _List_Nil;
			} else {
				if (!tokens.a.$) {
					if (tokens.b.b) {
						switch (tokens.b.a.$) {
							case 2:
								if (tokens.b.b.b && (!tokens.b.b.a.$)) {
									var word1 = tokens.a.a;
									var _v1 = tokens.b;
									var space = _v1.a.a;
									var _v2 = _v1.b;
									var word2 = _v2.a.a;
									var rest = _v2.b;
									return ((word1 === 'mathbb') && ($elm$core$String$length(word2) === 1)) ? A2(
										$elm$core$List$cons,
										$author$project$ETeX$Transform$SimpleWord('\\mathbb'),
										A2(
											$elm$core$List$cons,
											A2($author$project$ETeX$Transform$SimpleBrace, '{', word2),
											A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest))) : A2(
										$elm$core$List$cons,
										$author$project$ETeX$Transform$SimpleWord(word1),
										A2(
											$elm$core$List$cons,
											$author$project$ETeX$Transform$SimpleSpace(space),
											A2(
												$author$project$ETeX$Transform$processTokensWithLookahead,
												knownMacros,
												A2(
													$elm$core$List$cons,
													$author$project$ETeX$Transform$SimpleWord(word2),
													rest))));
								} else {
									break _v0$4;
								}
							case 3:
								switch (tokens.b.a.a) {
									case '^':
										var word = tokens.a.a;
										var _v3 = tokens.b;
										var rest = _v3.b;
										return ($author$project$ETeX$KaTeX$isKaTeX(word) || A2($elm$core$List$member, word, knownMacros)) ? A2(
											$elm$core$List$cons,
											$author$project$ETeX$Transform$SimpleWord('\\' + word),
											A2(
												$elm$core$List$cons,
												$author$project$ETeX$Transform$SimpleSymbol('^'),
												A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest))) : A2(
											$elm$core$List$cons,
											$author$project$ETeX$Transform$SimpleWord(word),
											A2(
												$elm$core$List$cons,
												$author$project$ETeX$Transform$SimpleSymbol('^'),
												A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest)));
									case '(':
										var word = tokens.a.a;
										var _v4 = tokens.b;
										var rest = _v4.b;
										if ($author$project$ETeX$KaTeX$isKaTeX(word) && $author$project$ETeX$Transform$needsBraceConversion(word)) {
											var _v5 = A2($author$project$ETeX$Transform$extractParenArgs, rest, _List_Nil);
											var args = _v5.a;
											var remaining = _v5.b;
											var processedArgs = A2(
												$elm$core$List$map,
												$author$project$ETeX$Transform$processTokensWithLookahead(knownMacros),
												args);
											return A2(
												$elm$core$List$cons,
												$author$project$ETeX$Transform$SimpleWord('\\' + word),
												_Utils_ap(
													$author$project$ETeX$Transform$convertArgsToBraces(processedArgs),
													A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, remaining)));
										} else {
											if ($author$project$ETeX$KaTeX$isKaTeX(word)) {
												return A2(
													$elm$core$List$cons,
													$author$project$ETeX$Transform$SimpleWord('\\' + word),
													A2(
														$elm$core$List$cons,
														$author$project$ETeX$Transform$SimpleSymbol('('),
														A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest)));
											} else {
												if (A2($elm$core$List$member, word, knownMacros)) {
													return A2(
														$elm$core$List$cons,
														$author$project$ETeX$Transform$SimpleWord('\\' + word),
														A2(
															$elm$core$List$cons,
															$author$project$ETeX$Transform$SimpleSymbol('('),
															A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest)));
												} else {
													return A2(
														$elm$core$List$cons,
														$author$project$ETeX$Transform$SimpleWord(word),
														A2(
															$elm$core$List$cons,
															$author$project$ETeX$Transform$SimpleSymbol('('),
															A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest)));
												}
											}
										}
									default:
										break _v0$4;
								}
							default:
								break _v0$4;
						}
					} else {
						break _v0$4;
					}
				} else {
					var token = tokens.a;
					var rest = tokens.b;
					return A2(
						$elm$core$List$cons,
						token,
						A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest));
				}
			}
		}
		var word = tokens.a.a;
		var rest = tokens.b;
		return ($author$project$ETeX$KaTeX$isKaTeX(word) || A2($elm$core$List$member, word, knownMacros)) ? A2(
			$elm$core$List$cons,
			$author$project$ETeX$Transform$SimpleWord('\\' + word),
			A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest)) : A2(
			$elm$core$List$cons,
			$author$project$ETeX$Transform$SimpleWord(word),
			A2($author$project$ETeX$Transform$processTokensWithLookahead, knownMacros, rest));
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $author$project$ETeX$Transform$SimpleBackslash = {$: 1};
var $author$project$ETeX$Transform$SimpleParam = function (a) {
	return {$: 5, a: a};
};
var $author$project$ETeX$Transform$collectUntilCloseBrace = F3(
	function (chars, depth, acc) {
		collectUntilCloseBrace:
		while (true) {
			if (!chars.b) {
				return _Utils_Tuple2(
					$elm$core$List$reverse(acc),
					_List_Nil);
			} else {
				switch (chars.a) {
					case '{':
						var rest = chars.b;
						var $temp$chars = rest,
							$temp$depth = depth + 1,
							$temp$acc = A2($elm$core$List$cons, '{', acc);
						chars = $temp$chars;
						depth = $temp$depth;
						acc = $temp$acc;
						continue collectUntilCloseBrace;
					case '}':
						var rest = chars.b;
						if (depth === 1) {
							return _Utils_Tuple2(
								$elm$core$List$reverse(acc),
								rest);
						} else {
							var $temp$chars = rest,
								$temp$depth = depth - 1,
								$temp$acc = A2($elm$core$List$cons, '}', acc);
							chars = $temp$chars;
							depth = $temp$depth;
							acc = $temp$acc;
							continue collectUntilCloseBrace;
						}
					default:
						var c = chars.a;
						var rest = chars.b;
						var $temp$chars = rest,
							$temp$depth = depth,
							$temp$acc = A2($elm$core$List$cons, c, acc);
						chars = $temp$chars;
						depth = $temp$depth;
						acc = $temp$acc;
						continue collectUntilCloseBrace;
				}
			}
		}
	});
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$String$fromList = _String_fromList;
var $author$project$ETeX$Transform$takeAlphas = function (chars) {
	if (!chars.b) {
		return _Utils_Tuple2(_List_Nil, _List_Nil);
	} else {
		var c = chars.a;
		var rest = chars.b;
		if ($elm$core$Char$isAlpha(c)) {
			var _v1 = $author$project$ETeX$Transform$takeAlphas(rest);
			var alphas = _v1.a;
			var remaining = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, c, alphas),
				remaining);
		} else {
			return _Utils_Tuple2(_List_Nil, chars);
		}
	}
};
var $author$project$ETeX$Transform$takeDigits = function (chars) {
	if (!chars.b) {
		return _Utils_Tuple2(_List_Nil, _List_Nil);
	} else {
		var c = chars.a;
		var rest = chars.b;
		if ($elm$core$Char$isDigit(c)) {
			var _v1 = $author$project$ETeX$Transform$takeDigits(rest);
			var digits = _v1.a;
			var remaining = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, c, digits),
				remaining);
		} else {
			return _Utils_Tuple2(_List_Nil, chars);
		}
	}
};
var $author$project$ETeX$Transform$takeSpaces = function (chars) {
	if (!chars.b) {
		return _Utils_Tuple2(_List_Nil, _List_Nil);
	} else {
		var c = chars.a;
		var rest = chars.b;
		if ((c === ' ') || ((c === '\t') || (c === '\n'))) {
			var _v1 = $author$project$ETeX$Transform$takeSpaces(rest);
			var spaces = _v1.a;
			var remaining = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, c, spaces),
				remaining);
		} else {
			return _Utils_Tuple2(_List_Nil, chars);
		}
	}
};
var $author$project$ETeX$Transform$tokenizeHelper = F2(
	function (chars, acc) {
		tokenizeHelper:
		while (true) {
			if (!chars.b) {
				return acc;
			} else {
				switch (chars.a) {
					case '\\':
						var rest = chars.b;
						var $temp$chars = rest,
							$temp$acc = A2($elm$core$List$cons, $author$project$ETeX$Transform$SimpleBackslash, acc);
						chars = $temp$chars;
						acc = $temp$acc;
						continue tokenizeHelper;
					case '#':
						var rest = chars.b;
						var _v1 = $author$project$ETeX$Transform$takeDigits(rest);
						var digits = _v1.a;
						var remaining = _v1.b;
						var _v2 = $elm$core$String$toInt(
							$elm$core$String$fromList(digits));
						if (!_v2.$) {
							var n = _v2.a;
							var $temp$chars = remaining,
								$temp$acc = A2(
								$elm$core$List$cons,
								$author$project$ETeX$Transform$SimpleParam(n),
								acc);
							chars = $temp$chars;
							acc = $temp$acc;
							continue tokenizeHelper;
						} else {
							var $temp$chars = rest,
								$temp$acc = A2(
								$elm$core$List$cons,
								$author$project$ETeX$Transform$SimpleSymbol('#'),
								acc);
							chars = $temp$chars;
							acc = $temp$acc;
							continue tokenizeHelper;
						}
					case '{':
						var rest = chars.b;
						var _v3 = A3($author$project$ETeX$Transform$collectUntilCloseBrace, rest, 1, _List_Nil);
						var content = _v3.a;
						var remaining = _v3.b;
						var $temp$chars = remaining,
							$temp$acc = A2(
							$elm$core$List$cons,
							A2(
								$author$project$ETeX$Transform$SimpleBrace,
								'{',
								$elm$core$String$fromList(content)),
							acc);
						chars = $temp$chars;
						acc = $temp$acc;
						continue tokenizeHelper;
					default:
						var c = chars.a;
						var rest = chars.b;
						if ($elm$core$Char$isAlpha(c)) {
							var _v4 = $author$project$ETeX$Transform$takeAlphas(
								A2($elm$core$List$cons, c, rest));
							var word = _v4.a;
							var remaining = _v4.b;
							var $temp$chars = remaining,
								$temp$acc = A2(
								$elm$core$List$cons,
								$author$project$ETeX$Transform$SimpleWord(
									$elm$core$String$fromList(word)),
								acc);
							chars = $temp$chars;
							acc = $temp$acc;
							continue tokenizeHelper;
						} else {
							if ((c === ' ') || ((c === '\t') || (c === '\n'))) {
								var _v5 = $author$project$ETeX$Transform$takeSpaces(
									A2($elm$core$List$cons, c, rest));
								var spaces = _v5.a;
								var remaining = _v5.b;
								var $temp$chars = remaining,
									$temp$acc = A2(
									$elm$core$List$cons,
									$author$project$ETeX$Transform$SimpleSpace(
										$elm$core$String$fromList(spaces)),
									acc);
								chars = $temp$chars;
								acc = $temp$acc;
								continue tokenizeHelper;
							} else {
								var $temp$chars = rest,
									$temp$acc = A2(
									$elm$core$List$cons,
									$author$project$ETeX$Transform$SimpleSymbol(
										$elm$core$String$fromChar(c)),
									acc);
								chars = $temp$chars;
								acc = $temp$acc;
								continue tokenizeHelper;
							}
						}
				}
			}
		}
	});
var $author$project$ETeX$Transform$tokenizeSimpleMacroBody = function (body) {
	return $elm$core$List$reverse(
		A2(
			$author$project$ETeX$Transform$tokenizeHelper,
			$elm$core$String$toList(body),
			_List_Nil));
};
var $author$project$ETeX$Transform$processSimpleMacroBodyWithContext = F2(
	function (knownMacros, body) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				$author$project$ETeX$Transform$tokenToString,
				A2(
					$author$project$ETeX$Transform$processTokensWithLookahead,
					knownMacros,
					$author$project$ETeX$Transform$tokenizeSimpleMacroBody(body))));
	});
var $author$project$ETeX$Transform$parseSimpleMacroWithContext = F2(
	function (knownMacros, line) {
		var _v0 = A2($elm$core$String$split, ':', line);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var name = _v0.a;
			var _v1 = _v0.b;
			var body = _v1.a;
			var trimmedName = $elm$core$String$trim(name);
			var trimmedBody = $elm$core$String$trim(body);
			var processedBody = A2($author$project$ETeX$Transform$processSimpleMacroBodyWithContext, knownMacros, trimmedBody);
			var newCommandStr = '\\newcommand{\\' + (trimmedName + ('}{' + (processedBody + '}')));
			return $author$project$ETeX$Transform$makeEntry(
				A2($author$project$ETeX$Transform$parseNewCommand, $elm$core$Dict$empty, newCommandStr));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$ETeX$Transform$addMixedFormatMacro = F2(
	function (line, dict) {
		var knownMacros = $elm$core$Dict$keys(dict);
		if (A2($elm$core$String$startsWith, '\\newcommand', line)) {
			var _v0 = $author$project$ETeX$Transform$makeEntry(
				A2($author$project$ETeX$Transform$parseNewCommand, $elm$core$Dict$empty, line));
			if (!_v0.$) {
				var _v1 = _v0.a;
				var name = _v1.a;
				var body = _v1.b;
				return A3($elm$core$Dict$insert, name, body, dict);
			} else {
				return dict;
			}
		} else {
			if (A2($elm$core$String$contains, ':', line)) {
				var _v2 = A2($author$project$ETeX$Transform$parseSimpleMacroWithContext, knownMacros, line);
				if (!_v2.$) {
					var _v3 = _v2.a;
					var name = _v3.a;
					var body = _v3.b;
					return A3($elm$core$Dict$insert, name, body, dict);
				} else {
					return dict;
				}
			} else {
				return dict;
			}
		}
	});
var $author$project$ETeX$Transform$makeMacroDictFromMixedLines = function (lines) {
	return A3($elm$core$List$foldl, $author$project$ETeX$Transform$addMixedFormatMacro, $elm$core$Dict$empty, lines);
};
var $author$project$ETeX$Transform$makeMacroDict = function (str) {
	return $author$project$ETeX$Transform$makeMacroDictFromMixedLines(
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			A2(
				$elm$core$List$map,
				$elm$core$String$trim,
				$elm$core$String$lines(
					$elm$core$String$trim(str)))));
};
var $author$project$Generic$Acc$updateWithMathMacros = F2(
	function (content, accumulator) {
		var definitions = $elm$core$String$trim(
			A3(
				$elm$core$String$replace,
				'end',
				'',
				A3(
					$elm$core$String$replace,
					'\\end{mathmacros}',
					'',
					A3($elm$core$String$replace, '\\begin{mathmacros}', '', content))));
		var mathMacroDict = $author$project$ETeX$Transform$makeMacroDict(
			$elm$core$String$trim(definitions));
		return _Utils_update(
			accumulator,
			{jS: mathMacroDict});
	});
var $author$project$Generic$Acc$init = function (data) {
	return A2(
		$author$project$Generic$Acc$updateWithMathMacros,
		data.r6,
		{
			b0: 0,
			qM: $elm$core$Dict$empty,
			gW: 0,
			dY: $author$project$Generic$Vector$init(data.uA),
			g8: $elm$core$Dict$empty,
			g9: $elm$core$Dict$empty,
			y: $author$project$Generic$Vector$init(data.uA),
			ae: 1,
			dj: $author$project$Generic$Vector$init(data.uA),
			hl: $elm$core$Dict$empty,
			jS: $elm$core$Dict$empty,
			j7: $author$project$Generic$Settings$numberedBlockNames,
			ew: $elm$core$Dict$empty,
			hJ: $elm$core$Dict$empty,
			fY: _List_Nil,
			eC: $elm$core$Dict$empty,
			h3: $elm$core$Dict$empty,
			h6: $elm$core$Dict$empty
		});
};
var $author$project$Generic$Acc$mapper = F2(
	function (ast_, _v0) {
		var acc_ = _v0.a;
		var tree_ = _v0.b;
		return _Utils_Tuple2(
			acc_,
			A2($elm$core$List$cons, tree_, ast_));
	});
var $author$project$Generic$Acc$reverse = function (list) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (x, xs) {
				return A2($elm$core$List$cons, x, xs);
			}),
		_List_Nil,
		list);
};
var $author$project$Generic$Acc$mapAccumulate = F3(
	function (f, s, tree) {
		var _v0 = A2(
			f,
			s,
			$maca$elm_rose_tree$RoseTree$Tree$value(tree));
		var s_ = _v0.a;
		var value_ = _v0.b;
		var _v1 = A3(
			$elm$core$List$foldl,
			F2(
				function (child, _v2) {
					var accState = _v2.a;
					var accChildren = _v2.b;
					var _v3 = A3($author$project$Generic$Acc$mapAccumulate, f, accState, child);
					var newState = _v3.a;
					var newChild = _v3.b;
					return _Utils_Tuple2(
						newState,
						A2($elm$core$List$cons, newChild, accChildren));
				}),
			_Utils_Tuple2(s_, _List_Nil),
			$maca$elm_rose_tree$RoseTree$Tree$children(tree));
		var s__ = _v1.a;
		var children_ = _v1.b;
		return _Utils_Tuple2(
			s__,
			A2(
				$maca$elm_rose_tree$RoseTree$Tree$branch,
				value_,
				$author$project$Generic$Acc$reverse(children_)));
	});
var $author$project$Generic$ASTTools$filterExprs = F2(
	function (predicate, list) {
		return A2(
			$elm$core$List$filter,
			function (item) {
				return predicate(item);
			},
			list);
	});
var $author$project$Generic$ASTTools$isBlank = function (expr) {
	if (!expr.$) {
		var content = expr.a;
		return ($elm$core$String$trim(content) === '') ? true : false;
	} else {
		return false;
	}
};
var $author$project$Generic$TextMacro$filterOutBlanks = $author$project$Generic$ASTTools$filterExprs(
	function (e) {
		return !$author$project$Generic$ASTTools$isBlank(e);
	});
var $author$project$Generic$TextMacro$dummy = {qb: 0, rb: 0, hg: 'dummyId', jz: 0};
var $author$project$Generic$TextMacro$group = function (exprs) {
	return A3($author$project$Generic$Language$Fun, 'group', exprs, $author$project$Generic$TextMacro$dummy);
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Generic$TextMacro$subst = F3(
	function (a, _var, body) {
		switch (body.$) {
			case 0:
				var str = body.a;
				if (_Utils_eq(
					$elm$core$String$trim(str),
					$elm$core$String$trim(_var))) {
					return a;
				} else {
					if (A2($elm$core$String$contains, _var, str)) {
						var parts = A2(
							$elm$core$List$map,
							function (s) {
								return A2($author$project$Generic$Language$Text, s, $author$project$Generic$TextMacro$dummy);
							},
							A2($elm$core$String$split, _var, str));
						return $author$project$Generic$TextMacro$group(
							A2($elm$core$List$intersperse, a, parts));
					} else {
						return body;
					}
				}
			case 1:
				var name = body.a;
				var exprs = body.b;
				var meta = body.c;
				return A3(
					$author$project$Generic$Language$Fun,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$Generic$TextMacro$subst, a, _var),
						exprs),
					meta);
			default:
				return body;
		}
	});
var $author$project$Generic$TextMacro$makeF = F2(
	function (a, _var) {
		return $elm$core$List$map(
			A2($author$project$Generic$TextMacro$subst, a, _var));
	});
var $author$project$Generic$TextMacro$listSubst = F3(
	function (as_, vars, exprs) {
		if (!_Utils_eq(
			$elm$core$List$length(as_),
			$elm$core$List$length(vars))) {
			return exprs;
		} else {
			var funcs = A3($elm$core$List$map2, $author$project$Generic$TextMacro$makeF, as_, vars);
			return A3(
				$elm$core$List$foldl,
				F2(
					function (func, acc) {
						return func(acc);
					}),
				exprs,
				funcs);
		}
	});
var $author$project$Generic$TextMacro$expandWithMacro = F2(
	function (macro, expr) {
		if (expr.$ === 1) {
			var name = expr.a;
			var fArgs = expr.b;
			return _Utils_eq(name, macro.bn) ? $author$project$Generic$TextMacro$group(
				A3(
					$author$project$Generic$TextMacro$listSubst,
					$author$project$Generic$TextMacro$filterOutBlanks(fArgs),
					macro.cY,
					macro.qh)) : expr;
		} else {
			return expr;
		}
	});
var $author$project$Generic$TextMacro$expand = F2(
	function (dict, expr) {
		if (expr.$ === 1) {
			var name = expr.a;
			var _v1 = A2($elm$core$Dict$get, name, dict);
			if (_v1.$ === 1) {
				return expr;
			} else {
				var macro = _v1.a;
				return A2($author$project$Generic$TextMacro$expandWithMacro, macro, expr);
			}
		} else {
			return expr;
		}
	});
var $toastal$either$Either$map = F2(
	function (f, e) {
		if (e.$ === 1) {
			var b = e.a;
			return $toastal$either$Either$Right(
				f(b));
		} else {
			var a = e.a;
			return $toastal$either$Either$Left(a);
		}
	});
var $author$project$Generic$Acc$expand = F2(
	function (dict, block) {
		return _Utils_update(
			block,
			{
				qh: A2(
					$toastal$either$Either$map,
					$elm$core$List$map(
						$author$project$Generic$TextMacro$expand(dict)),
					block.qh)
			});
	});
var $author$project$Generic$Acc$getCounterAsString = F2(
	function (name, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$fromInt,
				A2($elm$core$Dict$get, name, dict)));
	});
var $author$project$Generic$Language$getNameFromHeading = function (heading) {
	switch (heading.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var name = heading.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = heading.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$Generic$ASTTools$getText = function (expression) {
	switch (expression.$) {
		case 0:
			var str = expression.a;
			return $elm$core$Maybe$Just(str);
		case 2:
			var str = expression.b;
			return $elm$core$Maybe$Just(
				A3($elm$core$String$replace, '`', '', str));
		case 1:
			var expressions = expression.b;
			return $elm$core$Maybe$Just(
				A2(
					$elm$core$String$join,
					' ',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expressions))));
		default:
			var exprList = expression.a;
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Acc$itemsNotNumbered = _List_fromArray(
	['preface', 'introduction', 'appendix', 'references', 'index', 'scratch']);
var $author$project$Tools$String$userReplace = F3(
	function (userRegex, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(userRegex);
		if (_v0.$ === 1) {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Tools$String$alphanumOnly = function (string) {
	return A3(
		$author$project$Tools$String$userReplace,
		'[^a-z0-9 ]+',
		function (_v0) {
			return ' ';
		},
		string);
};
var $author$project$Tools$String$compressWhitespace = function (string) {
	return $elm$core$String$trim(
		A3(
			$author$project$Tools$String$userReplace,
			'\\s\\s+',
			function (_v0) {
				return ' ';
			},
			string));
};
var $author$project$Tools$String$makeSlug = function (str) {
	return A3(
		$elm$core$String$replace,
		' ',
		'-',
		$author$project$Tools$String$compressWhitespace(
			$author$project$Tools$String$alphanumOnly(
				$elm$core$String$toLower(str))));
};
var $author$project$Generic$Vector$toString = function (v) {
	return A2(
		$elm$core$String$join,
		'.',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			A2(
				$elm$core$List$filter,
				function (x) {
					return x > 0;
				},
				v.iV)));
};
var $author$project$Generic$Acc$vectorPrefix = function (headingIndex) {
	var prefix = $author$project$Generic$Vector$toString(headingIndex);
	return (prefix === '') ? '' : ($author$project$Generic$Vector$toString(headingIndex) + '.');
};
var $author$project$Generic$Acc$transformBlock = F2(
	function (acc, block) {
		var _v0 = _Utils_Tuple2(block.fC, block.lv);
		_v0$8:
		while (true) {
			switch (_v0.a.$) {
				case 1:
					switch (_v0.a.a) {
						case 'section':
							return _Utils_update(
								block,
								{
									sS: A3(
										$elm$core$Dict$insert,
										'tag',
										$author$project$Tools$String$makeSlug(block.ri),
										A3(
											$elm$core$Dict$insert,
											'label',
											$author$project$Generic$Vector$toString(acc.y),
											block.sS))
								});
						case 'quiver':
							return _Utils_update(
								block,
								{
									sS: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.qM),
										block.sS)
								});
						case 'chart':
							return _Utils_update(
								block,
								{
									sS: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.qM),
										block.sS)
								});
						case 'image':
							return _Utils_update(
								block,
								{
									sS: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.qM),
										block.sS)
								});
						case 'iframe':
							return _Utils_update(
								block,
								{
									sS: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.qM),
										block.sS)
								});
						case 'document':
							var title = function () {
								var _v1 = block.qh;
								if (!_v1.$) {
									var str = _v1.a;
									return str;
								} else {
									var expr = _v1.a;
									return A2(
										$elm$core$String$join,
										' ',
										$elm_community$maybe_extra$Maybe$Extra$values(
											A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expr)));
								}
							}();
							var label = A2(
								$elm$core$List$member,
								$elm$core$String$toLower(title),
								$author$project$Generic$Acc$itemsNotNumbered) ? '' : $author$project$Generic$Vector$toString(acc.dY);
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'label', label, block.sS)
								});
						default:
							break _v0$8;
					}
				case 2:
					switch (_v0.a.a) {
						case 'equation':
							var args = _v0.b;
							var prefix = $author$project$Generic$Vector$toString(acc.y);
							var equationProp = (prefix === '') ? A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.qM) : ($author$project$Generic$Vector$toString(acc.y) + ('.' + A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.qM)));
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'equation-number', equationProp, block.sS)
								});
						case 'aligned':
							var prefix = $author$project$Generic$Vector$toString(acc.y);
							var equationProp = (prefix === '') ? A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.qM) : ($author$project$Generic$Vector$toString(acc.y) + ('.' + A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.qM)));
							return _Utils_update(
								block,
								{
									sS: A3($elm$core$Dict$insert, 'equation-number', equationProp, block.sS)
								});
						default:
							break _v0$8;
					}
				default:
					break _v0$8;
			}
		}
		var heading = _v0.a;
		var _v2 = $author$project$Generic$Language$getNameFromHeading(heading);
		if (_v2.$ === 1) {
			return block;
		} else {
			var name = _v2.a;
			if (A2(
				$elm$core$List$member,
				name,
				_List_fromArray(
					['section']))) {
				var prefix = $author$project$Generic$Vector$toString(acc.y);
				var equationProp = (prefix === '') ? A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.qM) : ($author$project$Generic$Vector$toString(acc.y) + ('.' + A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.qM)));
				return _Utils_update(
					block,
					{
						sS: A3($elm$core$Dict$insert, 'label', equationProp, block.sS)
					});
			} else {
				return A2(
					$author$project$Generic$Acc$expand,
					acc.h6,
					A2($elm$core$List$member, name, $author$project$Generic$Settings$numberedBlockNames) ? _Utils_update(
						block,
						{
							sS: A3(
								$elm$core$Dict$insert,
								'label',
								_Utils_ap(
									$author$project$Generic$Acc$vectorPrefix(acc.y),
									$elm$core$String$fromInt(acc.b0)),
								block.sS)
						}) : block);
			}
		}
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Generic$Acc$getNameContentId = function (block) {
	var name = $author$project$Generic$Language$getNameFromHeading(block.fC);
	var id = $elm$core$Maybe$Just(block.nJ.hg);
	var content = $elm$core$Maybe$Just(block.qh);
	var _v0 = _Utils_Tuple3(name, content, id);
	if (((!_v0.a.$) && (!_v0.b.$)) && (!_v0.c.$)) {
		var name_ = _v0.a.a;
		var content_ = _v0.b.a;
		var id_ = _v0.c.a;
		return $elm$core$Maybe$Just(
			{iV: content_, hg: id_, bn: name_});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Acc$getNameContentIdTag = function (block) {
	var name = A2($elm$core$Dict$get, 'name', block.sS);
	var id = block.nJ.hg;
	var tag = A2(
		$elm$core$Maybe$withDefault,
		id,
		A2($elm$core$Dict$get, 'tag', block.sS));
	var content = block.qh;
	if (name.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var name_ = name.a;
		return $elm$core$Maybe$Just(
			{iV: block.qh, hg: id, bn: name_, dy: tag});
	}
};
var $author$project$Generic$Language$getVerbatimContent = function (block) {
	var _v0 = block.qh;
	if (!_v0.$) {
		var str = _v0.a;
		return $elm$core$Maybe$Just(str);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Acc$SInList = 0;
var $author$project$Generic$Acc$nextInListState = F2(
	function (heading, state) {
		var _v0 = _Utils_Tuple2(state, heading);
		if (_v0.a === 1) {
			if ((_v0.b.$ === 1) && (_v0.b.a === 'numbered')) {
				var _v1 = _v0.a;
				return 0;
			} else {
				var _v2 = _v0.a;
				return 1;
			}
		} else {
			if ((_v0.b.$ === 1) && (_v0.b.a === 'numbered')) {
				var _v3 = _v0.a;
				return 0;
			} else {
				var _v4 = _v0.a;
				return 1;
			}
		}
	});
var $author$project$Generic$Acc$updateBibItemBlock = F3(
	function (accumulator, args, id) {
		var _v0 = $elm$core$List$head(args);
		if (_v0.$ === 1) {
			return accumulator;
		} else {
			var label = _v0.a;
			return _Utils_update(
				accumulator,
				{
					eC: A3(
						$elm$core$Dict$insert,
						label,
						{hg: id, eu: '_irrelevant_'},
						accumulator.eC)
				});
		}
	});
var $author$project$Generic$Acc$getReferenceDatum = F2(
	function (acc, block) {
		var tag = A2(
			$elm$core$Maybe$withDefault,
			'no-tag',
			A2($elm$core$Dict$get, 'tag', block.sS));
		var numRef = $author$project$Generic$Vector$toString(acc.y) + ('.' + $elm$core$String$fromInt(acc.b0));
		var id = block.nJ.hg;
		return $elm$core$Maybe$Just(
			{hg: id, eu: numRef, dy: tag});
	});
var $author$project$Generic$Acc$updateReference = F3(
	function (headingIndex, referenceDatum, acc) {
		return (referenceDatum.dy !== '') ? _Utils_update(
			acc,
			{
				eC: A3(
					$elm$core$Dict$insert,
					referenceDatum.dy,
					{hg: referenceDatum.hg, eu: referenceDatum.eu},
					acc.eC)
			}) : acc;
	});
var $author$project$Generic$Acc$updateReferenceWithBlock = F2(
	function (block, acc) {
		var _v0 = A2($author$project$Generic$Acc$getReferenceDatum, acc, block);
		if (!_v0.$) {
			var referenceDatum = _v0.a;
			return A3($author$project$Generic$Acc$updateReference, acc.y, referenceDatum, acc);
		} else {
			return acc;
		}
	});
var $author$project$Generic$Vector$get = F2(
	function (k, v) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm_community$list_extra$List$Extra$getAt, k, v.iV));
	});
var $author$project$Generic$BlockUtilities$getExpressionBlockName = function (block) {
	var _v0 = block.fC;
	switch (_v0.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$Generic$Acc$getTag = function (block) {
	var _v0 = A2($elm$core$Dict$get, 'tag', block.sS);
	if (!_v0.$) {
		var tag = _v0.a;
		return tag;
	} else {
		return block.nJ.hg;
	}
};
var $author$project$Generic$Vector$resetFrom = F2(
	function (k, v) {
		var suffix = A2($elm$core$List$repeat, v.eJ - k, 0);
		var prefix = A2($elm$core$List$take, k, v.iV);
		return {
			iV: _Utils_ap(prefix, suffix),
			eJ: v.eJ
		};
	});
var $author$project$Generic$Vector$set = F3(
	function (k, a, v) {
		return _Utils_update(
			v,
			{
				iV: A3($elm_community$list_extra$List$Extra$setAt, k, a, v.iV)
			});
	});
var $author$project$Generic$Vector$increment = F2(
	function (k, v) {
		return ((k < 0) || (_Utils_cmp(k, v.eJ) > -1)) ? v : A2(
			$author$project$Generic$Vector$resetFrom,
			k + 1,
			A3(
				$author$project$Generic$Vector$set,
				k,
				A2($author$project$Generic$Vector$get, k, v) + 1,
				v));
	});
var $author$project$ScriptaV2$Config$indentationQuantum = 2;
var $author$project$Generic$Acc$makeReferenceDatum = F3(
	function (id, tag, numRef) {
		return {hg: id, eu: numRef, dy: tag};
	});
var $author$project$Generic$Acc$updateWithOrdinaryBlock = F2(
	function (block, accumulator) {
		var _v0 = $author$project$Generic$BlockUtilities$getExpressionBlockName(block);
		if (!_v0.$) {
			switch (_v0.a) {
				case 'setcounter':
					var _v1 = block.qh;
					if (!_v1.$) {
						return accumulator;
					} else {
						var exprs = _v1.a;
						var ctr = function () {
							if ((exprs.b && (!exprs.a.$)) && (!exprs.b.b)) {
								var _v3 = exprs.a;
								var val = _v3.a;
								return A2(
									$elm$core$Maybe$withDefault,
									1,
									$elm$core$String$toInt(val));
							} else {
								return 1;
							}
						}();
						var headingIndex = A3(
							$author$project$Generic$Vector$set,
							0,
							ctr - 1,
							$author$project$Generic$Vector$init(accumulator.y.eJ));
						return _Utils_update(
							accumulator,
							{y: headingIndex});
					}
				case 'numbered':
					var level = (block.hh / $author$project$ScriptaV2$Config$indentationQuantum) | 0;
					var itemVector = function () {
						var _v4 = accumulator.ae;
						if (!_v4) {
							return A2($author$project$Generic$Vector$increment, level, accumulator.dj);
						} else {
							return A2(
								$author$project$Generic$Vector$increment,
								0,
								$author$project$Generic$Vector$init(4));
						}
					}();
					var referenceDatum = A3(
						$author$project$Generic$Acc$makeReferenceDatum,
						block.nJ.hg,
						$author$project$Generic$Acc$getTag(block),
						$elm$core$String$fromInt(
							A2($author$project$Generic$Vector$get, level, itemVector)));
					var index = A2($author$project$Generic$Vector$get, level, itemVector);
					var numberedItemDict = A3(
						$elm$core$Dict$insert,
						block.nJ.hg,
						{jz: index, ns: level},
						accumulator.ew);
					return A3(
						$author$project$Generic$Acc$updateReference,
						accumulator.y,
						referenceDatum,
						_Utils_update(
							accumulator,
							{
								ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae),
								dj: itemVector,
								ew: numberedItemDict
							}));
				case 'item':
					var level = (block.hh / $author$project$ScriptaV2$Config$indentationQuantum) | 0;
					return _Utils_update(
						accumulator,
						{
							ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae)
						});
				default:
					var name_ = _v0.a;
					if (A2(
						$elm$core$List$member,
						name_,
						_List_fromArray(
							['title', 'contents', 'banner', 'a']))) {
						return accumulator;
					} else {
						if (A2($elm$core$List$member, name_, $author$project$Generic$Settings$numberedBlockNames)) {
							var level = (block.hh / $author$project$ScriptaV2$Config$indentationQuantum) | 0;
							var itemVector = A2($author$project$Generic$Vector$increment, level, accumulator.dj);
							var numberedItemDict = A3(
								$elm$core$Dict$insert,
								block.nJ.hg,
								{
									jz: A2($author$project$Generic$Vector$get, level, itemVector),
									ns: level
								},
								accumulator.ew);
							var referenceDatum = A3(
								$author$project$Generic$Acc$makeReferenceDatum,
								block.nJ.hg,
								$author$project$Generic$Acc$getTag(block),
								$elm$core$String$fromInt(
									A2($author$project$Generic$Vector$get, level, itemVector)));
							return A3(
								$author$project$Generic$Acc$updateReference,
								accumulator.y,
								referenceDatum,
								_Utils_update(
									accumulator,
									{
										b0: accumulator.b0 + 1,
										ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae),
										dj: itemVector,
										ew: numberedItemDict
									}));
						} else {
							return _Utils_update(
								accumulator,
								{
									ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae)
								});
						}
					}
			}
		} else {
			return accumulator;
		}
	});
var $author$project$Generic$Acc$updateWithOrdinaryDocumentBlock = F5(
	function (accumulator, name, content, level, id) {
		var title = function () {
			if (!content.$) {
				var str = content.a;
				return str;
			} else {
				var expr = content.a;
				return A2(
					$elm$core$String$join,
					' ',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expr)));
			}
		}();
		var sectionTag = A3(
			$elm$core$String$replace,
			' ',
			'-',
			$elm$core$String$toLower(title));
		var documentIndex = A2(
			$elm$core$List$member,
			$elm$core$String$toLower(title),
			$author$project$Generic$Acc$itemsNotNumbered) ? accumulator.dY : A2(
			$author$project$Generic$Vector$increment,
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(level)),
			accumulator.dY);
		var referenceDatum = A2(
			$elm$core$List$member,
			$elm$core$String$toLower(title),
			$author$project$Generic$Acc$itemsNotNumbered) ? A3(
			$author$project$Generic$Acc$makeReferenceDatum,
			id,
			sectionTag,
			$author$project$Generic$Vector$toString(documentIndex)) : A3($author$project$Generic$Acc$makeReferenceDatum, id, sectionTag, '');
		return A3(
			$author$project$Generic$Acc$updateReference,
			accumulator.y,
			referenceDatum,
			_Utils_update(
				accumulator,
				{dY: documentIndex}));
	});
var $author$project$Tools$Utility$userReplace = F3(
	function (regexString, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(regexString);
		if (_v0.$ === 1) {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Tools$Utility$compressWhitespace = function (string) {
	return A3(
		$author$project$Tools$Utility$userReplace,
		'\\s\\s+',
		function (_v0) {
			return ' ';
		},
		string);
};
var $author$project$Generic$Acc$updateWithOrdinarySectionBlock = F5(
	function (accumulator, name, content, level, id) {
		var titleWords = function () {
			if (!content.$) {
				var str = content.a;
				return _List_fromArray(
					[
						$author$project$Tools$Utility$compressWhitespace(str)
					]);
			} else {
				var expr = content.a;
				return A2(
					$elm$core$List$map,
					$author$project$Tools$Utility$compressWhitespace,
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expr)));
			}
		}();
		var sectionTag = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toLower,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$trim,
						A2($elm$core$String$replace, ' ', '-'))),
				titleWords));
		var headingIndex = A2(
			$author$project$Generic$Vector$increment,
			function (x) {
				return (x - 1) + accumulator.gW;
			}(
				A2(
					$elm$core$Maybe$withDefault,
					1,
					$elm$core$String$toInt(level))),
			accumulator.y);
		var referenceDatum = A3(
			$author$project$Generic$Acc$makeReferenceDatum,
			id,
			sectionTag,
			$author$project$Generic$Vector$toString(headingIndex));
		var blockCounter = 0;
		return A3(
			$author$project$Generic$Acc$updateReference,
			accumulator.y,
			referenceDatum,
			_Utils_update(
				accumulator,
				{
					b0: blockCounter,
					qM: A3($elm$core$Dict$insert, 'equation', 0, accumulator.qM),
					y: headingIndex
				}));
	});
var $author$project$Generic$Acc$addFootnote = F2(
	function (footnoteData, dict) {
		return A3($elm$core$Dict$insert, footnoteData.dz, footnoteData.cC, dict);
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === -2) {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $author$project$Generic$Acc$addFootnoteLabel = F2(
	function (footnoteData, dict) {
		return A3(
			$elm$core$Dict$insert,
			footnoteData.cC.hg,
			$elm$core$Dict$size(dict) + 1,
			dict);
	});
var $author$project$Generic$Acc$addFootnotes = F2(
	function (termDataList, _v0) {
		var dict1 = _v0.a;
		var dict2 = _v0.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (data, _v1) {
					var d1 = _v1.a;
					var d2 = _v1.b;
					return _Utils_Tuple2(
						A2($author$project$Generic$Acc$addFootnote, data, d1),
						A2($author$project$Generic$Acc$addFootnoteLabel, data, d2));
				}),
			_Utils_Tuple2(dict1, dict2),
			termDataList);
	});
var $author$project$Generic$Acc$extractFootnote = F3(
	function (mSourceId, id_, expr) {
		if (((((expr.$ === 1) && (expr.a === 'footnote')) && expr.b.b) && (!expr.b.a.$)) && (!expr.b.b.b)) {
			var _v1 = expr.b;
			var _v2 = _v1.a;
			var content = _v2.a;
			var begin = _v2.b.qb;
			var end = _v2.b.rb;
			var index = _v2.b.jz;
			var id = _v2.b.hg;
			return $elm$core$Maybe$Just(
				{
					cC: {qb: begin, rb: end, hg: id, nA: mSourceId},
					dz: content
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Generic$Language$getFunctionName = function (expression) {
	switch (expression.$) {
		case 1:
			var name = expression.a;
			return $elm$core$Maybe$Just(name);
		case 2:
			return $elm$core$Maybe$Nothing;
		case 0:
			return $elm$core$Maybe$Nothing;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$ASTTools$matchExprOnName_ = F2(
	function (name, expr) {
		var _v0 = $author$project$Generic$Language$getFunctionName(expr);
		if (_v0.$ === 1) {
			return false;
		} else {
			var name2 = _v0.a;
			return _Utils_eq(name, name2);
		}
	});
var $author$project$Generic$ASTTools$filterExpressionsOnName_ = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			$author$project$Generic$ASTTools$matchExprOnName_(name),
			exprs);
	});
var $author$project$Generic$Acc$getFootnotes = F3(
	function (mBlockId, id, content_) {
		if (content_.$ === 1) {
			var expressionList = content_.a;
			return $elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					A2($author$project$Generic$Acc$extractFootnote, mBlockId, id),
					A2($author$project$Generic$ASTTools$filterExpressionsOnName_, 'footnote', expressionList)));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Generic$Acc$addFootnotesFromContent = F2(
	function (block, _v0) {
		var dict1 = _v0.a;
		var dict2 = _v0.b;
		var blockId = function () {
			var _v1 = block.qh;
			if (!_v1.$) {
				return $elm$core$Maybe$Nothing;
			} else {
				var expr = _v1.a;
				return A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.hg;
					},
					$elm$core$List$head(
						A2($elm$core$List$map, $author$project$Generic$Language$getMeta, expr)));
			}
		}();
		return A2(
			$author$project$Generic$Acc$addFootnotes,
			A3($author$project$Generic$Acc$getFootnotes, blockId, block.nJ.hg, block.qh),
			_Utils_Tuple2(dict1, dict2));
	});
var $author$project$Generic$Acc$addTerm = F2(
	function (termData, dict) {
		return A3($elm$core$Dict$insert, termData.dz, termData.cC, dict);
	});
var $author$project$Generic$Acc$extract = F2(
	function (id, expr) {
		_v0$2:
		while (true) {
			if ((((expr.$ === 1) && expr.b.b) && (!expr.b.a.$)) && (!expr.b.b.b)) {
				switch (expr.a) {
					case 'term':
						var _v1 = expr.b;
						var _v2 = _v1.a;
						var name = _v2.a;
						var begin = _v2.b.qb;
						var end = _v2.b.rb;
						return $elm$core$Maybe$Just(
							{
								cC: {qb: begin, rb: end, hg: id},
								dz: name
							});
					case 'term_':
						var _v3 = expr.b;
						var _v4 = _v3.a;
						var name = _v4.a;
						var begin = _v4.b.qb;
						var end = _v4.b.rb;
						return $elm$core$Maybe$Just(
							{
								cC: {qb: begin, rb: end, hg: id},
								dz: name
							});
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $author$project$Generic$Acc$getTerms = F2(
	function (id, content_) {
		if (content_.$ === 1) {
			var expressionList = content_.a;
			return $elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$author$project$Generic$Acc$extract(id),
					A2($author$project$Generic$ASTTools$filterExpressionsOnName_, 'term', expressionList)));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Generic$Acc$addTermsFromContent = F2(
	function (block_, dict) {
		var newTerms = A2($author$project$Generic$Acc$getTerms, block_.nJ.hg, block_.qh);
		var folder = F2(
			function (termData, dict_) {
				return A2($author$project$Generic$Acc$addTerm, termData, dict_);
			});
		return A3($elm$core$List$foldl, folder, dict, newTerms);
	});
var $author$project$Generic$Acc$updateWithParagraph = F2(
	function (block, accumulator) {
		var _v0 = A2(
			$author$project$Generic$Acc$addFootnotesFromContent,
			block,
			_Utils_Tuple2(accumulator.g9, accumulator.g8));
		var footnotes = _v0.a;
		var footnoteNumbers = _v0.b;
		return _Utils_update(
			accumulator,
			{
				g8: footnoteNumbers,
				g9: footnotes,
				ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae),
				h3: A2($author$project$Generic$Acc$addTermsFromContent, block, accumulator.h3)
			});
	});
var $author$project$Generic$TextMacro$insert = F2(
	function (data, dict) {
		if (data.$ === 1) {
			return dict;
		} else {
			var macro = data.a;
			return A3($elm$core$Dict$insert, macro.bn, macro, dict);
		}
	});
var $author$project$Generic$TextMacro$extract = function (expr_) {
	if ((((expr_.$ === 1) && (expr_.a === 'macro')) && expr_.b.b) && (!expr_.b.a.$)) {
		var _v1 = expr_.b;
		var _v2 = _v1.a;
		var argString = _v2.a;
		var exprs = _v1.b;
		var _v3 = $elm$core$String$words(
			$elm$core$String$trim(argString));
		if (_v3.b) {
			var name = _v3.a;
			var rest = _v3.b;
			return $elm$core$Maybe$Just(
				{qh: exprs, bn: name, cY: rest});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$macroFromL0String = function (str) {
	return A2(
		$elm$core$Maybe$andThen,
		$author$project$Generic$TextMacro$extract,
		$elm$core$List$head(
			A2($author$project$M$Expression$parse, 0, str)));
};
var $author$project$Generic$TextMacroParser$ExpectingHash = 2;
var $author$project$Generic$TextMacroParser$ExpectingInt = 0;
var $author$project$Generic$TextMacroParser$InvalidNumber = 1;
var $author$project$Generic$TextMacroParser$paramParser2 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$chompUntil(
				A2($elm$parser$Parser$Advanced$Token, '#', 2))),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '#', 2))),
	A2($elm$parser$Parser$Advanced$int, 0, 1));
var $author$project$Generic$TextMacroParser$getParam = function (str) {
	var _v0 = A2($elm$parser$Parser$Advanced$run, $author$project$Generic$TextMacroParser$paramParser2, str);
	if (!_v0.$) {
		var n = _v0.a;
		return $elm$core$Maybe$Just(
			'#' + $elm$core$String$fromInt(n));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$getParam = function (str) {
	var _v0 = $author$project$Generic$TextMacroParser$getParam(str);
	if (!_v0.$) {
		var result = _v0.a;
		return _List_fromArray(
			[result]);
	} else {
		return _List_Nil;
	}
};
var $author$project$Generic$TextMacro$getVars_ = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return $author$project$Generic$TextMacro$getParam(str);
		case 1:
			var exprs = expr.b;
			return $elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Generic$TextMacro$getVars_, exprs));
		default:
			return _List_Nil;
	}
};
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $author$project$Generic$TextMacro$getVars = function (exprs) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Generic$TextMacro$getVars_, exprs))));
};
var $author$project$Generic$TextMacro$extract3Aux = F3(
	function (name, rest, meta) {
		return {
			qh: rest,
			bn: name,
			cY: $author$project$Generic$TextMacro$getVars(rest)
		};
	});
var $author$project$Generic$TextMacro$extract2Aux = F2(
	function (body, meta) {
		if (body.b && (body.a.$ === 1)) {
			var _v1 = body.a;
			var name = _v1.a;
			var rest = body.b;
			return $elm$core$Maybe$Just(
				A3($author$project$Generic$TextMacro$extract3Aux, name, rest, meta));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Generic$TextMacro$extract2 = function (expr) {
	if (expr.$ === 1) {
		var name = expr.a;
		var body = expr.b;
		var meta = expr.c;
		return (name === 'newcommand') ? A2($author$project$Generic$TextMacro$extract2Aux, body, meta) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$parseMicroLaTeX = function (str) {
	return A2($author$project$M$Expression$parse, 0, str);
};
var $author$project$Generic$TextMacro$macroFromMicroLaTeXString = function (macroS) {
	return A2(
		$elm$core$Maybe$andThen,
		$author$project$Generic$TextMacro$extract2,
		$elm$core$List$head(
			$author$project$Generic$TextMacro$parseMicroLaTeX(macroS)));
};
var $author$project$Generic$TextMacro$macroFromString = function (str) {
	var _v0 = A2($elm$core$String$left, 1, str);
	switch (_v0) {
		case '\\':
			return $author$project$Generic$TextMacro$macroFromMicroLaTeXString(str);
		case '[':
			return $author$project$Generic$TextMacro$macroFromL0String(str);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$buildDictionary = function (lines) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (line, acc) {
				return A2(
					$author$project$Generic$TextMacro$insert,
					$author$project$Generic$TextMacro$macroFromString(line),
					acc);
			}),
		$elm$core$Dict$empty,
		lines);
};
var $author$project$Generic$Acc$normalzeLines = function (lines) {
	return A2(
		$elm$core$List$filter,
		function (line) {
			return line !== '';
		},
		A2(
			$elm$core$List$map,
			function (line) {
				return $elm$core$String$trim(line);
			},
			lines));
};
var $author$project$Generic$Acc$updateWithTextMacros = F2(
	function (content, accumulator) {
		return _Utils_update(
			accumulator,
			{
				h6: $author$project$Generic$TextMacro$buildDictionary(
					$author$project$Generic$Acc$normalzeLines(
						$elm$core$String$lines(content)))
			});
	});
var $author$project$Generic$Acc$macroParser = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							F3(
								function (start, end, source) {
									return A3($elm$core$String$slice, start, end, source);
								})),
						$elm$parser$Parser$chompUntil('\\' + (name + '{'))),
					$elm$parser$Parser$symbol('\\' + (name + '{'))),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Generic$Acc$getMacroArg = F2(
	function (name, str) {
		return A2(
			$elm$parser$Parser$run,
			$author$project$Generic$Acc$macroParser(name),
			str);
	});
var $author$project$Generic$Acc$getCounter = F2(
	function (name, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Dict$get, name, dict));
	});
var $author$project$Generic$Acc$incrementCounter = F2(
	function (name, dict) {
		return A3(
			$elm$core$Dict$insert,
			name,
			A2($author$project$Generic$Acc$getCounter, name, dict) + 1,
			dict);
	});
var $author$project$Generic$Acc$reduceName = function (str) {
	return A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['equation', 'aligned'])) ? 'equation' : ((str === 'code') ? 'listing' : (A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['quiver', 'image', 'iframe', 'chart', 'table', 'csvtable', 'svg', 'tikz', 'iframe'])) ? 'figure' : str));
};
var $author$project$Generic$Acc$verbatimBlockReference = F4(
	function (isSimple, headingIndex, name, newCounter) {
		var a = $author$project$Generic$Vector$toString(headingIndex);
		return ((a === '') || isSimple) ? $elm$core$String$fromInt(
			A2(
				$author$project$Generic$Acc$getCounter,
				$author$project$Generic$Acc$reduceName(name),
				newCounter)) : (a + ('.' + $elm$core$String$fromInt(
			A2(
				$author$project$Generic$Acc$getCounter,
				$author$project$Generic$Acc$reduceName(name),
				newCounter))));
	});
var $author$project$Generic$Acc$updateWithVerbatimBlock = F2(
	function (block, accumulator) {
		var _v0 = block.qh;
		if (_v0.$ === 1) {
			return accumulator;
		} else {
			var content = _v0.a;
			var tag = function () {
				var _v1 = A2($author$project$Generic$Acc$getMacroArg, 'label', content);
				if (!_v1.$) {
					var str = _v1.a;
					return str;
				} else {
					return '???';
				}
			}();
			var name = A2(
				$elm$core$Maybe$withDefault,
				'',
				$author$project$Generic$BlockUtilities$getExpressionBlockName(block));
			var newCounter = (A2($elm$core$List$member, name, accumulator.j7) && A2($elm$core$List$member, 'numbered', block.lv)) ? A2(
				$author$project$Generic$Acc$incrementCounter,
				$author$project$Generic$Acc$reduceName(name),
				accumulator.qM) : accumulator.qM;
			var isSimple = A2(
				$elm$core$List$member,
				name,
				_List_fromArray(
					['quiver', 'image']));
			var referenceDatum = A3(
				$author$project$Generic$Acc$makeReferenceDatum,
				block.nJ.hg,
				tag,
				A4($author$project$Generic$Acc$verbatimBlockReference, isSimple, accumulator.y, name, newCounter));
			return A3(
				$author$project$Generic$Acc$updateReference,
				accumulator.y,
				referenceDatum,
				_Utils_update(
					accumulator,
					{
						qM: newCounter,
						ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae)
					}));
		}
	});
var $author$project$Generic$Acc$updateAccumulator = F2(
	function (block, accumulator) {
		var heading = block.fC;
		var indent = block.hh;
		var args = block.lv;
		var body = block.qh;
		var meta = block.nJ;
		var properties = block.sS;
		switch (heading.$) {
			case 1:
				switch (heading.a) {
					case 'q':
						return A2(
							$author$project$Generic$Acc$updateReferenceWithBlock,
							block,
							_Utils_update(
								accumulator,
								{
									b0: accumulator.b0 + 1,
									fY: _List_fromArray(
										[
											_Utils_Tuple2(block.nJ.hg, '??')
										])
								}));
					case 'a':
						var _v1 = $elm$core$List$head(accumulator.fY);
						if ((!_v1.$) && (_v1.a.b === '??')) {
							var _v2 = _v1.a;
							var idQ = _v2.a;
							return A2(
								$author$project$Generic$Acc$updateReferenceWithBlock,
								block,
								_Utils_update(
									accumulator,
									{
										hJ: A3($elm$core$Dict$insert, idQ, block.nJ.hg, accumulator.hJ),
										fY: _List_Nil
									}));
						} else {
							return accumulator;
						}
					case 'set-key':
						if (args.b && args.b.b) {
							var key = args.a;
							var _v4 = args.b;
							var value = _v4.a;
							var rest = _v4.b;
							return _Utils_update(
								accumulator,
								{
									hl: A3($elm$core$Dict$insert, key, value, accumulator.hl)
								});
						} else {
							return accumulator;
						}
					case 'list':
						return _Utils_update(
							accumulator,
							{
								dj: $author$project$Generic$Vector$init(4)
							});
					case 'section':
						var level = A2(
							$elm$core$Maybe$withDefault,
							'1',
							A2($elm$core$Dict$get, 'level', properties));
						var _v5 = $author$project$Generic$Acc$getNameContentId(block);
						if (!_v5.$) {
							var name = _v5.a.bn;
							var content = _v5.a.iV;
							var id = _v5.a.hg;
							return A2(
								$author$project$Generic$Acc$updateReferenceWithBlock,
								block,
								A5(
									$author$project$Generic$Acc$updateWithOrdinarySectionBlock,
									accumulator,
									$elm$core$Maybe$Just(name),
									content,
									level,
									id));
						} else {
							return A2($author$project$Generic$Acc$updateReferenceWithBlock, block, accumulator);
						}
					case 'document':
						var level = A2(
							$elm$core$Maybe$withDefault,
							'1',
							$elm$core$List$head(args));
						var _v6 = $author$project$Generic$Acc$getNameContentId(block);
						if (!_v6.$) {
							var name = _v6.a.bn;
							var content = _v6.a.iV;
							var id = _v6.a.hg;
							return A5(
								$author$project$Generic$Acc$updateWithOrdinaryDocumentBlock,
								accumulator,
								$elm$core$Maybe$Just(name),
								content,
								level,
								id);
						} else {
							return accumulator;
						}
					case 'title':
						var headingIndex = function () {
							var _v7 = A2($elm$core$Dict$get, 'first-section', block.sS);
							if (_v7.$ === 1) {
								return {
									iV: _List_fromArray(
										[0, 0, 0, 0]),
									eJ: 4
								};
							} else {
								var firstSection_ = _v7.a;
								var _v8 = $elm$core$String$toInt(firstSection_);
								if (!_v8.$) {
									var n = _v8.a;
									return {
										iV: _List_fromArray(
											[
												A2($elm$core$Basics$max, n - 1, 0),
												0,
												0,
												0
											]),
										eJ: 4
									};
								} else {
									return {
										iV: _List_fromArray(
											[0, 0, 0, 0]),
										eJ: 4
									};
								}
							}
						}();
						return _Utils_update(
							accumulator,
							{y: headingIndex});
					case 'setcounter':
						var n = A2(
							$elm$core$Maybe$withDefault,
							1,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								$elm$core$List$head(args)));
						return _Utils_update(
							accumulator,
							{
								y: {
									iV: _List_fromArray(
										[n, 0, 0, 0]),
									eJ: 4
								}
							});
					case 'shiftandsetcounter':
						var n = A2(
							$elm$core$Maybe$withDefault,
							1,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								$elm$core$List$head(args)));
						return _Utils_update(
							accumulator,
							{
								gW: 1,
								y: {
									iV: _List_fromArray(
										[n, 0, 0, 0]),
									eJ: 4
								}
							});
					case 'bibitem':
						return A3($author$project$Generic$Acc$updateBibItemBlock, accumulator, args, block.nJ.hg);
					default:
						return A2(
							$author$project$Generic$Acc$updateReferenceWithBlock,
							block,
							A2($author$project$Generic$Acc$updateWithOrdinaryBlock, block, accumulator));
				}
			case 2:
				switch (heading.a) {
					case 'mathmacros':
						var _v9 = $author$project$Generic$Language$getVerbatimContent(block);
						if (_v9.$ === 1) {
							return accumulator;
						} else {
							var str = _v9.a;
							return A2($author$project$Generic$Acc$updateWithMathMacros, str, accumulator);
						}
					case 'textmacros':
						var _v10 = $author$project$Generic$Language$getVerbatimContent(block);
						if (_v10.$ === 1) {
							return accumulator;
						} else {
							var str = _v10.a;
							return A2($author$project$Generic$Acc$updateWithTextMacros, str, accumulator);
						}
					default:
						var name_ = heading.a;
						var _v11 = block.qh;
						if (!_v11.$) {
							var str = _v11.a;
							return A2($author$project$Generic$Acc$updateWithVerbatimBlock, block, accumulator);
						} else {
							return accumulator;
						}
				}
			default:
				var _v12 = $author$project$Generic$Acc$getNameContentIdTag(block);
				if (_v12.$ === 1) {
					return A2(
						$author$project$Generic$Acc$updateReferenceWithBlock,
						block,
						A2(
							$author$project$Generic$Acc$updateWithParagraph,
							block,
							_Utils_update(
								accumulator,
								{
									ae: A2($author$project$Generic$Acc$nextInListState, block.fC, accumulator.ae)
								})));
				} else {
					var name = _v12.a.bn;
					var content = _v12.a.iV;
					var id = _v12.a.hg;
					var tag = _v12.a.dy;
					return A2(
						$author$project$Generic$Acc$updateReferenceWithBlock,
						block,
						A2($author$project$Generic$Acc$updateWithParagraph, block, accumulator));
				}
		}
	});
var $author$project$Generic$Acc$transformAccumulateBlock = F2(
	function (acc_, block_) {
		var newAcc = A2($author$project$Generic$Acc$updateAccumulator, block_, acc_);
		return _Utils_Tuple2(
			newAcc,
			A2($author$project$Generic$Acc$transformBlock, newAcc, block_));
	});
var $author$project$Generic$Acc$transformAccumulateTree = F2(
	function (tree, acc) {
		return A3($author$project$Generic$Acc$mapAccumulate, $author$project$Generic$Acc$transformAccumulateBlock, acc, tree);
	});
var $author$project$Generic$Acc$transformAccumulate = F2(
	function (data, forest) {
		return function (_v1) {
			var acc_ = _v1.a;
			var ast_ = _v1.b;
			return _Utils_Tuple2(
				acc_,
				$elm$core$List$reverse(ast_));
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (tree, _v0) {
						var acc_ = _v0.a;
						var ast_ = _v0.b;
						return A2(
							$author$project$Generic$Acc$mapper,
							ast_,
							A2($author$project$Generic$Acc$transformAccumulateTree, tree, acc_));
					}),
				_Utils_Tuple2(
					$author$project$Generic$Acc$init(data),
					_List_Nil),
				forest));
	});
var $author$project$ScriptaV2$DifferentialCompiler$updateFunctions = function (lang) {
	return {
		$9: $author$project$Generic$Acc$transformAccumulate,
		lN: $author$project$ScriptaV2$DifferentialCompiler$changeLineNumber,
		lR: $author$project$Generic$PrimitiveBlock$eq,
		lS: $author$project$ScriptaV2$DifferentialCompiler$chunkLevel,
		iM: $author$project$ScriptaV2$DifferentialCompiler$toExprBlock(lang),
		iN: $author$project$ScriptaV2$DifferentialCompiler$chunker(lang),
		mc: $elm$core$Basics$identity,
		jd: $author$project$Generic$ForestTransform$forestFromBlocks(
			function ($) {
				return $.hh;
			}),
		ji: $author$project$ScriptaV2$DifferentialCompiler$messagesFromForest,
		jR: $author$project$ScriptaV2$DifferentialCompiler$pGetLineNumber,
		n3: $author$project$ScriptaV2$DifferentialCompiler$eGetLineNumber,
		oH: $author$project$Generic$BlockUtilities$setLineNumber
	};
};
var $author$project$ScriptaV2$DifferentialCompiler$init = F3(
	function (inclusionData, lang, str) {
		var initialData = A2($author$project$ScriptaV2$DifferentialCompiler$makeInitialData, inclusionData, lang);
		return A3(
			$author$project$Differential$AbstractDifferentialParser$init,
			$author$project$ScriptaV2$DifferentialCompiler$updateFunctions(lang),
			initialData,
			str + '\n');
	});
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$Common$Model$initCommon = function (flags) {
	var theme = function () {
		var _v0 = flags.h7;
		if ((!_v0.$) && (_v0.a === 'dark')) {
			return 1;
		} else {
			return 0;
		}
	}();
	var currentTime = $elm$time$Time$millisToPosix(flags.gT);
	return {
		lZ: {
			p9: $elm$core$Maybe$Nothing,
			qh: _List_Nil,
			ic: $mdgriffith$elm_ui$Element$text(''),
			uo: _List_Nil
		},
		l$: 0,
		iY: $elm$core$Maybe$Nothing,
		l0: 1,
		gT: currentTime,
		me: {qM: 0, qR: $elm$core$Dict$empty, rA: _List_Nil, r0: 100.0, sv: 0, tc: 1.0, kL: '-', tm: $elm$core$Maybe$Nothing, gt: (flags.ii.gt / 3) | 0},
		mg: false,
		mi: _List_Nil,
		ml: A3($author$project$ScriptaV2$DifferentialCompiler$init, $elm$core$Dict$empty, 1, ''),
		mm: {qb: 0, rb: 0},
		mC: 0,
		mD: _List_Nil,
		m$: '',
		ni: currentTime,
		nj: $elm$core$Maybe$Nothing,
		nk: currentTime,
		nl: $elm$core$Maybe$Nothing,
		nz: false,
		nG: $elm$core$Maybe$Nothing,
		od: '',
		oh: _List_Nil,
		oi: 0,
		oC: 0,
		oG: '',
		kL: '',
		oK: false,
		oR: '',
		o1: $elm$core$Maybe$Nothing,
		h7: theme,
		ic: '',
		pm: $elm$core$Maybe$Nothing,
		le: flags.ii.le,
		gt: flags.ii.gt
	};
};
var $elm$time$Time$Name = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$core$Process$sleep = _Process_sleep;
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $author$project$Ports$sqliteExecute = _Platform_outgoingPort('sqliteExecute', $elm$core$Basics$identity);
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Storage$SQLite$deleteDocument = F2(
	function (toMsg, id) {
		return $author$project$Ports$sqliteExecute(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('deleteDocument')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					])));
	});
var $author$project$Storage$SQLite$initStorage = function (toMsg) {
	return $author$project$Ports$sqliteExecute(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('init'))
				])));
};
var $author$project$Storage$SQLite$listDocuments = function (toMsg) {
	return $author$project$Ports$sqliteExecute(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('listDocuments'))
				])));
};
var $author$project$Storage$SQLite$loadDocument = F2(
	function (toMsg, id) {
		return $author$project$Ports$sqliteExecute(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('loadDocument')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					])));
	});
var $author$project$Storage$SQLite$loadLastDocumentId = function (toMsg) {
	return $author$project$Ports$sqliteExecute(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('loadLastDocumentId'))
				])));
};
var $author$project$Storage$SQLite$loadUserName = function (toMsg) {
	return $author$project$Ports$sqliteExecute(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('loadUserName'))
				])));
};
var $author$project$Document$encodeTheme = function (theme) {
	if (!theme) {
		return $elm$json$Json$Encode$string('light');
	} else {
		return $elm$json$Json$Encode$string('dark');
	}
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0;
	return millis;
};
var $author$project$Document$encodeDocument = function (doc) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$elm$json$Json$Encode$string(doc.hg)),
				_Utils_Tuple2(
				'title',
				$elm$json$Json$Encode$string(doc.ic)),
				_Utils_Tuple2(
				'author',
				$elm$json$Json$Encode$string(doc.iA)),
				_Utils_Tuple2(
				'content',
				$elm$json$Json$Encode$string(doc.iV)),
				_Utils_Tuple2(
				'theme',
				$author$project$Document$encodeTheme(doc.h7)),
				_Utils_Tuple2(
				'createdAt',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(doc.iX))),
				_Utils_Tuple2(
				'modifiedAt',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(doc.sf)))
			]));
};
var $author$project$Storage$SQLite$saveDocument = F2(
	function (toMsg, doc) {
		return $author$project$Ports$sqliteExecute(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('saveDocument')),
						_Utils_Tuple2(
						'document',
						$author$project$Document$encodeDocument(doc))
					])));
	});
var $author$project$Storage$SQLite$saveLastDocumentId = F2(
	function (toMsg, id) {
		return $author$project$Ports$sqliteExecute(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('saveLastDocumentId')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					])));
	});
var $author$project$Storage$SQLite$saveUserName = F2(
	function (toMsg, name) {
		return $author$project$Ports$sqliteExecute(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('saveUserName')),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name))
					])));
	});
var $author$project$Storage$SQLite$storage = function (toMsg) {
	return {
		qX: $author$project$Storage$SQLite$deleteDocument(toMsg),
		mY: $author$project$Storage$SQLite$initStorage(toMsg),
		rY: $author$project$Storage$SQLite$listDocuments(toMsg),
		rZ: $author$project$Storage$SQLite$loadDocument(toMsg),
		r_: $author$project$Storage$SQLite$loadLastDocumentId(toMsg),
		r$: $author$project$Storage$SQLite$loadUserName(toMsg),
		kH: $author$project$Storage$SQLite$saveDocument(toMsg),
		kI: $author$project$Storage$SQLite$saveLastDocumentId(toMsg),
		tb: $author$project$Storage$SQLite$saveUserName(toMsg)
	};
};
var $author$project$MainSQLite$init = function (flags) {
	var storage = $author$project$Storage$SQLite$storage($author$project$MainSQLite$StorageMsg);
	var common = $author$project$Common$Model$initCommon(flags);
	var updatedCommon = _Utils_update(
		common,
		{oK: true});
	return _Utils_Tuple2(
		{h: updatedCommon, kY: $author$project$Storage$SQLite$init},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					storage.mY,
					A2(
					$elm$core$Task$perform,
					A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$Tick),
					$elm$time$Time$now),
					A2(
					$elm$core$Task$perform,
					$elm$core$Basics$always(
						$author$project$MainSQLite$CommonMsg($author$project$Common$Model$LoadUserNameDelayed)),
					$elm$core$Process$sleep(100))
				])));
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Common$Model$AutoSave = function (a) {
	return {$: 12, a: a};
};
var $author$project$Common$Model$GotNewWindowDimensions = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$Common$Model$KeyMsg = function (a) {
	return {$: 5, a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $author$project$Constants$constants = {lz: 1000, nE: 5};
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {ok: processes, o$: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 1) {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.ok;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.o$);
		if (_v0.$ === 1) {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Browser$Events$Window = 1;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {of: pids, oZ: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (!node) {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {mp: event, ne: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (!node) {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.of,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.ne;
		var event = _v0.mp;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.oZ);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		1,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $ohanhi$keyboard$Keyboard$Down = function (a) {
	return {$: 0, a: a};
};
var $ohanhi$keyboard$Keyboard$Up = function (a) {
	return {$: 1, a: a};
};
var $ohanhi$keyboard$Keyboard$RawKey = $elm$core$Basics$identity;
var $ohanhi$keyboard$Keyboard$eventKeyDecoder = A2(
	$elm$json$Json$Decode$field,
	'key',
	A2($elm$json$Json$Decode$map, $elm$core$Basics$identity, $elm$json$Json$Decode$string));
var $elm$browser$Browser$Events$Document = 0;
var $elm$browser$Browser$Events$onKeyDown = A2($elm$browser$Browser$Events$on, 0, 'keydown');
var $ohanhi$keyboard$Keyboard$downs = function (toMsg) {
	return $elm$browser$Browser$Events$onKeyDown(
		A2($elm$json$Json$Decode$map, toMsg, $ohanhi$keyboard$Keyboard$eventKeyDecoder));
};
var $elm$browser$Browser$Events$onKeyUp = A2($elm$browser$Browser$Events$on, 0, 'keyup');
var $ohanhi$keyboard$Keyboard$ups = function (toMsg) {
	return $elm$browser$Browser$Events$onKeyUp(
		A2($elm$json$Json$Decode$map, toMsg, $ohanhi$keyboard$Keyboard$eventKeyDecoder));
};
var $ohanhi$keyboard$Keyboard$subscriptions = $elm$core$Platform$Sub$batch(
	_List_fromArray(
		[
			$ohanhi$keyboard$Keyboard$downs($ohanhi$keyboard$Keyboard$Down),
			$ohanhi$keyboard$Keyboard$ups($ohanhi$keyboard$Keyboard$Up)
		]));
var $author$project$Storage$Interface$DocumentsListed = function (a) {
	return {$: 3, a: a};
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Storage$Interface$DocumentDeleted = function (a) {
	return {$: 2, a: a};
};
var $author$project$Storage$Interface$DocumentLoaded = function (a) {
	return {$: 1, a: a};
};
var $author$project$Storage$Interface$DocumentSaved = function (a) {
	return {$: 0, a: a};
};
var $author$project$Storage$Interface$LastDocumentIdLoaded = function (a) {
	return {$: 6, a: a};
};
var $author$project$Storage$Interface$LastDocumentIdSaved = function (a) {
	return {$: 7, a: a};
};
var $author$project$Storage$Interface$StorageInitialized = function (a) {
	return {$: 8, a: a};
};
var $author$project$Storage$Interface$UserNameLoaded = function (a) {
	return {$: 4, a: a};
};
var $author$project$Storage$Interface$UserNameSaved = function (a) {
	return {$: 5, a: a};
};
var $author$project$Document$Document = F7(
	function (id, title, author, content, theme, createdAt, modifiedAt) {
		return {iA: author, iV: content, iX: createdAt, hg: id, sf: modifiedAt, h7: theme, ic: title};
	});
var $elm$json$Json$Decode$map7 = _Json_map7;
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$Document$themeDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		switch (str) {
			case 'light':
				return $elm$json$Json$Decode$succeed(0);
			case 'dark':
				return $elm$json$Json$Decode$succeed(1);
			default:
				return $elm$json$Json$Decode$fail('Unknown theme');
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Document$documentDecoder = A8(
	$elm$json$Json$Decode$map7,
	$author$project$Document$Document,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'author', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'theme', $author$project$Document$themeDecoder),
	A2(
		$elm$json$Json$Decode$field,
		'createdAt',
		A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)),
	A2(
		$elm$json$Json$Decode$field,
		'modifiedAt',
		A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Storage$SQLite$sqliteResultDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (msgType) {
		switch (msgType) {
			case 'documentSaved':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$DocumentSaved,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2($elm$json$Json$Decode$field, 'document', $author$project$Document$documentDecoder))
							])));
			case 'documentLoaded':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$DocumentLoaded,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2($elm$json$Json$Decode$field, 'document', $author$project$Document$documentDecoder))
							])));
			case 'documentDeleted':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$DocumentDeleted,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string))
							])));
			case 'documentsListed':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$DocumentsListed,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2(
									$elm$json$Json$Decode$field,
									'documents',
									$elm$json$Json$Decode$list($author$project$Document$documentDecoder)))
							])));
			case 'userNameLoaded':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$UserNameLoaded,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2(
									$elm$json$Json$Decode$field,
									'userName',
									$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)))
							])));
			case 'userNameSaved':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$UserNameSaved,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string))
							])));
			case 'initialized':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$StorageInitialized,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								$elm$json$Json$Decode$succeed(
								$elm$core$Result$Ok(0))
							])));
			case 'lastDocumentIdLoaded':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$LastDocumentIdLoaded,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2(
									$elm$json$Json$Decode$field,
									'lastDocumentId',
									$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)))
							])));
			case 'lastDocumentIdSaved':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Storage$Interface$LastDocumentIdSaved,
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Err,
								A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)),
								A2(
								$elm$json$Json$Decode$map,
								$elm$core$Result$Ok,
								A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string))
							])));
			default:
				return $elm$json$Json$Decode$fail('Unknown message type: ' + msgType);
		}
	},
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $author$project$Storage$SQLite$decodeSQLiteResult = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Storage$SQLite$sqliteResultDecoder, value);
	if (!_v0.$) {
		var msg = _v0.a;
		return msg;
	} else {
		var err = _v0.a;
		return $author$project$Storage$Interface$DocumentsListed(
			$elm$core$Result$Err(
				$elm$json$Json$Decode$errorToString(err)));
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Ports$sqliteResult = _Platform_incomingPort('sqliteResult', $elm$json$Json$Decode$value);
var $author$project$Storage$SQLite$subscriptions = function (toMsg) {
	return $author$project$Ports$sqliteResult(
		A2($elm$core$Basics$composeR, $author$project$Storage$SQLite$decodeSQLiteResult, toMsg));
};
var $author$project$MainSQLite$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$elm$browser$Browser$Events$onResize(
				F2(
					function (w, h) {
						return $author$project$MainSQLite$CommonMsg(
							A2($author$project$Common$Model$GotNewWindowDimensions, w, h));
					})),
				A2(
				$elm$core$Platform$Sub$map,
				A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$KeyMsg),
				$ohanhi$keyboard$Keyboard$subscriptions),
				A2(
				$elm$time$Time$every,
				30 * 1000,
				A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$AutoSave)),
				A2(
				$elm$time$Time$every,
				$author$project$Constants$constants.lz,
				A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$Tick)),
				$author$project$Storage$SQLite$subscriptions($author$project$MainSQLite$StorageMsg)
			]));
};
var $author$project$Common$Model$CreateNewDocument = {$: 7};
var $author$project$Common$Model$GeneratedId = function (a) {
	return {$: 14, a: a};
};
var $author$project$Common$Model$PrintProcessing = 1;
var $author$project$Common$Model$PrintReady = 2;
var $author$project$Common$Model$ResetLoadFlag = {$: 24};
var $author$project$Common$Model$SaveDocument = {$: 8};
var $author$project$ScriptaV2$Compiler$SuppressDocumentBlocks = 1;
var $author$project$Generic$ASTTools$changeName = F3(
	function (oldName, newName, block) {
		return _Utils_eq(
			block.fC,
			$author$project$Generic$Language$Ordinary(oldName)) ? _Utils_update(
			block,
			{
				fC: $author$project$Generic$Language$Ordinary(newName)
			}) : block;
	});
var $author$project$Generic$Language$getName = function (block) {
	return $author$project$Generic$Language$getNameFromHeading(block.fC);
};
var $author$project$Generic$ASTTools$matchBlockName = F2(
	function (key, block) {
		return _Utils_eq(
			$elm$core$Maybe$Just(key),
			$author$project$Generic$Language$getName(block));
	});
var $author$project$Generic$ASTTools$filterBlocksOnName = F2(
	function (name, blocks) {
		return A2(
			$elm$core$List$filter,
			$author$project$Generic$ASTTools$matchBlockName(name),
			blocks);
	});
var $author$project$Generic$ASTTools$getBlockByName = F2(
	function (name, ast) {
		return $elm$core$List$head(
			A2(
				$author$project$Generic$ASTTools$filterBlocksOnName,
				name,
				$elm$core$List$concat(
					A2($elm$core$List$map, $author$project$Library$Tree$flatten, ast))));
	});
var $author$project$Generic$ASTTools$banner = function (ast) {
	return A2(
		$elm$core$Maybe$map,
		A2($author$project$Generic$ASTTools$changeName, 'banner', 'visibleBanner'),
		A2($author$project$Generic$ASTTools$getBlockByName, 'banner', ast));
};
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $elm$core$Basics$round = _Basics_round;
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $author$project$Generic$ASTTools$labelName = function (tree) {
	return $author$project$Generic$Language$getName(
		$maca$elm_rose_tree$RoseTree$Tree$value(tree));
};
var $author$project$Generic$ASTTools$filterForestOnLabelNames = F2(
	function (predicate, forest) {
		return A2(
			$elm$core$List$filter,
			function (tree) {
				return predicate(
					$author$project$Generic$ASTTools$labelName(tree));
			},
			forest);
	});
var $author$project$ScriptaV2$Compiler$filterForest2 = function (forest) {
	return A2(
		$author$project$Generic$ASTTools$filterForestOnLabelNames,
		function (name) {
			return !_Utils_eq(
				name,
				$elm$core$Maybe$Just('title'));
		},
		A2(
			$author$project$Generic$ASTTools$filterForestOnLabelNames,
			function (name) {
				return !_Utils_eq(
					name,
					$elm$core$Maybe$Just('document'));
			},
			forest));
};
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 7, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.k2;
	var right = _v0.kC;
	var bottom = _v0.iG;
	var left = _v0.jG;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 9};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$asParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 0};
var $mdgriffith$elm_ui$Internal$Style$classes = {pI: 'a', ip: 'atv', pO: 'ab', pP: 'cx', pQ: 'cy', pR: 'acb', pS: 'accx', pT: 'accy', pU: 'acr', lq: 'al', lr: 'ar', pW: 'at', iq: 'ah', ir: 'av', p$: 's', qc: 'bh', qd: 'b', qi: 'w7', qk: 'bd', ql: 'bdt', gz: 'bn', qm: 'bs', gC: 'cpe', qy: 'cp', qz: 'cpx', qA: 'cpy', lX: 'c', gM: 'ctr', gN: 'cb', gO: 'ccx', cq: 'ccy', fd: 'cl', gP: 'cr', qK: 'ct', qO: 'cptr', qP: 'ctxt', H: 'fcs', mz: 'focus-within', ro: 'fs', rp: 'g', jm: 'hbh', jn: 'hc', mM: 'he', jo: 'hf', mN: 'hfp', rw: 'hv', rC: 'ic', rF: 'fr', hi: 'lbl', rI: 'iml', rJ: 'imlf', rK: 'imlp', rL: 'implw', rM: 'it', rR: 'i', hr: 'lnk', es: 'nb', nW: 'notxt', sz: 'ol', sA: 'or', ds: 'oq', sI: 'oh', n7: 'pg', sJ: 'p', sL: 'ppe', s7: 'ui', ta: 'r', th: 'sb', ti: 'sbx', tj: 'sby', tl: 'sbt', tr: 'e', ts: 'cap', tu: 'sev', tD: 'sk', o5: 't', tV: 'tc', tW: 'w8', tX: 'w2', tY: 'w9', tZ: 'tj', h5: 'tja', t_: 'tl', t$: 'w3', t1: 'w5', t2: 'w4', t3: 'tr', t4: 'w6', t5: 'w1', t6: 'tun', aY: 'ts', dF: 'clr', uu: 'u', lc: 'wc', pC: 'we', ld: 'wf', pD: 'wfp', lg: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lX);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.rp);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.n7);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.sJ);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ta);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.tr);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 1:
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 2:
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 3:
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 4:
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = 2;
var $mdgriffith$elm_ui$Internal$Model$asEl = 2;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 0:
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 1:
			return 'auto';
		case 2:
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 3:
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 13:
			var name = style.a;
			return name;
		case 12:
			var name = style.a;
			var o = style.b;
			return name;
		case 0:
			var _class = style.a;
			return _class;
		case 1:
			var name = style.a;
			return name;
		case 2:
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 3:
			var _class = style.a;
			return _class;
		case 4:
			var _class = style.a;
			return _class;
		case 5:
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 7:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 6:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 8:
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.hS)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.fc)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.tv.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.tv.b)))))));
		case 9:
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.ta) + ('-' + ($elm$core$String$fromInt(pos.lW) + ('-' + ($elm$core$String$fromInt(pos.uE) + ('-' + $elm$core$String$fromInt(pos.mL)))))));
		case 11:
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector) {
					case 0:
						return 'fs';
					case 1:
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.m2 ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.e.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.e.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.dR) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.eJ) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.qF))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mz) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.qj),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.p6),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										dR: shadow.dR,
										qF: shadow.qF,
										m2: false,
										e: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.e)),
										eJ: shadow.eJ
									}));
						},
						focus.tq),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.qj),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.p6),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										dR: shadow.dR,
										qF: shadow.qF,
										m2: false,
										e: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.e)),
										eJ: shadow.eJ
									}));
						},
						focus.tq),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = 3;
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = 2;
var $mdgriffith$elm_ui$Internal$Style$Self = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Bottom = 1;
var $mdgriffith$elm_ui$Internal$Style$CenterX = 4;
var $mdgriffith$elm_ui$Internal$Style$CenterY = 5;
var $mdgriffith$elm_ui$Internal$Style$Top = 0;
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[0, 1, 2, 3, 4, 5]);
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qK);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gN);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gP);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fd);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gO);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cq);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pW);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pO);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lr);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lq);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pP);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pQ);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(alignment),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jm),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qc),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tl),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.o5),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ld),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jn),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ld),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pD),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lc),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 2:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 3:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 4:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = 0;
var $mdgriffith$elm_ui$Internal$Style$Behind = 5;
var $mdgriffith$elm_ui$Internal$Style$Below = 1;
var $mdgriffith$elm_ui$Internal$Style$OnLeft = 3;
var $mdgriffith$elm_ui$Internal$Style$OnRight = 2;
var $mdgriffith$elm_ui$Internal$Style$Within = 4;
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = 0;
	var _v0 = function () {
		switch (loc) {
			case 0:
				return 0;
			case 1:
				return 0;
			case 2:
				return 0;
			case 3:
				return 0;
			case 4:
				return 0;
			default:
				return 0;
		}
	}();
	return _List_fromArray(
		[0, 1, 2, 3, 4, 5]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tr),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rC))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ld),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.s7),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rF),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.es),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.es),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tr),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pI),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ld),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qd),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 2:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sA),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 3:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sz),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 4:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rF),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qc),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nW),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qO),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qP),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sL),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gC),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dF),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ds),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.rw, $mdgriffith$elm_ui$Internal$Style$classes.dF)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.rw, $mdgriffith$elm_ui$Internal$Style$classes.ds)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.H, $mdgriffith$elm_ui$Internal$Style$classes.dF)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.H, $mdgriffith$elm_ui$Internal$Style$classes.ds)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.ip, $mdgriffith$elm_ui$Internal$Style$classes.dF)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.ip, $mdgriffith$elm_ui$Internal$Style$classes.ds)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aY),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.th),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ti),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ta),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tj),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tr),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qA),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lc),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ql),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qm),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.o5),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rM),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tr),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ta),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pC),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hr),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mN),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ld),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pU,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pS,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pP),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pS,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pP),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pS,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pQ),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.pS + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.pU + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.pS)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tu),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mM),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jo),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ld),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pD),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lc),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pR,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pT,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pQ),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pT,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pQ),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.pT,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pQ),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.pT + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.pR + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.pT)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tu),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rp),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 1:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 2:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 3:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 4:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.n7),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$ + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.p$ + ($mdgriffith$elm_ui$Internal$Style$selfName(3) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.p$))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.p$ + ($mdgriffith$elm_ui$Internal$Style$selfName(2) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.p$))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rI),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rL),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tr),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rK),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rJ),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sJ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jm),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qc),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.o5),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sJ),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tr),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pC),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rF),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qc),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.pI),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qd),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sA),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.sz),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.o5),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ta),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rp),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t5),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t$),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t2),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t1),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t4),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.qi),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tW),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.rR),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tD),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.uu),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.uu),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tD)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t6),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tZ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h5),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.tV),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t3),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.t_),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.p$ + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.p$ + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ta) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ta) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return {gJ: closing, au: _List_Nil, cP: _List_Nil, bT: selector};
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 0:
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								cP: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.cP)
							});
					case 3:
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								au: A2(
									$elm$core$List$cons,
									{gJ: '\n}', au: _List_Nil, cP: props, bT: '@supports (' + (prop + (':' + (value + (') {' + parent.bT))))},
									rendered.au)
							});
					case 5:
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								au: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.bT + (' + ' + selector), ''),
										adjRules),
									rendered.au)
							});
					case 1:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								au: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.bT + (' > ' + child), ''),
										childRules),
									rendered.au)
							});
					case 2:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								au: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.bT + (' ' + child), ''),
										childRules),
									rendered.au)
							});
					case 4:
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								au: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.bT, descriptor),
											''),
										descriptorRules),
									rendered.au)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								au: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.bT, ''),
										batched),
									rendered.au)
							});
				}
			});
		return A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender);
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.cP;
		if (!_v2.b) {
			return '';
		} else {
			return rule.bT + ('{' + (renderValues(rule.cP) + (rule.gJ + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.au)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.fP;
	switch (_v0) {
		case 0:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 1:
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 0:
			return 'serif';
		case 1:
			return 'sans-serif';
		case 2:
			return 'monospace';
		case 3:
			var name = font.a;
			return '\"' + (name + '\"');
		case 4:
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.bn;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return name === 'smcp';
		case 1:
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.pt);
	} else {
		return false;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 1) {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo) {
				case 1:
					var _v2 = options.rw;
					switch (_v2) {
						case 0:
							return _List_Nil;
						case 2:
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 0:
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.p$ + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.p$) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return '\"' + (name + '\"');
		case 1:
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.pt)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 0:
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 13:
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 12:
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 2:
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 1:
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 3:
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 4:
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 5:
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.tr;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.ta;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.lg + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.lr;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.sJ;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.n7;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.lq;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.lX;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.p$;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 7:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 6:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 8:
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 0:
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 1:
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 1) {
										if (_v2.b.$ === 1) {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 1) {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 2:
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 1) {
										if (_v7.b.$ === 1) {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 1) {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 3:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.tv.a);
				var ySpacing = toGridLength(template.tv.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.hS)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.fc)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.fc)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.tv.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.tv.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.fc)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.hS)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.fc)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.tv.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.tv.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 9:
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.ta) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.mL) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.lW) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.uE) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.ta) + (' / ' + ($elm$core$String$fromInt(position.ta + position.mL) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.lW) + (' / ' + ($elm$core$String$fromInt(position.lW + position.uE) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.ta) + ('-' + ($elm$core$String$fromInt(position.lW) + ('-' + ($elm$core$String$fromInt(position.uE) + ('-' + $elm$core$String$fromInt(position.mL)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 11:
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((!_v12.a.$) && (!_v12.b.$)) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.o5 + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.o5)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.ts, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.ro, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ts + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.ts))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ts + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.o5 + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.ts + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.o5)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {mL: height / size, eJ: size, pw: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.qt, adjustment.qa, adjustment.q_, adjustment.r2]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.q_,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.qa,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.qt,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		qt: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		mF: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.mL)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.pw) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.eJ) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 1) {
					if (face.$ === 5) {
						var _with = face.a;
						var _v2 = _with.pM;
						if (_v2.$ === 1) {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.mF;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.qt;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 4) {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 1) {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 1) {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					oy: _Utils_ap(
						rendered.oy,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					gl: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 1) {
							return rendered.gl;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.gl);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{oy: _List_Nil, gl: _List_Nil},
			stylesheet);
		var topLevel = _v0.gl;
		var rules = _v0.oy;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.fP;
		switch (_v0) {
			case 0:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 1:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.H)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.H)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 1) {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return keyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return unkeyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 0:
					return A2(createNode, 'div', attributes);
				case 1:
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.tr))
									]))
							]));
			}
		}();
		switch (parentContext) {
			case 0:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.p$, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.gM, $mdgriffith$elm_ui$Internal$Style$classes.cq, $mdgriffith$elm_ui$Internal$Style$classes.pU])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.p$, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.gM, $mdgriffith$elm_ui$Internal$Style$classes.cq, $mdgriffith$elm_ui$Internal$Style$classes.pS])))
						]),
					_List_fromArray(
						[html])) : html));
			case 1:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.p$, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.gM, $mdgriffith$elm_ui$Internal$Style$classes.pT])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.p$, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.gM, $mdgriffith$elm_ui$Internal$Style$classes.pR])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.o5 + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.lc + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jn)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.p$ + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.o5 + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.ld + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jo)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.ry, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.oY : _Utils_ap(styled.oY, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.ry, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.oY : _Utils_ap(styled.oY, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.ry, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.oY : _Utils_ap(styled.oY, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.ry, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.oY : _Utils_ap(styled.oY, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 1) {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.oY : _Utils_ap(rendered.oY, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.dd,
						rendered.nX,
						rendered.iz,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.qw)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						ry: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.dd,
							rendered.nX,
							rendered.iz,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.qw))),
						oY: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.oY : _Utils_ap(rendered.oY, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.dd,
						rendered.nX,
						rendered.iz,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.qw)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						ry: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.dd,
							rendered.nX,
							rendered.iz,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.qw))),
						oY: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location) {
							case 0:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.es, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.pI]));
							case 1:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.es, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.qd]));
							case 2:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.es, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.sA]));
							case 3:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.es, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.sz]));
							case 4:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.es, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.rF]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.es, $mdgriffith$elm_ui$Internal$Style$classes.tr, $mdgriffith$elm_ui$Internal$Style$classes.qc]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 3:
							return $elm$virtual_dom$VirtualDom$text('');
						case 2:
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 0:
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.ry, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 0:
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 1:
				var existingBehind = existing.a;
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 2:
				var existingInFront = existing.a;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 1:
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.iq + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lq);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.iq + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lr);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.iq + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.pP);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.ir + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.pW);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.ir + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.pO);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.ir + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.pQ);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 0:
				switch (component.$) {
					case 0:
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 1:
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 2:
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 1:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 1:
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 2:
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 1:
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 2:
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 3:
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 4:
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 0:
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.mM + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.jn,
				_List_Nil);
		case 2:
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.jo,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.mN + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.p$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.lX + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 0:
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.pC + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.lc,
				_List_Nil);
		case 2:
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.ld,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.pD + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.p$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ta + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 3) {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 2:
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 7:
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 1) {
					return {
						iz: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						qw: children,
						dd: has,
						nX: node,
						oY: styles
					};
				} else {
					var _class = _v1.a;
					return {
						iz: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						qw: children,
						dd: has,
						nX: node,
						oY: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 0:
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 3:
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 1:
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 4:
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 10:
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 7:
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 0:
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.pC + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lc),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ld),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.pD + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.p$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ta + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 8:
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 0:
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.mM + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.jn + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.jo + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.mN + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.p$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.lX + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 2:
						var description = attribute.a;
						switch (description.$) {
							case 0:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 1:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 2:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 3:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 4:
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 9:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 8:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 5:
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 6:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 9:
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 3:
									return styles;
								case 2:
									var str = elem.a;
									return styles;
								case 0:
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.oY);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 6:
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 7, a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Model$AsColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$asColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 1};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.qK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fd)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Render$BlockType$Answer = 1;
var $author$project$Render$BlockType$Author = 2;
var $author$project$Render$BlockType$Banner = 8;
var $author$project$Render$BlockType$Bibitem = 4;
var $author$project$Render$BlockType$Blue = 7;
var $author$project$Render$BlockType$Box = 0;
var $author$project$Render$BlockType$Center = 1;
var $author$project$Render$BlockType$Collection = 3;
var $author$project$Render$BlockType$Comment = 2;
var $author$project$Render$BlockType$Compact = 4;
var $author$project$Render$BlockType$ContainerBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$Render$BlockType$Contents = 7;
var $author$project$Render$BlockType$Date = 3;
var $author$project$Render$BlockType$Description = 2;
var $author$project$Render$BlockType$Document = 11;
var $author$project$Render$BlockType$DocumentBlock = function (a) {
	return {$: 2, a: a};
};
var $author$project$Render$BlockType$Env = 1;
var $author$project$Render$BlockType$Identity = 3;
var $author$project$Render$BlockType$Indent = 0;
var $author$project$Render$BlockType$InteractiveBlock = function (a) {
	return {$: 3, a: a};
};
var $author$project$Render$BlockType$Item = 0;
var $author$project$Render$BlockType$ListBlock = function (a) {
	return {$: 4, a: a};
};
var $author$project$Render$BlockType$MiscBlock = function (a) {
	return {$: 5, a: a};
};
var $author$project$Render$BlockType$Numbered = 1;
var $author$project$Render$BlockType$Question = 0;
var $author$project$Render$BlockType$Quotation = 2;
var $author$project$Render$BlockType$Red = 5;
var $author$project$Render$BlockType$Red2 = 6;
var $author$project$Render$BlockType$Reveal = 2;
var $author$project$Render$BlockType$RunningHead = 10;
var $author$project$Render$BlockType$Section = 4;
var $author$project$Render$BlockType$Subheading = 6;
var $author$project$Render$BlockType$Subtitle = 1;
var $author$project$Render$BlockType$Tags = 12;
var $author$project$Render$BlockType$TextBlock = function (a) {
	return {$: 0, a: a};
};
var $author$project$Render$BlockType$Title = 0;
var $author$project$Render$BlockType$Type = 13;
var $author$project$Render$BlockType$UnnumberedSection = 5;
var $author$project$Render$BlockType$VisibleBanner = 9;
var $author$project$Render$BlockType$fromString = function (str) {
	switch (str) {
		case 'indent':
			return $author$project$Render$BlockType$TextBlock(0);
		case 'center':
			return $author$project$Render$BlockType$TextBlock(1);
		case 'quotation':
			return $author$project$Render$BlockType$TextBlock(2);
		case 'identity':
			return $author$project$Render$BlockType$TextBlock(3);
		case 'compact':
			return $author$project$Render$BlockType$TextBlock(4);
		case 'red':
			return $author$project$Render$BlockType$TextBlock(5);
		case 'red2':
			return $author$project$Render$BlockType$TextBlock(6);
		case 'blue':
			return $author$project$Render$BlockType$TextBlock(7);
		case 'box':
			return $author$project$Render$BlockType$ContainerBlock(0);
		case 'env':
			return $author$project$Render$BlockType$ContainerBlock(1);
		case 'comment':
			return $author$project$Render$BlockType$ContainerBlock(2);
		case 'collection':
			return $author$project$Render$BlockType$ContainerBlock(3);
		case 'bibitem':
			return $author$project$Render$BlockType$ContainerBlock(4);
		case 'title':
			return $author$project$Render$BlockType$DocumentBlock(0);
		case 'subtitle':
			return $author$project$Render$BlockType$DocumentBlock(1);
		case 'author':
			return $author$project$Render$BlockType$DocumentBlock(2);
		case 'date':
			return $author$project$Render$BlockType$DocumentBlock(3);
		case 'section':
			return $author$project$Render$BlockType$DocumentBlock(4);
		case 'section*':
			return $author$project$Render$BlockType$DocumentBlock(5);
		case 'subheading':
			return $author$project$Render$BlockType$DocumentBlock(6);
		case 'sh':
			return $author$project$Render$BlockType$DocumentBlock(6);
		case 'contents':
			return $author$project$Render$BlockType$DocumentBlock(7);
		case 'banner':
			return $author$project$Render$BlockType$DocumentBlock(8);
		case 'visibleBanner':
			return $author$project$Render$BlockType$DocumentBlock(9);
		case 'runninghead_':
			return $author$project$Render$BlockType$DocumentBlock(10);
		case 'document':
			return $author$project$Render$BlockType$DocumentBlock(11);
		case 'tags':
			return $author$project$Render$BlockType$DocumentBlock(12);
		case 'type':
			return $author$project$Render$BlockType$DocumentBlock(13);
		case 'q':
			return $author$project$Render$BlockType$InteractiveBlock(0);
		case 'a':
			return $author$project$Render$BlockType$InteractiveBlock(1);
		case 'reveal':
			return $author$project$Render$BlockType$InteractiveBlock(2);
		case 'item':
			return $author$project$Render$BlockType$ListBlock(0);
		case 'numbered':
			return $author$project$Render$BlockType$ListBlock(1);
		case 'desc':
			return $author$project$Render$BlockType$ListBlock(2);
		default:
			return $author$project$Render$BlockType$MiscBlock(str);
	}
};
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $author$project$Render$Helper$selectedColor = F2(
	function (id, settings) {
		return _Utils_eq(id, settings.kL) ? $mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 1.0)) : $mdgriffith$elm_ui$Element$Background$color(settings.p6);
	});
var $author$project$Render$Helper$topPaddingForIndentedElements = 10;
var $author$project$Render$Indentation$topPaddingForIndentedElements = $author$project$Render$Helper$topPaddingForIndentedElements;
var $author$project$Render$Indentation$indentOrdinaryBlock = F4(
	function (indent, id, settings, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$Render$Helper$selectedColor, id, settings),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 0, k2: $author$project$Render$Indentation$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$OrdinaryBlock$indentOrdinaryBlock = F4(
	function (indent, id, settings, x) {
		return A4($author$project$Render$Indentation$indentOrdinaryBlock, indent, id, settings, x);
	});
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = 0;
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY(0);
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$rgba = F4(
	function (r, g, b, a) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, a);
	});
var $author$project$Render$NewColor$blue300 = A4($avh4$elm_color$Color$rgba, 0.54, 0.71, 0.94, 1);
var $author$project$Render$NewColor$gray100 = A4($avh4$elm_color$Color$rgba, 0.96, 0.96, 0.96, 1);
var $author$project$Render$NewColor$gray700 = A4($avh4$elm_color$Color$rgba, 0.33, 0.35, 0.37, 1);
var $author$project$Render$NewColor$gray900 = A4($avh4$elm_color$Color$rgba, 0.19, 0.21, 0.23, 1);
var $author$project$Render$NewColor$indigo500 = A4($avh4$elm_color$Color$rgba, 0.35, 0.38, 0.67, 1);
var $author$project$Render$Settings$darkTheme = {
	e6: $author$project$Render$NewColor$gray900,
	iF: $author$project$Render$NewColor$gray700,
	lV: A4($avh4$elm_color$Color$rgba, 0.298, 0.314, 0.329, 1),
	gK: $author$project$Render$NewColor$gray100,
	eb: $author$project$Render$NewColor$indigo500,
	hr: $author$project$Render$NewColor$blue300,
	sx: $author$project$Render$NewColor$gray900,
	j8: A4($avh4$elm_color$Color$rgba, 0.835, 0.847, 0.882, 1),
	o5: A4($avh4$elm_color$Color$rgba, 0.835, 0.847, 0.882, 1)
};
var $author$project$Render$NewColor$blue500 = A4($avh4$elm_color$Color$rgba, 0.0, 0.48, 1.0, 1);
var $author$project$Render$NewColor$gray300 = A4($avh4$elm_color$Color$rgba, 0.82, 0.82, 0.82, 1);
var $author$project$Render$NewColor$gray950 = A4($avh4$elm_color$Color$rgba, 0.09, 0.11, 0.13, 1);
var $author$project$Render$NewColor$indigo200 = A4($avh4$elm_color$Color$rgba, 0.82, 0.84, 0.93, 1);
var $avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var $author$project$Render$Settings$lightTheme = {
	e6: A4($avh4$elm_color$Color$rgba, 1, 1, 1, 1),
	iF: $author$project$Render$NewColor$gray300,
	lV: A4($avh4$elm_color$Color$rgba, 0.835, 0.847, 0.882, 1),
	gK: $author$project$Render$NewColor$gray900,
	eb: $author$project$Render$NewColor$indigo200,
	hr: $author$project$Render$NewColor$blue500,
	sx: A3($avh4$elm_color$Color$rgb, 1, 1, 1),
	j8: $author$project$Render$NewColor$gray950,
	o5: $author$project$Render$NewColor$gray950
};
var $author$project$Render$Settings$getThemedColor = F2(
	function (keyAccess, theme) {
		return keyAccess(
			function () {
				if (theme === 1) {
					return $author$project$Render$Settings$darkTheme;
				} else {
					return $author$project$Render$Settings$lightTheme;
				}
			}());
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {ls: a, iE: b, jk: g, ky: r};
};
var $author$project$Render$Settings$toElementColor = function (color) {
	var c = $avh4$elm_color$Color$toRgba(color);
	return A4($mdgriffith$elm_ui$Element$rgba, c.ky, c.jk, c.iE, c.ls);
};
var $author$project$Render$Settings$getThemedElementColor = F2(
	function (keyAccess, theme) {
		return $author$project$Render$Settings$toElementColor(
			A2($author$project$Render$Settings$getThemedColor, keyAccess, theme));
	});
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $author$project$Render$Sync$highlightIfIdSelected = F3(
	function (id, settings, attrs) {
		return _Utils_eq(id, settings.kL) ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Background$color(
				A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.eb;
					},
					settings.h7)),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$padding(8),
				attrs)) : attrs;
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $author$project$Render$Utility$elementAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $author$project$Render$Utility$idAttribute = function (s) {
	return A2($author$project$Render$Utility$elementAttribute, 'id', s);
};
var $author$project$ScriptaV2$Msg$SendLineNumber = function (a) {
	return {$: 1, a: a};
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $author$project$Render$Sync$rightToLeftSyncHelper = F2(
	function (firstLineNumber, numberOfLines) {
		return $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$SendLineNumber(
				{qb: firstLineNumber, rb: firstLineNumber + numberOfLines}));
	});
var $author$project$Render$Sync$attributes = F2(
	function (settings, block) {
		return A3(
			$author$project$Render$Sync$highlightIfIdSelected,
			block.nJ.hg,
			settings,
			_List_fromArray(
				[
					A2($author$project$Render$Sync$rightToLeftSyncHelper, block.nJ.jR, block.nJ.n_),
					$author$project$Render$Utility$idAttribute(block.nJ.hg)
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.qi);
var $author$project$Generic$Language$getExpressionContent = function (block) {
	var _v0 = block.qh;
	if (!_v0.$) {
		return _List_Nil;
	} else {
		var exprs = _v0.a;
		return exprs;
	}
};
var $author$project$Render$Utility$leftPadding = function (p) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{iG: 0, jG: p, kC: 0, k2: 0});
};
var $author$project$ScriptaV2$Msg$SendMeta = function (a) {
	return {$: 0, a: a};
};
var $author$project$Render$Expression$backTick = $mdgriffith$elm_ui$Element$text('`');
var $author$project$Generic$ASTTools$exprListToStringList = function (exprList) {
	return A2(
		$elm$core$List$filter,
		function (s) {
			return s !== '';
		},
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList))));
};
var $author$project$Render$Expression$bibitem = function (exprs) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function (s) {
					return '[' + (s + ']');
				}(
					A2(
						$elm$core$String$join,
						' ',
						$author$project$Generic$ASTTools$exprListToStringList(exprs))))
			]));
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = 1;
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX(1);
var $author$project$ScriptaV2$Msg$SelectId = function (a) {
	return {$: 2, a: a};
};
var $author$project$Render$Expression$cite = F3(
	function (acc, attr, str) {
		var tag = A2(
			$elm$core$String$join,
			'',
			$author$project$Generic$ASTTools$exprListToStringList(str));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.hg;
				},
				A2($elm$core$Dict$get, tag, acc.eC)));
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$ScriptaV2$Msg$SelectId(id)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 1.0)),
						$mdgriffith$elm_ui$Element$Font$bold
					]),
				attr),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					function (s) {
						return '[' + (s + ']');
					}(tag))
				]));
	});
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Render$Expression$colorDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'yellow',
			A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0)),
			_Utils_Tuple2(
			'blue',
			A3($mdgriffith$elm_ui$Element$rgb255, 180, 180, 255))
		]));
var $author$project$ScriptaV2$Msg$GetPublicDocumentFromAuthor = F3(
	function (a, b, c) {
		return {$: 6, a: a, b: b, c: c};
	});
var $author$project$ScriptaV2$Msg$MHAsCheatSheet = 1;
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 8};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 0};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 4) && (attr.b.$ === 11)) && (!attr.b.a)) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 1) {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.qO);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.ka;
		var label = _v0.fI;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gO + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cq + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.tl + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.nW)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 1) {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$CenterY = 1;
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY(1);
var $author$project$Render$Expression$errorText_ = function (str) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
			]),
		$mdgriffith$elm_ui$Element$text(str));
};
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Render$Expression$cslink = F5(
	function (_v0, _v1, settings, attr, exprList) {
		var _v2 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v2.$ === 1) {
			return $author$project$Render$Expression$errorText_('Please: id or slug');
		} else {
			var argString = _v2.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var fragment = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			var username = A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2($elm$core$String$split, ':', fragment)));
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					fI: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(settings.bH)
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					ka: $elm$core$Maybe$Just(
						A3($author$project$ScriptaV2$Msg$GetPublicDocumentFromAuthor, 1, username, fragment))
				});
		}
	});
var $author$project$Render$Utility$makeSlug = function (str) {
	return A3(
		$elm$core$String$replace,
		' ',
		'',
		$elm$core$String$toLower(str));
};
var $author$project$Render$Utility$internalLink = function (str) {
	return $author$project$Render$Utility$makeSlug('#' + str);
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.uz;
		var label = _v0.fI;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gO + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cq + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hr)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Render$Expression$eqref = F3(
	function (acc, settings, exprList) {
		var key = A3(
			$elm$core$String$replace,
			'label:',
			'',
			$elm$core$String$trim(
				A2(
					$elm$core$String$join,
					'',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList)))));
		var ref_ = A2($elm$core$Dict$get, key, acc.eC);
		var val = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.eu;
				},
				ref_));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.hg;
				},
				ref_));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(settings.bH),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id))
				]),
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('(' + (val + ')'))
						])),
				uz: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Expression$errorBackgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 1, 0.8, 0.8);
var $author$project$Generic$ASTTools$matchExprOnName = F2(
	function (name, expr) {
		return _Utils_eq(
			$elm$core$Maybe$Just(name),
			$author$project$Generic$Language$getFunctionName(expr));
	});
var $author$project$Generic$ASTTools$filterExpressionsOnName = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			$author$project$Generic$ASTTools$matchExprOnName(name),
			exprs);
	});
var $author$project$Generic$ASTTools$filterOutExpressionsOnName = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			function (expr) {
				return !A2($author$project$Generic$ASTTools$matchExprOnName, name, expr);
			},
			exprs);
	});
var $author$project$Render$NewColor$gray200 = A4($avh4$elm_color$Color$rgba, 0.89, 0.89, 0.89, 1);
var $author$project$Render$NewColor$gray400 = A4($avh4$elm_color$Color$rgba, 0.65, 0.65, 0.65, 1);
var $author$project$Render$NewColor$gray920 = A4($avh4$elm_color$Color$rgba, 0.15, 0.17, 0.19, 1);
var $author$project$Render$NewColor$indigo600 = A4($avh4$elm_color$Color$rgba, 0.29, 0.31, 0.58, 1);
var $author$project$Render$NewColor$transparentIndigo500 = A4($avh4$elm_color$Color$rgba, 0.35, 0.38, 0.67, 0.3);
var $author$project$Render$Theme$darkTheme = {e6: $author$project$Render$NewColor$gray900, lV: $author$project$Render$NewColor$gray920, gK: $author$project$Render$NewColor$gray100, rl: $author$project$Render$NewColor$gray400, eb: $author$project$Render$NewColor$transparentIndigo500, hr: $author$project$Render$NewColor$indigo600, sx: $author$project$Render$NewColor$gray700, j8: $author$project$Render$NewColor$gray200, o5: $author$project$Render$NewColor$gray100};
var $author$project$Render$Theme$elementColorFromColor = function (color) {
	var v = $avh4$elm_color$Color$toRgba(color);
	return A3($mdgriffith$elm_ui$Element$rgb, v.ky, v.jk, v.iE);
};
var $author$project$Render$NewColor$gray600 = A4($avh4$elm_color$Color$rgba, 0.4, 0.42, 0.44, 1);
var $author$project$Render$NewColor$gray800 = A4($avh4$elm_color$Color$rgba, 0.26, 0.28, 0.3, 1);
var $author$project$Render$NewColor$whiteAlpha100 = A4($avh4$elm_color$Color$rgba, 1.0, 1.0, 1.0, 0.04);
var $author$project$Render$Theme$lightTheme = {e6: $author$project$Render$NewColor$whiteAlpha100, lV: $author$project$Render$NewColor$indigo200, gK: $author$project$Render$NewColor$gray900, rl: $author$project$Render$NewColor$gray600, eb: $author$project$Render$NewColor$transparentIndigo500, hr: $author$project$Render$NewColor$indigo600, sx: $author$project$Render$NewColor$whiteAlpha100, j8: $author$project$Render$NewColor$gray800, o5: $author$project$Render$NewColor$gray950};
var $author$project$Render$Theme$getElementColor = F2(
	function (theme, colorSelector) {
		var actualTheme = function () {
			if (!theme) {
				return $author$project$Render$Theme$lightTheme;
			} else {
				return $author$project$Render$Theme$darkTheme;
			}
		}();
		return $author$project$Render$Theme$elementColorFromColor(
			colorSelector(actualTheme));
	});
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 3};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$Render$Expression$footnote = F3(
	function (acc, settings, exprList) {
		if ((exprList.b && (!exprList.a.$)) && (!exprList.b.b)) {
			var _v1 = exprList.a;
			var meta = _v1.b;
			var _v2 = A2($elm$core$Dict$get, meta.hg, acc.g8);
			if (!_v2.$) {
				var k = _v2.a;
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A2(
								$author$project$Render$Theme$getElementColor,
								settings.h7,
								function ($) {
									return $.rl;
								})),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$SelectId(meta.hg + '_'))
						]),
					{
						fI: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$html(
								A3(
									$elm$html$Html$node,
									'sup',
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(k))
										])))),
						uz: $author$project$Render$Utility$internalLink(meta.hg + '_')
					});
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Expression$linkColor = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.uz;
		var label = _v0.fI;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gO + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cq + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hr)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Render$Expression$href = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var url = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Generic$ASTTools$getText,
				A2($elm_community$list_extra$List$Extra$getAt, 0, exprList)));
		var label = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Generic$ASTTools$getText,
				A2($elm_community$list_extra$List$Extra$getAt, 1, exprList)));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Expression$linkColor)
						]),
					$mdgriffith$elm_ui$Element$text(label)),
				uz: url
			});
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $author$project$Render$Expression$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$ScriptaV2$Msg$GetDocumentWithSlug = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$ScriptaV2$Msg$MHStandard = 0;
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.uu);
var $author$project$Render$Expression$ilink = F5(
	function (_v0, _v1, settings, attr, exprList) {
		var _v2 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v2.$ === 1) {
			return $author$project$Render$Expression$errorText_('Please provide label and url');
		} else {
			var argString = _v2.a;
			var args = $elm$core$String$words(argString);
			var fullSlug = A2(
				$elm$core$Maybe$withDefault,
				'((nothing))',
				$elm_community$list_extra$List$Extra$last(args));
			var n = $elm$core$List$length(args);
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			var _v3 = function () {
				var _v4 = A2($elm$core$String$split, '#', fullSlug);
				_v4$2:
				while (true) {
					if (_v4.b) {
						if (_v4.b.b) {
							if (!_v4.b.b.b) {
								var s = _v4.a;
								var _v5 = _v4.b;
								var f = _v5.a;
								return _Utils_Tuple2(
									s,
									$elm$core$Maybe$Just(f));
							} else {
								break _v4$2;
							}
						} else {
							var s = _v4.a;
							return _Utils_Tuple2(s, $elm$core$Maybe$Nothing);
						}
					} else {
						break _v4$2;
					}
				}
				return _Utils_Tuple2(fullSlug, $elm$core$Maybe$Nothing);
			}();
			var slug = _v3.a;
			var maybeFragment = _v3.b;
			var message = function () {
				if (!maybeFragment.$) {
					var fragmentId = maybeFragment.a;
					return ($elm$core$String$isEmpty(slug) || (slug === 'current')) ? $author$project$ScriptaV2$Msg$SelectId(fragmentId) : A2($author$project$ScriptaV2$Msg$GetDocumentWithSlug, 0, fullSlug);
				} else {
					return A2($author$project$ScriptaV2$Msg$GetDocumentWithSlug, 0, slug);
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					fI: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$underline,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(settings.bH)
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					ka: $elm$core$Maybe$Just(message)
				});
		}
	});
var $author$project$Render$Graphics$argumentsFromAST = function (body) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$elm$core$String$words,
			$author$project$Generic$ASTTools$exprListToStringList(body)));
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.oV;
		var description = _v0.q$;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 7:
						return true;
					case 8:
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.rC),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$Left = 0;
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX(0);
var $mdgriffith$elm_ui$Internal$Model$Right = 2;
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX(2);
var $author$project$Tools$Utility$pairFromList = function (strings) {
	if ((strings.b && strings.b.b) && (!strings.b.b.b)) {
		var x = strings.a;
		var _v1 = strings.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Tools$Utility$keyValueDict = function (strings_) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Tools$Utility$pairFromList,
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = 0;
var $mdgriffith$elm_ui$Internal$Model$asRow = 0;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fd + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cq)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Render$Graphics$imageParameters = F2(
	function (settings, _arguments) {
		var url = A2(
			$elm$core$Maybe$withDefault,
			'no-image',
			$elm$core$List$head(_arguments));
		var remainingArguments = A2($elm$core$List$drop, 1, _arguments);
		var keyValueStrings_ = A2(
			$elm$core$List$filter,
			function (s) {
				return A2($elm$core$String$contains, ':', s);
			},
			remainingArguments);
		var keyValueStrings = A2(
			$elm$core$List$filter,
			function (s) {
				return !A2($elm$core$String$contains, 'caption', s);
			},
			keyValueStrings_);
		var displayWidth = settings.uE;
		var dict = $author$project$Tools$Utility$keyValueDict(keyValueStrings);
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', dict);
			if (_v2.$ === 1) {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v2.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', dict);
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$px(displayWidth);
			} else {
				switch (_v0.a) {
					case 'fill':
						return $mdgriffith$elm_ui$Element$fill;
					case 'to-edges':
						return $mdgriffith$elm_ui$Element$px(
							$elm$core$Basics$round(1.5 * displayWidth));
					default:
						var w_ = _v0.a;
						var _v1 = $elm$core$String$toInt(w_);
						if (_v1.$ === 1) {
							return $mdgriffith$elm_ui$Element$px(displayWidth);
						} else {
							var w = _v1.a;
							return $mdgriffith$elm_ui$Element$px(w);
						}
				}
			}
		}();
		var yPadding = A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toInt,
			A2($elm$core$Dict$get, 'ypadding', dict));
		var description = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'caption', dict));
		var captionLeadString = A3(
			$elm$core$String$replace,
			'caption:',
			'',
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$filter,
					function (s) {
						return A2($elm$core$String$contains, 'caption', s);
					},
					keyValueStrings_)));
		var captionPhrase = A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$cons,
				captionLeadString,
				A2(
					$elm$core$List$filter,
					function (s) {
						return !A2($elm$core$String$contains, ':', s);
					},
					remainingArguments)));
		var caption = (captionPhrase === '') ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					placement,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$text(captionPhrase))
				]));
		return {fb: caption, q$: description, fW: placement, uz: url, uE: width, li: yPadding};
	});
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $author$project$Render$Graphics$image = F3(
	function (settings, attrs, body) {
		var params = A2(
			$author$project$Render$Graphics$imageParameters,
			settings,
			$author$project$Render$Graphics$argumentsFromAST(body));
		var ypadding = function () {
			var _v0 = params.li;
			if (_v0.$ === 1) {
				return 0;
			} else {
				var k = _v0.a;
				return k;
			}
		}();
		var inner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.uE)),
					params.fW,
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, ypadding)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.uE),
							params.fW
						]),
					{q$: params.q$, oV: params.uz}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[params.fW]),
					params.fb)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			attrs,
			{fI: inner, uz: params.uz});
	});
var $author$project$Render$Html$Math$InlineMathMode = 0;
var $author$project$Generic$PTextMacro$MyMacro = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $author$project$Generic$PTextMacro$word = function (inWord) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompIf(inWord)),
						$elm$parser$Parser$chompWhile(inWord)),
					$elm$parser$Parser$spaces)),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Generic$PTextMacro$arg = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$symbol('{')),
		$elm$parser$Parser$spaces),
	A2(
		$elm$parser$Parser$ignorer,
		$author$project$Generic$PTextMacro$word(
			function (c) {
				return c !== '}';
			}),
		$elm$parser$Parser$symbol('}')));
var $author$project$Generic$PTextMacro$itemListHelper = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (item_) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, item_, revItems));
						}),
					itemParser),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$succeed(0))
				]));
	});
var $author$project$Generic$PTextMacro$itemList_ = F2(
	function (initialList, itemParser) {
		return A2(
			$elm$parser$Parser$loop,
			initialList,
			$author$project$Generic$PTextMacro$itemListHelper(itemParser));
	});
var $author$project$Generic$PTextMacro$itemList = function (itemParser) {
	return A2($author$project$Generic$PTextMacro$itemList_, _List_Nil, itemParser);
};
var $author$project$Generic$PTextMacro$argsOfNamedMacro = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol('\\' + name)),
		$author$project$Generic$PTextMacro$itemList($author$project$Generic$PTextMacro$arg));
};
var $author$project$Generic$PTextMacro$toString = function (_v0) {
	var name = _v0.a;
	var args = _v0.b;
	return '\\' + (name + A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (a) {
				return '{' + (a + '}');
			},
			args)));
};
var $author$project$Generic$PTextMacro$eraseLeadingMacro = F2(
	function (name, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Generic$PTextMacro$argsOfNamedMacro(name),
			str);
		if (!_v0.$) {
			var args = _v0.a;
			return A3(
				$elm$core$String$replace,
				$author$project$Generic$PTextMacro$toString(
					A2($author$project$Generic$PTextMacro$MyMacro, name, args)),
				'',
				str);
		} else {
			return str;
		}
	});
var $author$project$Render$Html$Math$eraseLabeMacro = function (content) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Generic$PTextMacro$eraseLeadingMacro('label'),
			$elm$core$String$lines(content)));
};
var $author$project$Render$Html$Math$isDisplayMathMode = function (displayMode) {
	if (!displayMode) {
		return false;
	} else {
		return true;
	}
};
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $author$project$Render$Html$Math$mathText_ = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Render$Html$Math$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(content))
				]),
			_List_Nil);
	});
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Render$Html$Math$mathText = F5(
	function (generation, width, id, displayMode, content) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding-top', '0px'),
						A2($elm$html$Html$Attributes$style, 'padding-bottom', '0px'),
						$elm$html$Html$Attributes$id(id),
						A2($elm$html$Html$Attributes$style, 'width', width)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(generation),
						A2(
							$author$project$Render$Html$Math$mathText_,
							displayMode,
							$author$project$Render$Html$Math$eraseLabeMacro(content)))
					])));
	});
var $author$project$Render$Expression$indent = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(5))
				]),
			A5($author$project$Render$Html$Math$mathText, 0, '24px', 'abc', 0, '\\quad'));
	});
var $author$project$Render$Graphics$inlineimage = F3(
	function (settings, attrs, body) {
		var params = A2(
			$author$project$Render$Graphics$imageParameters,
			settings,
			$author$project$Render$Graphics$argumentsFromAST(body));
		var inner = A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(params.uE),
					params.fW
				]),
			{q$: params.q$, oV: params.uz});
		return inner;
	});
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.rR);
var $author$project$Render$Expression$leftBracket = $mdgriffith$elm_ui$Element$text('[');
var $author$project$Render$Expression$link = F5(
	function (_v0, _v1, settings, attr, exprList) {
		var _v2 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v2.$ === 1) {
			return $author$project$Render$Expression$errorText_('Please provide label and url');
		} else {
			var argString = _v2.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			if (!n) {
				return $author$project$Render$Expression$errorText_('Please provide url');
			} else {
				if (n === 1) {
					var url = argString;
					var label = A3(
						$elm$core$String$replace,
						'http://',
						'',
						A3($elm$core$String$replace, 'https://', '', argString));
					return A2(
						$mdgriffith$elm_ui$Element$newTabLink,
						_List_Nil,
						{
							fI: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(settings.p6),
										$mdgriffith$elm_ui$Element$Font$color(settings.bH),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								$mdgriffith$elm_ui$Element$text(label)),
							uz: url
						});
				} else {
					var url = A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$drop, n - 1, args));
					var label = A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$take, n - 1, args));
					return A2(
						$mdgriffith$elm_ui$Element$newTabLink,
						_List_Nil,
						{
							fI: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(settings.p6),
										$mdgriffith$elm_ui$Element$Font$color(settings.bH),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								$mdgriffith$elm_ui$Element$text(label)),
							uz: url
						});
				}
			}
		}
	});
var $author$project$ScriptaV2$Msg$NewPost = function (a) {
	return {$: 13, a: a};
};
var $author$project$Render$Expression$newPost = F5(
	function (_v0, _v1, settings, attr, exprList) {
		var _v2 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v2.$ === 1) {
			return $author$project$Render$Expression$errorText_('Please provide post title');
		} else {
			var argString = _v2.a;
			var args = $elm$core$String$words(argString);
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					fI: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(settings.bH)
							]),
						$mdgriffith$elm_ui$Element$text('title')),
					ka: $elm$core$Maybe$Just(
						$author$project$ScriptaV2$Msg$NewPost('Add new post'))
				});
		}
	});
var $author$project$Render$Expression$par = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(5))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	});
var $author$project$Render$Expression$qed = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 2, k2: 0})
				]),
			$mdgriffith$elm_ui$Element$text('Q.E.D.'));
	});
var $mdgriffith$elm_ui$Element$Font$semiBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.t4);
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $elm_community$string_extra$String$Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A2(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('\\w+'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.nB;
			},
			$elm_community$string_extra$String$Extra$toSentenceCase));
	return A3(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('^([a-z])|\\s+([a-z])'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.nB;
			},
			uppercaseMatch),
		ws);
};
var $author$project$Render$Expression$ref = F3(
	function (acc, settings, exprList) {
		var key = $elm$core$String$trim(
			A2(
				$elm$core$String$join,
				'',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList))));
		var ref_ = A2($elm$core$Dict$get, key, acc.eC);
		var val = A2(
			$elm$core$Maybe$withDefault,
			$elm_community$string_extra$String$Extra$toTitleCase(
				A3($elm$core$String$replace, '-', ' ', key)),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.eu;
				},
				ref_));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'no-id',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.hg;
				},
				ref_));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(settings.bH),
					$mdgriffith$elm_ui$Element$Font$semiBold,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id))
				]),
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(val)
						])),
				uz: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Expression$reflink = F3(
	function (settings, acc, exprList) {
		var argString = A2(
			$elm$core$String$join,
			' ',
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList)));
		var args = $elm$core$String$words(argString);
		var n = $elm$core$List$length(args);
		var key = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$drop, n - 1, args));
		var ref_ = A2($elm$core$Dict$get, key, acc.eC);
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.hg;
				},
				ref_));
		var label = A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$take, n - 1, args));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(settings.bH),
					$mdgriffith$elm_ui$Element$Font$semiBold,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id))
				]),
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(label)
						])),
				uz: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$ScriptaV2$Msg$MMNoOp = {$: 14};
var $author$project$ScriptaV2$Msg$RequestCopyOfDocument = {$: 9};
var $author$project$ScriptaV2$Msg$RequestToggleIndexSize = {$: 10};
var $author$project$Render$Expression$msgDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('CopyDocument', $author$project$ScriptaV2$Msg$RequestCopyOfDocument),
			_Utils_Tuple2('ToggleIndex', $author$project$ScriptaV2$Msg$RequestToggleIndexSize)
		]));
var $author$project$Render$Expression$renderButton = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var _arguments = A2(
			$elm$core$List$filter,
			function (item) {
				return item !== '';
			},
			A2(
				$elm$core$List$map,
				function (item) {
					return $elm$core$String$trim(item);
				},
				A2(
					$elm$core$String$split,
					',',
					A2(
						$elm$core$String$join,
						' ',
						$author$project$Generic$ASTTools$exprListToStringList(exprList)))));
		if ((_arguments.b && _arguments.b.b) && (!_arguments.b.b.b)) {
			var labelText = _arguments.a;
			var _v4 = _arguments.b;
			var rawMsg = _v4.a;
			var _v5 = A2($elm$core$Dict$get, rawMsg, $author$project$Render$Expression$msgDict);
			if (_v5.$ === 1) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					attr,
					{
						fI: $mdgriffith$elm_ui$Element$text('Nothing (1)'),
						ka: $elm$core$Maybe$Just($author$project$ScriptaV2$Msg$MMNoOp)
					});
			} else {
				var msg = _v5.a;
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$padding(8),
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.9))
							]),
						attr),
					{
						fI: $mdgriffith$elm_ui$Element$text(labelText),
						ka: $elm$core$Maybe$Just(msg)
					});
			}
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					fI: $mdgriffith$elm_ui$Element$text('Nothing (2)'),
					ka: $elm$core$Maybe$Just($author$project$ScriptaV2$Msg$MMNoOp)
				});
		}
	});
var $author$project$Render$Math$evalMath_ = function (content) {
	return A3(
		$elm$html$Html$node,
		'mathjs-compute',
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$property,
				'content',
				$elm$json$Json$Encode$string(content))
			]),
		_List_Nil);
};
var $author$project$Render$Math$evalMath = F3(
	function (generation, gogo, content) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding-top', '0px'),
						A2($elm$html$Html$Attributes$style, 'padding-bottom', '0px'),
						$elm$html$Html$Attributes$id(gogo.hg)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(generation),
						$author$project$Render$Math$evalMath_(content))
					])));
	});
var $author$project$Render$Expression$renderComputation = F5(
	function (g, acc, s, attr, exprList) {
		var inputText = A2(
			$elm$core$String$join,
			' ',
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		return A3(
			$author$project$Render$Math$evalMath,
			g,
			{hg: 'foo'},
			inputText);
	});
var $author$project$Render$Expression$DTError = function (a) {
	return {$: 3, a: a};
};
var $author$project$Render$Expression$DTInt = function (a) {
	return {$: 2, a: a};
};
var $author$project$Render$Expression$DTStringList = function (a) {
	return {$: 1, a: a};
};
var $elm_community$list_extra$List$Extra$rowsLength = function (listOfLists) {
	if (!listOfLists.b) {
		return 0;
	} else {
		var x = listOfLists.a;
		return $elm$core$List$length(x);
	}
};
var $elm_community$list_extra$List$Extra$transpose = function (listOfLists) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$List$map2($elm$core$List$cons),
		A2(
			$elm$core$List$repeat,
			$elm_community$list_extra$List$Extra$rowsLength(listOfLists),
			_List_Nil),
		listOfLists);
};
var $author$project$Render$Expression$evalAuxDT = F3(
	function (dict, src, args) {
		var _v0 = A2($elm$core$Dict$get, src, dict);
		if (_v0.$ === 1) {
			return $author$project$Render$Expression$DTError('No data source named \'' + (src + '\''));
		} else {
			var data = _v0.a;
			_v1$5:
			while (true) {
				if (!args.b) {
					return $author$project$Render$Expression$DTError('No arguments given');
				} else {
					if (args.b.b) {
						if (((args.a === 'lines') && args.b.b.b) && (!args.b.b.b.b)) {
							var _v2 = args.b;
							var from_ = _v2.a;
							var _v3 = _v2.b;
							var to_ = _v3.a;
							return $author$project$Render$Expression$DTStringList(
								A2(
									$elm$core$List$drop,
									function (x) {
										return x - 1;
									}(
										A2(
											$elm$core$Maybe$withDefault,
											1,
											$elm$core$String$toInt(from_))),
									A2(
										$elm$core$List$take,
										function (x) {
											return x;
										}(
											A2(
												$elm$core$Maybe$withDefault,
												2,
												$elm$core$String$toInt(to_))),
										$elm$core$String$lines(data))));
						} else {
							break _v1$5;
						}
					} else {
						switch (args.a) {
							case 'rows':
								return $author$project$Render$Expression$DTInt(
									$elm$core$List$length(
										$elm$core$String$lines(data)));
							case 'columns':
								return $author$project$Render$Expression$DTInt(
									$elm$core$List$length(
										$elm_community$list_extra$List$Extra$transpose(
											A2(
												$elm$core$List$filter,
												function (row) {
													return !_Utils_eq(
														row,
														_List_fromArray(
															['']));
												},
												A2(
													$elm$core$List$map,
													$elm$core$String$split(','),
													$elm$core$String$lines(data))))));
							case 'header':
								return $author$project$Render$Expression$DTStringList(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, str) {
												return $elm$core$String$fromInt(i + 1) + (': ' + str);
											}),
										A2(
											$elm$core$String$split,
											',',
											A2(
												$elm$core$Maybe$withDefault,
												'',
												$elm$core$List$head(
													$elm$core$String$lines(data))))));
							default:
								break _v1$5;
						}
					}
				}
			}
			return $author$project$Render$Expression$DTError('Invalid arguments given');
		}
	});
var $author$project$Render$Expression$eval = F2(
	function (dict, args_) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(args_);
		if (_v0.$ === 1) {
			return $author$project$Render$Expression$DTError('No data source given');
		} else {
			var _v1 = _v0.a;
			var src = _v1.a;
			var args = _v1.b;
			return A3($author$project$Render$Expression$evalAuxDT, dict, src, args);
		}
	});
var $author$project$Render$Expression$renderDTValue = function (dtValue) {
	switch (dtValue.$) {
		case 0:
			var str = dtValue.a;
			return $mdgriffith$elm_ui$Element$text(str);
		case 1:
			var strList = dtValue.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$map,
					function (str) {
						return $mdgriffith$elm_ui$Element$text(str);
					},
					strList));
		case 2:
			var _int = dtValue.a;
			return $mdgriffith$elm_ui$Element$text(
				$elm$core$String$fromInt(_int));
		default:
			var str = dtValue.a;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0))
					]),
				$mdgriffith$elm_ui$Element$text('Error: ' + str));
	}
};
var $author$project$Render$Expression$renderDataTools = F5(
	function (g, acc, s, attr, exprList) {
		var args = A2(
			$elm$core$List$map,
			function (item) {
				return $elm$core$String$trim(item);
			},
			A2(
				$elm$core$String$split,
				' ',
				A2(
					$elm$core$String$join,
					' ',
					$author$project$Generic$ASTTools$exprListToStringList(exprList))));
		return $author$project$Render$Expression$renderDTValue(
			A2($author$project$Render$Expression$eval, s.qR, args));
	});
var $zwilias$elm_rosetree$Tree$Zipper$Zipper = $elm$core$Basics$identity;
var $zwilias$elm_rosetree$Tree$Zipper$fromTree = function (t) {
	return {w: _List_Nil, B: _List_Nil, an: _List_Nil, H: t};
};
var $author$project$MicroScheme$Expr$Sym = function (a) {
	return {$: 4, a: a};
};
var $author$project$MicroScheme$Init$symbolStrings = _List_fromArray(
	['+', '*', '=', '<', '>', '<=', '>=', 'roundTo', 'remainder']);
var $author$project$MicroScheme$Init$symbols = A2(
	$elm$core$List$map,
	function (s) {
		return _Utils_Tuple2(
			s,
			$author$project$MicroScheme$Expr$Sym(s));
	},
	$author$project$MicroScheme$Init$symbolStrings);
var $author$project$MicroScheme$Init$rootFrame = {
	c1: $elm$core$Dict$fromList($author$project$MicroScheme$Init$symbols),
	hg: 0
};
var $zwilias$elm_rosetree$Tree$Tree = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $zwilias$elm_rosetree$Tree$singleton = function (v) {
	return A2($zwilias$elm_rosetree$Tree$Tree, v, _List_Nil);
};
var $author$project$MicroScheme$Environment$initial = $zwilias$elm_rosetree$Tree$Zipper$fromTree(
	$zwilias$elm_rosetree$Tree$singleton($author$project$MicroScheme$Init$rootFrame));
var $author$project$MicroScheme$Interpreter$init = function (str) {
	return {a4: $author$project$MicroScheme$Environment$initial, cb: str, dt: ''};
};
var $author$project$MicroScheme$Interpreter$input = F2(
	function (str, state) {
		return _Utils_update(
			state,
			{
				cb: $elm$core$String$trim(str)
			});
	});
var $author$project$MicroScheme$Expr$L = function (a) {
	return {$: 5, a: a};
};
var $author$project$MicroScheme$Expr$Lambda = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$MicroScheme$Frame$addSymbol = F3(
	function (str, expr, frame) {
		return _Utils_update(
			frame,
			{
				c1: A3($elm$core$Dict$insert, str, expr, frame.c1)
			});
	});
var $zwilias$elm_rosetree$Tree$label = function (_v0) {
	var v = _v0.a;
	return v;
};
var $zwilias$elm_rosetree$Tree$Zipper$tree = function (_v0) {
	var focus = _v0.H;
	return focus;
};
var $zwilias$elm_rosetree$Tree$Zipper$label = function (zipper) {
	return $zwilias$elm_rosetree$Tree$label(
		$zwilias$elm_rosetree$Tree$Zipper$tree(zipper));
};
var $author$project$MicroScheme$Environment$current = function (environment) {
	return $zwilias$elm_rosetree$Tree$Zipper$label(environment);
};
var $author$project$MicroScheme$Environment$currentId = function (environment) {
	return function ($) {
		return $.hg;
	}(
		$author$project$MicroScheme$Environment$current(environment));
};
var $zwilias$elm_rosetree$Tree$mapLabel = F2(
	function (f, _v0) {
		var v = _v0.a;
		var cs = _v0.b;
		return A2(
			$zwilias$elm_rosetree$Tree$Tree,
			f(v),
			cs);
	});
var $zwilias$elm_rosetree$Tree$Zipper$mapTree = F2(
	function (f, _v0) {
		var zipper = _v0;
		return _Utils_update(
			zipper,
			{
				H: f(zipper.H)
			});
	});
var $zwilias$elm_rosetree$Tree$Zipper$mapLabel = F2(
	function (f, zipper) {
		return A2(
			$zwilias$elm_rosetree$Tree$Zipper$mapTree,
			$zwilias$elm_rosetree$Tree$mapLabel(f),
			zipper);
	});
var $zwilias$elm_rosetree$Tree$Zipper$replaceLabel = F2(
	function (l, zipper) {
		return A2(
			$zwilias$elm_rosetree$Tree$Zipper$mapLabel,
			$elm$core$Basics$always(l),
			zipper);
	});
var $zwilias$elm_rosetree$Tree$Zipper$previousSibling = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.B;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var previous = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				w: A2($elm$core$List$cons, zipper.H, zipper.w),
				B: rest,
				an: zipper.an,
				H: previous
			});
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$firstSibling = function (zipper) {
	firstSibling:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$previousSibling(zipper);
		if (_v0.$ === 1) {
			return zipper;
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue firstSibling;
		}
	}
};
var $zwilias$elm_rosetree$Tree$tree = $zwilias$elm_rosetree$Tree$Tree;
var $zwilias$elm_rosetree$Tree$Zipper$reconstruct = F4(
	function (focus, before, after, l) {
		return A2(
			$zwilias$elm_rosetree$Tree$tree,
			l,
			_Utils_ap(
				$elm$core$List$reverse(before),
				_Utils_ap(
					_List_fromArray(
						[focus]),
					after)));
	});
var $zwilias$elm_rosetree$Tree$Zipper$parent = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.an;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var crumb = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				w: crumb.w,
				B: crumb.B,
				an: rest,
				H: A4($zwilias$elm_rosetree$Tree$Zipper$reconstruct, zipper.H, zipper.B, zipper.w, crumb.fI)
			});
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$root = function (zipper) {
	root:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$parent(zipper);
		if (_v0.$ === 1) {
			return $zwilias$elm_rosetree$Tree$Zipper$firstSibling(zipper);
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue root;
		}
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$find = F3(
	function (predicate, move, zipper) {
		find:
		while (true) {
			var _v0 = move(zipper);
			if (!_v0.$) {
				var next = _v0.a;
				if (predicate(
					$zwilias$elm_rosetree$Tree$Zipper$label(next))) {
					return $elm$core$Maybe$Just(next);
				} else {
					var $temp$predicate = predicate,
						$temp$move = move,
						$temp$zipper = next;
					predicate = $temp$predicate;
					move = $temp$move;
					zipper = $temp$zipper;
					continue find;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $zwilias$elm_rosetree$Tree$children = function (_v0) {
	var c = _v0.b;
	return c;
};
var $zwilias$elm_rosetree$Tree$Zipper$firstChild = function (_v0) {
	var zipper = _v0;
	var _v1 = $zwilias$elm_rosetree$Tree$children(zipper.H);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var c = _v1.a;
		var cs = _v1.b;
		return $elm$core$Maybe$Just(
			{
				w: cs,
				B: _List_Nil,
				an: A2(
					$elm$core$List$cons,
					{
						w: zipper.w,
						B: zipper.B,
						fI: $zwilias$elm_rosetree$Tree$label(zipper.H)
					},
					zipper.an),
				H: c
			});
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$firstOf = F2(
	function (options, v) {
		firstOf:
		while (true) {
			if (!options.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var option = options.a;
				var rest = options.b;
				var _v1 = option(v);
				if (!_v1.$) {
					var r = _v1.a;
					return $elm$core$Maybe$Just(r);
				} else {
					var $temp$options = rest,
						$temp$v = v;
					options = $temp$options;
					v = $temp$v;
					continue firstOf;
				}
			}
		}
	});
var $zwilias$elm_rosetree$Tree$Zipper$nextSibling = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.w;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var next = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				w: rest,
				B: A2($elm$core$List$cons, zipper.H, zipper.B),
				an: zipper.an,
				H: next
			});
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$nextSiblingOfAncestor = function (zipper) {
	nextSiblingOfAncestor:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$parent(zipper);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var parent_ = _v0.a;
			var _v1 = $zwilias$elm_rosetree$Tree$Zipper$nextSibling(parent_);
			if (_v1.$ === 1) {
				var $temp$zipper = parent_;
				zipper = $temp$zipper;
				continue nextSiblingOfAncestor;
			} else {
				var s = _v1.a;
				return $elm$core$Maybe$Just(s);
			}
		}
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$forward = function (zipper) {
	return A2(
		$zwilias$elm_rosetree$Tree$Zipper$firstOf,
		_List_fromArray(
			[$zwilias$elm_rosetree$Tree$Zipper$firstChild, $zwilias$elm_rosetree$Tree$Zipper$nextSibling, $zwilias$elm_rosetree$Tree$Zipper$nextSiblingOfAncestor]),
		zipper);
};
var $zwilias$elm_rosetree$Tree$Zipper$findNext = F2(
	function (f, zipper) {
		return A3($zwilias$elm_rosetree$Tree$Zipper$find, f, $zwilias$elm_rosetree$Tree$Zipper$forward, zipper);
	});
var $zwilias$elm_rosetree$Tree$Zipper$findFromRoot = F2(
	function (f, zipper) {
		var r = $zwilias$elm_rosetree$Tree$Zipper$root(zipper);
		return f(
			$zwilias$elm_rosetree$Tree$Zipper$label(r)) ? $elm$core$Maybe$Just(r) : A2($zwilias$elm_rosetree$Tree$Zipper$findNext, f, r);
	});
var $author$project$MicroScheme$Environment$setFocus = F2(
	function (id, environment) {
		return A2(
			$zwilias$elm_rosetree$Tree$Zipper$findFromRoot,
			function (frame) {
				return _Utils_eq(frame.hg, id);
			},
			environment);
	});
var $author$project$MicroScheme$Environment$replaceRoot = F2(
	function (frame, environment) {
		var newEnvironment_ = A2(
			$zwilias$elm_rosetree$Tree$Zipper$replaceLabel,
			frame,
			$zwilias$elm_rosetree$Tree$Zipper$root(environment));
		var id = $author$project$MicroScheme$Environment$currentId(environment);
		var _v0 = A2($author$project$MicroScheme$Environment$setFocus, id, newEnvironment_);
		if (_v0.$ === 1) {
			return environment;
		} else {
			var newEnvironment = _v0.a;
			return newEnvironment;
		}
	});
var $author$project$MicroScheme$Environment$root = function (environment) {
	return $author$project$MicroScheme$Environment$current(
		$zwilias$elm_rosetree$Tree$Zipper$root(environment));
};
var $author$project$MicroScheme$Environment$addSymbolToRoot = F3(
	function (name, expr_, environment) {
		var newRoot = A3(
			$author$project$MicroScheme$Frame$addSymbol,
			name,
			expr_,
			$author$project$MicroScheme$Environment$root(environment));
		return A2($author$project$MicroScheme$Environment$replaceRoot, newRoot, environment);
	});
var $author$project$MicroScheme$Interpreter$display = function (expr) {
	switch (expr.$) {
		case 0:
			var n = expr.a;
			return $elm$core$String$fromInt(n);
		case 1:
			var x = expr.a;
			return $elm$core$String$fromFloat(x);
		case 2:
			var b = expr.a;
			if (b) {
				return 'True';
			} else {
				return 'False';
			}
		case 3:
			var s = expr.a;
			return s;
		case 4:
			var s = expr.a;
			return s;
		default:
			var u = expr;
			return 'Unprocessable expression';
	}
};
var $author$project$MicroScheme$Error$EvalError = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$MicroScheme$Expr$F = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroScheme$Expr$Z = function (a) {
	return {$: 0, a: a};
};
var $author$project$MicroScheme$Error$FR = function (a) {
	return {$: 1, a: a};
};
var $author$project$MicroScheme$Frame$UnequalLists = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$MicroScheme$Frame$addBinding = F2(
	function (_v0, frame) {
		var str = _v0.a;
		var expr = _v0.b;
		return _Utils_update(
			frame,
			{
				c1: A3($elm$core$Dict$insert, str, expr, frame.c1)
			});
	});
var $author$project$MicroScheme$Frame$addBindings = F3(
	function (vars, exprs, frame) {
		var nVars = $elm$core$List$length(vars);
		var nExprs = $elm$core$List$length(exprs);
		if (!_Utils_eq(nVars, nExprs)) {
			return $elm$core$Result$Err(
				A2($author$project$MicroScheme$Frame$UnequalLists, nVars, nExprs));
		} else {
			var bindings = A3(
				$elm$core$List$map2,
				F2(
					function (a, b) {
						return _Utils_Tuple2(a, b);
					}),
				vars,
				exprs);
			return $elm$core$Result$Ok(
				A3($elm$core$List$foldl, $author$project$MicroScheme$Frame$addBinding, frame, bindings));
		}
	});
var $author$project$MicroScheme$Frame$empty = {c1: $elm$core$Dict$empty, hg: -1};
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $author$project$MicroScheme$Frame$resolve = F2(
	function (frame, expr) {
		switch (expr.$) {
			case 3:
				var s = expr.a;
				var _v1 = A2($elm$core$Dict$get, s, frame.c1);
				if (_v1.$ === 1) {
					return expr;
				} else {
					var expr2 = _v1.a;
					return expr2;
				}
			case 5:
				var list = expr.a;
				return $author$project$MicroScheme$Expr$L(
					A2(
						$elm$core$List$map,
						$author$project$MicroScheme$Frame$resolve(frame),
						list));
			default:
				return expr;
		}
	});
var $author$project$MicroScheme$Frame$varName = function (expr) {
	if (expr.$ === 3) {
		var s = expr.a;
		return $elm$core$Maybe$Just(s);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroScheme$Frame$varNames = function (exprs) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$MicroScheme$Frame$varName, exprs));
};
var $author$project$MicroScheme$Eval$applyLambdaToExpression = F3(
	function (params, body, args) {
		var frameResult = A3(
			$author$project$MicroScheme$Frame$addBindings,
			$author$project$MicroScheme$Frame$varNames(params),
			args,
			$author$project$MicroScheme$Frame$empty);
		if (frameResult.$ === 1) {
			var frameError = frameResult.a;
			return A2(
				$elm$core$Result$mapError,
				function (err) {
					return $author$project$MicroScheme$Error$FR(err);
				},
				$elm$core$Result$Err(frameError));
		} else {
			var frame = frameResult.a;
			return $elm$core$Result$Ok(
				A2($author$project$MicroScheme$Frame$resolve, frame, body));
		}
	});
var $author$project$MicroScheme$Eval$applyLambdaToExpressionList = F3(
	function (params, body, args) {
		var frameResult = A3(
			$author$project$MicroScheme$Frame$addBindings,
			$author$project$MicroScheme$Frame$varNames(params),
			args,
			$author$project$MicroScheme$Frame$empty);
		if (frameResult.$ === 1) {
			var frameError = frameResult.a;
			return A2(
				$elm$core$Result$mapError,
				function (err) {
					return $author$project$MicroScheme$Error$FR(err);
				},
				$elm$core$Result$Err(frameError));
		} else {
			var frame = frameResult.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$L(
					A2(
						$elm$core$List$map,
						$author$project$MicroScheme$Frame$resolve(frame),
						body)));
		}
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 1) {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 1) {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$MicroScheme$Expr$B = function (a) {
	return {$: 2, a: a};
};
var $author$project$MicroScheme$Function$equalNumbers = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 0:
					if (!exprs.b.a.$) {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_eq(a, b)));
					} else {
						break _v0$2;
					}
				case 1:
					if (exprs.b.a.$ === 1) {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_eq(a, b)));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Numbers$NotAllNumbers = 0;
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $Chadtech$elm_bool_extra$Bool$Extra$all = $elm$core$List$all($elm$core$Basics$identity);
var $author$project$MicroScheme$Numbers$allFloats = function (exprs) {
	var isFloat = function (expr) {
		if (expr.$ === 1) {
			return true;
		} else {
			return false;
		}
	};
	return $Chadtech$elm_bool_extra$Bool$Extra$all(
		A2($elm$core$List$map, isFloat, exprs));
};
var $author$project$MicroScheme$Numbers$allInts = function (exprs) {
	var isInt = function (expr) {
		if (!expr.$) {
			return true;
		} else {
			return false;
		}
	};
	return $Chadtech$elm_bool_extra$Bool$Extra$all(
		A2($elm$core$List$map, isInt, exprs));
};
var $author$project$MicroScheme$Numbers$isNumber = function (expr) {
	switch (expr.$) {
		case 0:
			return true;
		case 1:
			return true;
		default:
			return false;
	}
};
var $author$project$MicroScheme$Numbers$allNumbers = function (exprs) {
	return $Chadtech$elm_bool_extra$Bool$Extra$all(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$isNumber, exprs));
};
var $author$project$MicroScheme$Numbers$coerceToFloat = function (expr) {
	switch (expr.$) {
		case 0:
			var n = expr.a;
			return $elm$core$Maybe$Just(n);
		case 1:
			var x = expr.a;
			return $elm$core$Maybe$Just(x);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$maybe_extra$Maybe$Extra$combineHelp = F2(
	function (list, acc) {
		combineHelp:
		while (true) {
			if (list.b) {
				var head = list.a;
				var tail = list.b;
				if (!head.$) {
					var a = head.a;
					var $temp$list = tail,
						$temp$acc = A2($elm$core$List$cons, a, acc);
					list = $temp$list;
					acc = $temp$acc;
					continue combineHelp;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(acc));
			}
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$combine = function (list) {
	return A2($elm_community$maybe_extra$Maybe$Extra$combineHelp, list, _List_Nil);
};
var $author$project$MicroScheme$Numbers$coerceToFloats = function (exprs) {
	var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$coerceToFloat, exprs));
	if (_v0.$ === 1) {
		return _List_Nil;
	} else {
		var floats = _v0.a;
		return floats;
	}
};
var $author$project$MicroScheme$Numbers$unwrapFloat = function (expr) {
	if (expr.$ === 1) {
		var x = expr.a;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroScheme$Numbers$unwrapFloats = function (exprs) {
	var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$unwrapFloat, exprs));
	if (_v0.$ === 1) {
		return _List_Nil;
	} else {
		var floats = _v0.a;
		return floats;
	}
};
var $author$project$MicroScheme$Numbers$unwrapInteger = function (expr) {
	if (!expr.$) {
		var n = expr.a;
		return $elm$core$Maybe$Just(n);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroScheme$Numbers$unwrapIntegers = function (exprs) {
	var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$unwrapInteger, exprs));
	if (_v0.$ === 1) {
		return _List_Nil;
	} else {
		var ints = _v0.a;
		return ints;
	}
};
var $author$project$MicroScheme$Numbers$coerce = function (exprs) {
	return $author$project$MicroScheme$Numbers$allInts(exprs) ? $elm$core$Result$Ok(
		$toastal$either$Either$Left(
			$author$project$MicroScheme$Numbers$unwrapIntegers(exprs))) : ($author$project$MicroScheme$Numbers$allFloats(exprs) ? $elm$core$Result$Ok(
		$toastal$either$Either$Right(
			$author$project$MicroScheme$Numbers$unwrapFloats(exprs))) : ($author$project$MicroScheme$Numbers$allNumbers(exprs) ? $elm$core$Result$Ok(
		$toastal$either$Either$Right(
			$author$project$MicroScheme$Numbers$coerceToFloats(exprs))) : $elm$core$Result$Err(0)));
};
var $author$project$MicroScheme$Function$evalPlus = function (rest_) {
	var _v0 = $author$project$MicroScheme$Numbers$coerce(rest_);
	if (_v0.$ === 1) {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'Could not unwrap argument to evalPlus'));
	} else {
		if (!_v0.a.$) {
			var ints = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$Z(
					$elm$core$List$sum(ints)));
		} else {
			var floats = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$F(
					$elm$core$List$sum(floats)));
		}
	}
};
var $elm$core$List$product = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$mul, 1, numbers);
};
var $author$project$MicroScheme$Function$evalTimes = function (rest_) {
	var _v0 = $author$project$MicroScheme$Numbers$coerce(rest_);
	if (_v0.$ === 1) {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'Could not unwrap argument to evalPlus'));
	} else {
		if (!_v0.a.$) {
			var ints = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$Z(
					$elm$core$List$product(ints)));
		} else {
			var floats = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$F(
					$elm$core$List$product(floats)));
		}
	}
};
var $author$project$MicroScheme$Function$gtPredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 0:
					if (!exprs.b.a.$) {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > 0));
					} else {
						break _v0$2;
					}
				case 1:
					if (exprs.b.a.$ === 1) {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > 0));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$gtePredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 0:
					if (!exprs.b.a.$) {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > -1));
					} else {
						break _v0$2;
					}
				case 1:
					if (exprs.b.a.$ === 1) {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > -1));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$ltPredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 0:
					if (!exprs.b.a.$) {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 0));
					} else {
						break _v0$2;
					}
				case 1:
					if (exprs.b.a.$ === 1) {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 0));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$ltePredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 0:
					if (!exprs.b.a.$) {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 1));
					} else {
						break _v0$2;
					}
				case 1:
					if (exprs.b.a.$ === 1) {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 1));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $author$project$MicroScheme$Function$remainder = function (exprs) {
	if ((((exprs.b && (!exprs.a.$)) && exprs.b.b) && (!exprs.b.a.$)) && (!exprs.b.b.b)) {
		var a = exprs.a.a;
		var _v1 = exprs.b;
		var b = _v1.a.a;
		return $elm$core$Result$Ok(
			$author$project$MicroScheme$Expr$Z(
				A2($elm$core$Basics$modBy, b, a)));
	} else {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'bad arguments to: remainder'));
	}
};
var $elm$core$Basics$pow = _Basics_pow;
var $author$project$MicroScheme$Numbers$roundTo = F2(
	function (n, x) {
		var factor = A2($elm$core$Basics$pow, 10.0, n);
		var raised = $elm$core$Basics$round(factor * x);
		return raised / factor;
	});
var $author$project$MicroScheme$Function$roundTo = function (exprs) {
	if ((((exprs.b && (!exprs.a.$)) && exprs.b.b) && (exprs.b.a.$ === 1)) && (!exprs.b.b.b)) {
		var n = exprs.a.a;
		var _v1 = exprs.b;
		var x = _v1.a.a;
		return $elm$core$Result$Ok(
			$author$project$MicroScheme$Expr$F(
				A2($author$project$MicroScheme$Numbers$roundTo, n, x)));
	} else {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'bad arguments to function roundTo'));
	}
};
var $author$project$MicroScheme$Function$functionDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('+', $author$project$MicroScheme$Function$evalPlus),
			_Utils_Tuple2('*', $author$project$MicroScheme$Function$evalTimes),
			_Utils_Tuple2('roundTo', $author$project$MicroScheme$Function$roundTo),
			_Utils_Tuple2('=', $author$project$MicroScheme$Function$equalNumbers),
			_Utils_Tuple2('<', $author$project$MicroScheme$Function$ltPredicate),
			_Utils_Tuple2('>', $author$project$MicroScheme$Function$gtPredicate),
			_Utils_Tuple2('<=', $author$project$MicroScheme$Function$ltePredicate),
			_Utils_Tuple2('>=', $author$project$MicroScheme$Function$gtePredicate),
			_Utils_Tuple2('remainder', $author$project$MicroScheme$Function$remainder)
		]));
var $author$project$MicroScheme$Function$dispatch = function (functionName) {
	var _v0 = A2($elm$core$Dict$get, functionName, $author$project$MicroScheme$Function$functionDict);
	if (_v0.$ === 1) {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 2, 'eval dispatch, no such function: ' + functionName));
	} else {
		var f = _v0.a;
		return $elm$core$Result$Ok(f);
	}
};
var $author$project$MicroScheme$Environment$resolve = F2(
	function (env, expr) {
		return A2(
			$author$project$MicroScheme$Frame$resolve,
			$author$project$MicroScheme$Environment$root(env),
			expr);
	});
var $author$project$MicroScheme$Eval$eval = F2(
	function (env, expr) {
		return A2(
			$author$project$MicroScheme$Eval$evalResult,
			env,
			$elm$core$Result$Ok(expr));
	});
var $author$project$MicroScheme$Eval$evalArgs = F2(
	function (env, args) {
		return $elm_community$result_extra$Result$Extra$combine(
			A2(
				$elm$core$List$map,
				function (arg) {
					return A2(
						$author$project$MicroScheme$Eval$evalResult,
						env,
						$elm$core$Result$Ok(arg));
				},
				args));
	});
var $author$project$MicroScheme$Eval$evalResult = F2(
	function (env, resultExpr) {
		evalResult:
		while (true) {
			if (resultExpr.$ === 1) {
				var error = resultExpr.a;
				return $elm$core$Result$Err(error);
			} else {
				var expr = resultExpr.a;
				_v1$8:
				while (true) {
					_v1$9:
					while (true) {
						switch (expr.$) {
							case 0:
								var n = expr.a;
								return $elm$core$Result$Ok(
									$author$project$MicroScheme$Expr$Z(n));
							case 1:
								var r = expr.a;
								return $elm$core$Result$Ok(
									$author$project$MicroScheme$Expr$F(r));
							case 4:
								var s = expr.a;
								return $elm$core$Result$Ok(
									$author$project$MicroScheme$Expr$Sym(s));
							case 9:
								if (expr.a.$ === 5) {
									var boolExpr_ = expr.a.a;
									var expr1 = expr.b;
									var expr2 = expr.c;
									var boolExpr = A2(
										$elm$core$List$map,
										$author$project$MicroScheme$Environment$resolve(env),
										boolExpr_);
									var _v9 = A2(
										$author$project$MicroScheme$Eval$eval,
										env,
										$author$project$MicroScheme$Expr$L(boolExpr));
									if (_v9.$ === 1) {
										return $elm$core$Result$Err(
											A2($author$project$MicroScheme$Error$EvalError, 4, 'Error evaluating predicate:'));
									} else {
										var truthValue = _v9.a;
										if (truthValue.$ === 2) {
											if (truthValue.a) {
												var _v11 = A2($author$project$MicroScheme$Eval$eval, env, expr1);
												if (_v11.$ === 1) {
													return $elm$core$Result$Err(
														A2($author$project$MicroScheme$Error$EvalError, 4, 'True, error evaluating: XXX'));
												} else {
													var value = _v11.a;
													return $elm$core$Result$Ok(value);
												}
											} else {
												var _v12 = A2($author$project$MicroScheme$Eval$eval, env, expr2);
												if (_v12.$ === 1) {
													return $elm$core$Result$Err(
														A2($author$project$MicroScheme$Error$EvalError, 4, 'False, error evaluating: XXX'));
												} else {
													var value = _v12.a;
													return $elm$core$Result$Ok(value);
												}
											}
										} else {
											return $elm$core$Result$Err(
												A2($author$project$MicroScheme$Error$EvalError, 4, 'False, error evaluating predicate'));
										}
									}
								} else {
									break _v1$9;
								}
							case 5:
								if (expr.a.b) {
									switch (expr.a.a.$) {
										case 4:
											var _v2 = expr.a;
											var name = _v2.a.a;
											var rest = _v2.b;
											var _v3 = $author$project$MicroScheme$Function$dispatch(name);
											if (_v3.$ === 1) {
												return $elm$core$Result$Err(
													A2($author$project$MicroScheme$Error$EvalError, 3, 'dispatch ' + (name + ' did not return a value')));
											} else {
												var f = _v3.a;
												var _v4 = A2($author$project$MicroScheme$Eval$evalArgs, env, rest);
												if (_v4.$ === 1) {
													return $elm$core$Result$Err(
														A2($author$project$MicroScheme$Error$EvalError, 5, name));
												} else {
													var actualArgs = _v4.a;
													return f(actualArgs);
												}
											}
										case 7:
											if (expr.a.a.a.$ === 5) {
												if (expr.a.a.b.$ === 5) {
													var _v5 = expr.a;
													var _v6 = _v5.a;
													var params = _v6.a.a;
													var body = _v6.b.a;
													var args = _v5.b;
													var $temp$env = env,
														$temp$resultExpr = A3($author$project$MicroScheme$Eval$applyLambdaToExpressionList, params, body, args);
													env = $temp$env;
													resultExpr = $temp$resultExpr;
													continue evalResult;
												} else {
													var _v7 = expr.a;
													var _v8 = _v7.a;
													var params = _v8.a.a;
													var body = _v8.b;
													var args = _v7.b;
													var $temp$env = env,
														$temp$resultExpr = A3($author$project$MicroScheme$Eval$applyLambdaToExpression, params, body, args);
													env = $temp$env;
													resultExpr = $temp$resultExpr;
													continue evalResult;
												}
											} else {
												break _v1$8;
											}
										case 3:
											var _v13 = expr.a;
											var name = _v13.a.a;
											var rest = _v13.b;
											return $elm$core$Result$Err(
												A2($author$project$MicroScheme$Error$EvalError, 0, 'Unknown symbol: ' + name));
										default:
											break _v1$8;
									}
								} else {
									break _v1$8;
								}
							default:
								break _v1$9;
						}
					}
					return $elm$core$Result$Err(
						A2($author$project$MicroScheme$Error$EvalError, 0, 'Missing case (eval), expr = XXX'));
				}
				var exprList_ = expr.a;
				return $elm$core$Result$Err(
					A2($author$project$MicroScheme$Error$EvalError, -1, '!!! '));
			}
		}
	});
var $author$project$MicroScheme$Expr$Define = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $author$project$MicroScheme$Expr$If = F3(
	function (a, b, c) {
		return {$: 9, a: a, b: b, c: c};
	});
var $author$project$MicroScheme$Expr$Pair = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$ExpectingFloat = {$: 5};
var $elm$parser$Parser$Advanced$float = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				lD: $elm$core$Result$Err(invalid),
				mq: expecting,
				my: $elm$core$Result$Ok($elm$core$Basics$identity),
				rs: $elm$core$Result$Err(invalid),
				m3: $elm$core$Result$Ok($elm$core$Basics$toFloat),
				rO: invalid,
				n$: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$float = A2($elm$parser$Parser$Advanced$float, $elm$parser$Parser$ExpectingFloat, $elm$parser$Parser$ExpectingFloat);
var $author$project$MicroScheme$Parser$floatParser = A2($elm$parser$Parser$map, $author$project$MicroScheme$Expr$F, $elm$parser$Parser$float);
var $elm$parser$Parser$ExpectingInt = {$: 1};
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $author$project$MicroScheme$Parser$intParser = A2($elm$parser$Parser$map, $author$project$MicroScheme$Expr$Z, $elm$parser$Parser$int);
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $author$project$MicroScheme$Parser$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (v) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$ignorer, p, $elm$parser$Parser$spaces)),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$succeed(0))
				]));
	});
var $author$project$MicroScheme$Parser$many = function (p) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$author$project$MicroScheme$Parser$manyHelp(p));
};
var $author$project$MicroScheme$Expr$Str = function (a) {
	return {$: 3, a: a};
};
var $author$project$MicroScheme$Parser$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						F3(
							function (start, finish, content) {
								return A3($elm$core$String$slice, start, finish, content);
							})),
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompIf(
								function (c) {
									return prefix(c);
								})),
						$elm$parser$Parser$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$MicroScheme$Parser$stringParser = function () {
	var prefix = function (c) {
		return !A2(
			$elm$core$List$member,
			c,
			_List_fromArray(
				['(', ')', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']));
	};
	var _continue = function (c) {
		return !A2(
			$elm$core$List$member,
			c,
			_List_fromArray(
				[' ', ')']));
	};
	return A2(
		$elm$parser$Parser$map,
		$author$project$MicroScheme$Expr$Str,
		A2($author$project$MicroScheme$Parser$text, prefix, _continue));
}();
function $author$project$MicroScheme$Parser$cyclic$listParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$L),
			$elm$parser$Parser$symbol('(')),
		A2(
			$elm$parser$Parser$ignorer,
			$author$project$MicroScheme$Parser$many(
				$author$project$MicroScheme$Parser$cyclic$exprParser()),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$exprParser() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$backtrackable(
				$author$project$MicroScheme$Parser$cyclic$pairParser()),
				$author$project$MicroScheme$Parser$cyclic$lambdaParser(),
				$author$project$MicroScheme$Parser$cyclic$defineParser(),
				$author$project$MicroScheme$Parser$cyclic$ifParser(),
				$elm$parser$Parser$lazy(
				function (_v9) {
					return $author$project$MicroScheme$Parser$cyclic$listParser();
				}),
				$elm$parser$Parser$backtrackable($author$project$MicroScheme$Parser$intParser),
				$author$project$MicroScheme$Parser$floatParser,
				$author$project$MicroScheme$Parser$stringParser,
				$elm$parser$Parser$lazy(
				function (_v10) {
					return $author$project$MicroScheme$Parser$cyclic$defineParser();
				})
			]));
}
function $author$project$MicroScheme$Parser$cyclic$defineParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$Define),
					$elm$parser$Parser$symbol('(define ')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v7) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v8) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$ifParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$If),
						$elm$parser$Parser$symbol('(if ')),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$lazy(
						function (_v4) {
							return $author$project$MicroScheme$Parser$cyclic$exprParser();
						}),
					$elm$parser$Parser$spaces)),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v5) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v6) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$lambdaParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$Lambda),
					$elm$parser$Parser$symbol('(lambda ')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v2) {
						return $author$project$MicroScheme$Parser$cyclic$listParser();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v3) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$pairParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$Pair),
					$elm$parser$Parser$symbol('(')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$lazy(
							function (_v0) {
								return $author$project$MicroScheme$Parser$cyclic$exprParser();
							}),
						$elm$parser$Parser$spaces),
					$elm$parser$Parser$symbol(',')),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v1) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
var $author$project$MicroScheme$Parser$listParser = $author$project$MicroScheme$Parser$cyclic$listParser();
$author$project$MicroScheme$Parser$cyclic$listParser = function () {
	return $author$project$MicroScheme$Parser$listParser;
};
var $author$project$MicroScheme$Parser$exprParser = $author$project$MicroScheme$Parser$cyclic$exprParser();
$author$project$MicroScheme$Parser$cyclic$exprParser = function () {
	return $author$project$MicroScheme$Parser$exprParser;
};
var $author$project$MicroScheme$Parser$defineParser = $author$project$MicroScheme$Parser$cyclic$defineParser();
$author$project$MicroScheme$Parser$cyclic$defineParser = function () {
	return $author$project$MicroScheme$Parser$defineParser;
};
var $author$project$MicroScheme$Parser$ifParser = $author$project$MicroScheme$Parser$cyclic$ifParser();
$author$project$MicroScheme$Parser$cyclic$ifParser = function () {
	return $author$project$MicroScheme$Parser$ifParser;
};
var $author$project$MicroScheme$Parser$lambdaParser = $author$project$MicroScheme$Parser$cyclic$lambdaParser();
$author$project$MicroScheme$Parser$cyclic$lambdaParser = function () {
	return $author$project$MicroScheme$Parser$lambdaParser;
};
var $author$project$MicroScheme$Parser$pairParser = $author$project$MicroScheme$Parser$cyclic$pairParser();
$author$project$MicroScheme$Parser$cyclic$pairParser = function () {
	return $author$project$MicroScheme$Parser$pairParser;
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $author$project$MicroScheme$Parser$parse = F2(
	function (frame, str) {
		return A2(
			$elm$core$Result$map,
			$author$project$MicroScheme$Frame$resolve(frame),
			A2($elm$parser$Parser$run, $author$project$MicroScheme$Parser$exprParser, str));
	});
var $author$project$MicroScheme$Interpreter$step = function (state) {
	var _v0 = A2(
		$author$project$MicroScheme$Parser$parse,
		$author$project$MicroScheme$Environment$root(state.a4),
		state.cb);
	if (_v0.$ === 1) {
		var err = _v0.a;
		return _Utils_update(
			state,
			{dt: 'Parse error'});
	} else {
		var expr = _v0.a;
		_v1$3:
		while (true) {
			if (expr.$ === 8) {
				switch (expr.a.$) {
					case 3:
						var name = expr.a.a;
						var body = expr.b;
						return _Utils_update(
							state,
							{
								a4: A3($author$project$MicroScheme$Environment$addSymbolToRoot, name, body, state.a4),
								dt: name
							});
					case 5:
						if (expr.a.a.b && (expr.a.a.a.$ === 3)) {
							if (expr.b.$ === 5) {
								var _v2 = expr.a.a;
								var name = _v2.a.a;
								var args = _v2.b;
								var body = expr.b.a;
								var newBody = A2(
									$elm$core$List$map,
									$author$project$MicroScheme$Frame$resolve(
										$author$project$MicroScheme$Environment$root(state.a4)),
									body);
								var value = A2(
									$author$project$MicroScheme$Expr$Lambda,
									$author$project$MicroScheme$Expr$L(args),
									$author$project$MicroScheme$Expr$L(newBody));
								return _Utils_update(
									state,
									{
										a4: A3($author$project$MicroScheme$Environment$addSymbolToRoot, name, value, state.a4),
										dt: name
									});
							} else {
								var _v3 = expr.a.a;
								var name = _v3.a.a;
								var args = _v3.b;
								var body = expr.b;
								var newBody = A2(
									$author$project$MicroScheme$Frame$resolve,
									$author$project$MicroScheme$Environment$root(state.a4),
									body);
								var value = A2(
									$author$project$MicroScheme$Expr$Lambda,
									$author$project$MicroScheme$Expr$L(args),
									newBody);
								return _Utils_update(
									state,
									{
										a4: A3($author$project$MicroScheme$Environment$addSymbolToRoot, name, value, state.a4),
										dt: name
									});
							}
						} else {
							break _v1$3;
						}
					default:
						break _v1$3;
				}
			} else {
				break _v1$3;
			}
		}
		var _v4 = A2($author$project$MicroScheme$Eval$eval, state.a4, expr);
		if (_v4.$ === 1) {
			var error = _v4.a;
			return _Utils_update(
				state,
				{dt: 'error: XXX'});
		} else {
			var value = _v4.a;
			return _Utils_update(
				state,
				{
					dt: $author$project$MicroScheme$Interpreter$display(value)
				});
		}
	}
};
var $author$project$MicroScheme$Interpreter$runProgram = F2(
	function (separator, inputString) {
		var inputList = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, separator, inputString));
		var initialState = $author$project$MicroScheme$Interpreter$init('');
		var finalState = A3(
			$elm$core$List$foldl,
			F2(
				function (str, state_) {
					return $author$project$MicroScheme$Interpreter$step(
						A2($author$project$MicroScheme$Interpreter$input, str, state_));
				}),
			initialState,
			inputList);
		return finalState.dt;
	});
var $author$project$Render$Expression$renderScheme = F5(
	function (g, acc, s, attr, exprList) {
		var inputText = A2(
			$elm$core$String$join,
			' ',
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		return $mdgriffith$elm_ui$Element$text(
			A2($author$project$MicroScheme$Interpreter$runProgram, ';', inputText));
	});
var $author$project$Render$Expression$errorText = F2(
	function (index, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
				]),
			$mdgriffith$elm_ui$Element$text(
				'(' + ($elm$core$String$fromInt(index) + (') not implemented: ' + str))));
	});
var $author$project$Render$Math$InlineMathMode = 0;
var $author$project$ETeX$Transform$Expr = function (a) {
	return {$: 20, a: a};
};
var $author$project$ETeX$Transform$LeftParen = {$: 14};
var $author$project$ETeX$Transform$RightParen = {$: 15};
var $author$project$ETeX$Transform$convertFromETeXDeco = function (deco) {
	if (!deco.$) {
		var mathExpr = deco.a;
		return $author$project$ETeX$Transform$DecoM(
			$author$project$ETeX$Transform$convertFromETeXMathExpr(mathExpr));
	} else {
		var n = deco.a;
		return $author$project$ETeX$Transform$DecoI(n);
	}
};
var $author$project$ETeX$Transform$convertFromETeXMathExpr = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return $author$project$ETeX$Transform$AlphaNum(str);
		case 1:
			var str = expr.a;
			return $author$project$ETeX$Transform$F0(str);
		case 2:
			var str = expr.a;
			return $author$project$ETeX$Transform$F0(str);
		case 6:
			var n = expr.a;
			return $author$project$ETeX$Transform$Param(n);
		case 7:
			return $author$project$ETeX$Transform$WS;
		case 8:
			return $author$project$ETeX$Transform$MathSpace;
		case 9:
			return $author$project$ETeX$Transform$MathSmallSpace;
		case 10:
			return $author$project$ETeX$Transform$MathMediumSpace;
		case 11:
			return $author$project$ETeX$Transform$LeftMathBrace;
		case 12:
			return $author$project$ETeX$Transform$RightMathBrace;
		case 13:
			var str = expr.a;
			return $author$project$ETeX$Transform$MathSymbols(str);
		case 3:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$Arg(
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertFromETeXMathExpr, exprs));
		case 4:
			var decoExpr = expr.a;
			return $author$project$ETeX$Transform$Sub(
				$author$project$ETeX$Transform$convertFromETeXDeco(decoExpr));
		case 5:
			var decoExpr = expr.a;
			return $author$project$ETeX$Transform$Super(
				$author$project$ETeX$Transform$convertFromETeXDeco(decoExpr));
		case 14:
			var name = expr.a;
			var args = expr.b;
			return A2(
				$author$project$ETeX$Transform$Macro,
				name,
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertFromETeXMathExpr, args));
		case 15:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$Expr(
				A2($elm$core$List$map, $author$project$ETeX$Transform$convertFromETeXMathExpr, exprs));
		case 17:
			return $author$project$ETeX$Transform$LeftParen;
		case 18:
			return $author$project$ETeX$Transform$RightParen;
		default:
			return $author$project$ETeX$Transform$Comma;
	}
};
var $author$project$ETeX$Transform$replaceParam_ = F3(
	function (k, expr, target) {
		switch (target.$) {
			case 2:
				var exprs = target.a;
				return $author$project$ETeX$Transform$Arg(
					A2(
						$elm$core$List$map,
						A2($author$project$ETeX$Transform$replaceParam_, k, expr),
						exprs));
			case 5:
				var decoExpr = target.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$ETeX$Transform$Sub(
						$author$project$ETeX$Transform$DecoM(
							A3($author$project$ETeX$Transform$replaceParam_, k, expr, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$ETeX$Transform$Sub(
						$author$project$ETeX$Transform$DecoI(m));
				}
			case 6:
				var decoExpr = target.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$ETeX$Transform$Super(
						$author$project$ETeX$Transform$DecoM(
							A3($author$project$ETeX$Transform$replaceParam_, k, expr, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$ETeX$Transform$Super(
						$author$project$ETeX$Transform$DecoI(m));
				}
			case 7:
				var m = target.a;
				return _Utils_eq(m, k) ? expr : $author$project$ETeX$Transform$Param(m);
			case 18:
				var name = target.a;
				var exprs = target.b;
				return A2(
					$author$project$ETeX$Transform$Macro,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$ETeX$Transform$replaceParam_, k, expr),
						exprs));
			case 3:
				var exprs = target.a;
				return $author$project$ETeX$Transform$PArg(
					A2(
						$elm$core$List$map,
						A2($author$project$ETeX$Transform$replaceParam_, k, expr),
						exprs));
			case 4:
				var exprs = target.a;
				return $author$project$ETeX$Transform$ParenthExpr(
					A2(
						$elm$core$List$map,
						A2($author$project$ETeX$Transform$replaceParam_, k, expr),
						exprs));
			case 19:
				var name = target.a;
				var args = target.b;
				return A2(
					$author$project$ETeX$Transform$FCall,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$ETeX$Transform$replaceParam_, k, expr),
						args));
			case 20:
				var exprs = target.a;
				return $author$project$ETeX$Transform$Expr(
					A2(
						$elm$core$List$map,
						A2($author$project$ETeX$Transform$replaceParam_, k, expr),
						exprs));
			case 21:
				var str = target.a;
				return $author$project$ETeX$Transform$Text(str);
			case 0:
				var str = target.a;
				return $author$project$ETeX$Transform$AlphaNum(str);
			case 1:
				var str = target.a;
				return $author$project$ETeX$Transform$F0(str);
			case 8:
				return $author$project$ETeX$Transform$WS;
			case 9:
				return $author$project$ETeX$Transform$MathSpace;
			case 10:
				return $author$project$ETeX$Transform$MathSmallSpace;
			case 11:
				return $author$project$ETeX$Transform$MathMediumSpace;
			case 12:
				return $author$project$ETeX$Transform$LeftMathBrace;
			case 13:
				return $author$project$ETeX$Transform$RightMathBrace;
			case 14:
				return $author$project$ETeX$Transform$LeftParen;
			case 15:
				return $author$project$ETeX$Transform$RightParen;
			case 16:
				return $author$project$ETeX$Transform$Comma;
			default:
				var str = target.a;
				return $author$project$ETeX$Transform$MathSymbols(str);
		}
	});
var $author$project$ETeX$Transform$replaceParam = F3(
	function (k, expr, exprs) {
		return A2(
			$elm$core$List$map,
			A2($author$project$ETeX$Transform$replaceParam_, k, expr),
			exprs);
	});
var $author$project$ETeX$Transform$replaceParams = F2(
	function (replacementList, target) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var k = _v0.a;
					var replacement = _v0.b;
					return A3($author$project$ETeX$Transform$replaceParam, k + 1, replacement, acc);
				}),
			target,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (k, item) {
						return _Utils_Tuple2(k, item);
					}),
				replacementList));
	});
var $author$project$ETeX$Transform$expandMacro_ = F2(
	function (args, _v0) {
		var arity = _v0.a;
		var macroDefBody = _v0.b;
		var localMacroDefBody = A2($elm$core$List$map, $author$project$ETeX$Transform$convertFromETeXMathExpr, macroDefBody);
		return A2($author$project$ETeX$Transform$replaceParams, args, localMacroDefBody);
	});
var $author$project$ETeX$Transform$extractMacroArgs = function (args) {
	extractMacroArgs:
	while (true) {
		if (!args.b) {
			return _List_Nil;
		} else {
			switch (args.a.$) {
				case 3:
					var contents = args.a.a;
					var rest = args.b;
					return A2(
						$elm$core$List$cons,
						$author$project$ETeX$Transform$Arg(contents),
						$author$project$ETeX$Transform$extractMacroArgs(rest));
				case 16:
					var _v1 = args.a;
					var rest = args.b;
					var $temp$args = rest;
					args = $temp$args;
					continue extractMacroArgs;
				default:
					var other = args.a;
					var rest = args.b;
					return A2(
						$elm$core$List$cons,
						other,
						$author$project$ETeX$Transform$extractMacroArgs(rest));
			}
		}
	}
};
var $author$project$ETeX$Transform$flattenForSingleArg = function (args) {
	if (!args.b) {
		return _List_Nil;
	} else {
		if (args.a.$ === 3) {
			var contents = args.a.a;
			var rest = args.b;
			return _Utils_ap(
				contents,
				$author$project$ETeX$Transform$flattenForSingleArg(rest));
		} else {
			var other = args.a;
			var rest = args.b;
			return A2(
				$elm$core$List$cons,
				other,
				$author$project$ETeX$Transform$flattenForSingleArg(rest));
		}
	}
};
var $author$project$ETeX$Transform$expandMacroWithDict = F2(
	function (dict, expr) {
		switch (expr.$) {
			case 18:
				var macroName = expr.a;
				var args = expr.b;
				var _v1 = A2($elm$core$Dict$get, macroName, dict);
				if (_v1.$ === 1) {
					return A2(
						$author$project$ETeX$Transform$Macro,
						macroName,
						A2(
							$elm$core$List$map,
							$author$project$ETeX$Transform$expandMacroWithDict(dict),
							args));
				} else {
					var _v2 = _v1.a;
					var arity = _v2.a;
					var exprs = _v2.b;
					var macroArgs = function () {
						if (arity === 1) {
							if (!args.b) {
								return _List_Nil;
							} else {
								return _List_fromArray(
									[
										$author$project$ETeX$Transform$Arg(
										$author$project$ETeX$Transform$flattenForSingleArg(args))
									]);
							}
						} else {
							return $author$project$ETeX$Transform$extractMacroArgs(args);
						}
					}();
					return $author$project$ETeX$Transform$Expr(
						A2(
							$author$project$ETeX$Transform$expandMacro_,
							A2(
								$elm$core$List$map,
								$author$project$ETeX$Transform$expandMacroWithDict(dict),
								macroArgs),
							A2($author$project$ETeX$MathMacros$MacroBody, arity, exprs)));
				}
			case 2:
				var exprs = expr.a;
				return $author$project$ETeX$Transform$Arg(
					A2(
						$elm$core$List$map,
						$author$project$ETeX$Transform$expandMacroWithDict(dict),
						exprs));
			case 5:
				var decoExpr = expr.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$ETeX$Transform$Sub(
						$author$project$ETeX$Transform$DecoM(
							A2($author$project$ETeX$Transform$expandMacroWithDict, dict, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$ETeX$Transform$Sub(
						$author$project$ETeX$Transform$DecoI(m));
				}
			case 6:
				var decoExpr = expr.a;
				if (!decoExpr.$) {
					var decoMExpr = decoExpr.a;
					return $author$project$ETeX$Transform$Super(
						$author$project$ETeX$Transform$DecoM(
							A2($author$project$ETeX$Transform$expandMacroWithDict, dict, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$ETeX$Transform$Super(
						$author$project$ETeX$Transform$DecoI(m));
				}
			case 3:
				var exprs = expr.a;
				return $author$project$ETeX$Transform$PArg(
					A2(
						$elm$core$List$map,
						$author$project$ETeX$Transform$expandMacroWithDict(dict),
						exprs));
			case 4:
				var exprs = expr.a;
				return $author$project$ETeX$Transform$ParenthExpr(
					A2(
						$elm$core$List$map,
						$author$project$ETeX$Transform$expandMacroWithDict(dict),
						exprs));
			case 19:
				var name = expr.a;
				var args = expr.b;
				return A2(
					$author$project$ETeX$Transform$FCall,
					name,
					A2(
						$elm$core$List$map,
						$author$project$ETeX$Transform$expandMacroWithDict(dict),
						args));
			case 20:
				var exprs = expr.a;
				return $author$project$ETeX$Transform$Expr(
					A2(
						$elm$core$List$map,
						$author$project$ETeX$Transform$expandMacroWithDict(dict),
						exprs));
			case 21:
				var str = expr.a;
				return $author$project$ETeX$Transform$Text(str);
			case 0:
				var str = expr.a;
				return $author$project$ETeX$Transform$AlphaNum(str);
			case 1:
				var str = expr.a;
				return $author$project$ETeX$Transform$F0(str);
			case 7:
				var n = expr.a;
				return $author$project$ETeX$Transform$Param(n);
			case 8:
				return $author$project$ETeX$Transform$WS;
			case 9:
				return $author$project$ETeX$Transform$MathSpace;
			case 10:
				return $author$project$ETeX$Transform$MathSmallSpace;
			case 11:
				return $author$project$ETeX$Transform$MathMediumSpace;
			case 12:
				return $author$project$ETeX$Transform$LeftMathBrace;
			case 13:
				return $author$project$ETeX$Transform$RightMathBrace;
			case 14:
				return $author$project$ETeX$Transform$LeftParen;
			case 15:
				return $author$project$ETeX$Transform$RightParen;
			case 16:
				return $author$project$ETeX$Transform$Comma;
			default:
				var str = expr.a;
				return $author$project$ETeX$Transform$MathSymbols(str);
		}
	});
var $author$project$ETeX$Transform$parseWithDict = F2(
	function (userMacroDict, str) {
		return A2(
			$elm$parser$Parser$Advanced$run,
			$author$project$ETeX$Transform$many(
				$author$project$ETeX$Transform$mathExprParser(userMacroDict)),
			str);
	});
var $author$project$ETeX$Transform$parseManyWithDict = F2(
	function (userMacroDict, str) {
		return A2(
			$elm$core$Result$map,
			$elm$core$List$concat,
			$elm_community$result_extra$Result$Extra$combine(
				A2(
					$elm$core$List$map,
					$author$project$ETeX$Transform$parseWithDict(userMacroDict),
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						$elm$core$String$lines(
							$elm$core$String$trim(str))))));
	});
var $author$project$ETeX$Transform$encloseB = function (str) {
	return '{' + (str + '}');
};
var $author$project$ETeX$Transform$encloseP = function (str) {
	return '(' + (str + ')');
};
var $author$project$ETeX$Transform$print = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return str;
		case 12:
			return '\\{';
		case 13:
			return '\\}';
		case 14:
			return '(';
		case 15:
			return ')';
		case 10:
			return '\\,';
		case 11:
			return '\\;';
		case 9:
			return '\\ ';
		case 1:
			var str = expr.a;
			return '\\' + str;
		case 7:
			var k = expr.a;
			return '#' + $elm$core$String$fromInt(k);
		case 2:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$encloseB(
				$author$project$ETeX$Transform$printList(exprs));
		case 3:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$encloseP(
				$author$project$ETeX$Transform$printList(exprs));
		case 5:
			var deco = expr.a;
			return '_' + $author$project$ETeX$Transform$printDeco(deco);
		case 6:
			var deco = expr.a;
			return '^' + $author$project$ETeX$Transform$printDeco(deco);
		case 17:
			var str = expr.a;
			return str;
		case 8:
			return ' ';
		case 18:
			var name = expr.a;
			var body = expr.b;
			_v8$2:
			while (true) {
				if (body.b && (!body.b.b)) {
					switch (body.a.$) {
						case 3:
							var exprs = body.a.a;
							return '\\' + (name + $author$project$ETeX$Transform$encloseB(
								$author$project$ETeX$Transform$printList(exprs)));
						case 4:
							var exprs = body.a.a;
							return '\\' + (name + $author$project$ETeX$Transform$encloseB(
								$author$project$ETeX$Transform$printList(exprs)));
						default:
							break _v8$2;
					}
				} else {
					break _v8$2;
				}
			}
			if (body.b && (body.a.$ === 3)) {
				return '\\' + (name + $author$project$ETeX$Transform$printMacroArgs(body));
			} else {
				return '\\' + (name + $author$project$ETeX$Transform$printList(body));
			}
		case 19:
			var name = expr.a;
			var args = expr.b;
			return name + ('(' + ($author$project$ETeX$Transform$printArgList(args) + ')'));
		case 20:
			var exprs = expr.a;
			return A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $author$project$ETeX$Transform$print, exprs));
		case 16:
			return ',';
		case 4:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$encloseP(
				$author$project$ETeX$Transform$printList(exprs));
		default:
			var str = expr.a;
			return '\\text{' + (str + '}');
	}
};
var $author$project$ETeX$Transform$printArgList = function (exprs) {
	if (!exprs.b) {
		return '';
	} else {
		if (exprs.a.$ === 3) {
			if (!exprs.b.b) {
				var contents = exprs.a.a;
				return $author$project$ETeX$Transform$printList(contents);
			} else {
				if (exprs.b.a.$ === 16) {
					var contents = exprs.a.a;
					var _v5 = exprs.b;
					var _v6 = _v5.a;
					var rest = _v5.b;
					return $author$project$ETeX$Transform$printList(contents) + (',' + $author$project$ETeX$Transform$printArgList(rest));
				} else {
					var contents = exprs.a.a;
					var rest = exprs.b;
					return _Utils_ap(
						$author$project$ETeX$Transform$printList(contents),
						$author$project$ETeX$Transform$printArgList(rest));
				}
			}
		} else {
			var other = exprs.a;
			var rest = exprs.b;
			return _Utils_ap(
				$author$project$ETeX$Transform$print(other),
				$author$project$ETeX$Transform$printArgList(rest));
		}
	}
};
var $author$project$ETeX$Transform$printDeco = function (deco) {
	if (!deco.$) {
		var expr = deco.a;
		return $author$project$ETeX$Transform$print(expr);
	} else {
		var k = deco.a;
		return $elm$core$String$fromInt(k);
	}
};
var $author$project$ETeX$Transform$printList = function (exprs) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$ETeX$Transform$print, exprs));
};
var $author$project$ETeX$Transform$printMacroArgs = function (exprs) {
	if (!exprs.b) {
		return '';
	} else {
		if (exprs.a.$ === 3) {
			if (!exprs.b.b) {
				var contents = exprs.a.a;
				return $author$project$ETeX$Transform$encloseB(
					$author$project$ETeX$Transform$printList(contents));
			} else {
				if (exprs.b.a.$ === 16) {
					var contents = exprs.a.a;
					var _v1 = exprs.b;
					var _v2 = _v1.a;
					var rest = _v1.b;
					return _Utils_ap(
						$author$project$ETeX$Transform$encloseB(
							$author$project$ETeX$Transform$printList(contents)),
						$author$project$ETeX$Transform$printMacroArgs(rest));
				} else {
					var contents = exprs.a.a;
					var rest = exprs.b;
					return _Utils_ap(
						$author$project$ETeX$Transform$encloseB(
							$author$project$ETeX$Transform$printList(contents)),
						$author$project$ETeX$Transform$printMacroArgs(rest));
				}
			}
		} else {
			var other = exprs.a;
			var rest = exprs.b;
			return _Utils_ap(
				$author$project$ETeX$Transform$print(other),
				$author$project$ETeX$Transform$printMacroArgs(rest));
		}
	}
};
var $author$project$ETeX$Transform$evalStr = F2(
	function (userDefinedMacroDict, str) {
		var _v0 = A2(
			$author$project$ETeX$Transform$parseManyWithDict,
			userDefinedMacroDict,
			$elm$core$String$trim(str));
		if (!_v0.$) {
			var result = _v0.a;
			return $author$project$ETeX$Transform$printList(
				A2(
					$elm$core$List$map,
					$author$project$ETeX$Transform$expandMacroWithDict(userDefinedMacroDict),
					result));
		} else {
			return str;
		}
	});
var $author$project$Render$Math$eraseLabeMacro = function (content) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Generic$PTextMacro$eraseLeadingMacro('label'),
			$elm$core$String$lines(content)));
};
var $author$project$Render$Math$isDisplayMathMode = function (displayMode) {
	if (!displayMode) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Render$Math$mathText_ = F3(
	function (theme, displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Render$Math$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(content)),
					A2($elm$html$Html$Attributes$attribute, 'theme', theme)
				]),
			_List_Nil);
	});
var $author$project$Render$Math$mathText = F6(
	function (theme, generation, width, id, displayMode, content) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding-top', '0px'),
						A2($elm$html$Html$Attributes$style, 'padding-bottom', '0px'),
						$elm$html$Html$Attributes$id(id)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(generation),
						A3(
							$author$project$Render$Math$mathText_,
							theme,
							displayMode,
							$author$project$Render$Math$eraseLabeMacro(content)))
					])));
	});
var $author$project$Render$ThemeHelpers$themeAsStringFromSettings = function (settings) {
	var _v0 = settings.h7;
	if (!_v0) {
		return 'light';
	} else {
		return 'dark';
	}
};
var $author$project$Render$Expression$mathElement = F5(
	function (generation, acc, s, meta, str) {
		return A6(
			$author$project$Render$Math$mathText,
			$author$project$Render$ThemeHelpers$themeAsStringFromSettings(s),
			generation,
			'width',
			meta.hg,
			0,
			A2($author$project$ETeX$Transform$evalStr, acc.jS, str));
	});
var $author$project$Render$Expression$chem = F5(
	function (g, a, s, m, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3($author$project$Render$Sync$highlightIfIdSelected, m.hg, s, _List_Nil),
			A5($author$project$Render$Expression$mathElement, g, a, s, m, '\\ce{' + (str + '}')));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 0:
						return 'serif';
					case 1:
						return 'sans-serif';
					case 2:
						return 'monospace';
					case 3:
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 4:
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.bn;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 2};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 3, a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $mdgriffith$elm_ui$Element$Font$unitalicized = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.t6);
var $author$project$Render$Expression$codeStyle = function (settings) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
					$mdgriffith$elm_ui$Element$Font$monospace
				])),
			$mdgriffith$elm_ui$Element$Font$unitalicized,
			$mdgriffith$elm_ui$Element$Font$color(settings.qD),
			$mdgriffith$elm_ui$Element$Background$color(settings.lV),
			$mdgriffith$elm_ui$Element$paddingEach(
			{iG: 0, jG: 2, kC: 2, k2: 0})
		]);
};
var $author$project$Render$Expression$verbatimElement = F4(
	function (settings, formatList, meta, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$Font$size(13),
				A2(
					$elm$core$List$cons,
					$author$project$Render$Expression$htmlId(meta.hg),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(11)),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$Background$color(settings.lV),
							formatList)))),
			$mdgriffith$elm_ui$Element$text(str));
	});
var $author$project$Render$Expression$code = F5(
	function (g, a, s, m, str) {
		return A4(
			$author$project$Render$Expression$verbatimElement,
			s,
			$author$project$Render$Expression$codeStyle(s),
			m,
			str);
	});
var $author$project$Render$Expression$math = F5(
	function (g, a, s, m, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3($author$project$Render$Sync$highlightIfIdSelected, m.hg, s, _List_Nil),
			A5($author$project$Render$Expression$mathElement, g, a, s, m, str));
	});
var $author$project$Render$Expression$verbatimDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'$',
			F5(
				function (g, a, s, m, str) {
					return A5($author$project$Render$Expression$math, g, a, s, m, str);
				})),
			_Utils_Tuple2(
			'`',
			F5(
				function (g, a, s, m, str) {
					return A5($author$project$Render$Expression$code, g, a, s, m, str);
				})),
			_Utils_Tuple2(
			'code',
			F5(
				function (g, a, s, m, str) {
					return A5($author$project$Render$Expression$code, g, a, s, m, str);
				})),
			_Utils_Tuple2(
			'math',
			F5(
				function (g, a, s, m, str) {
					return A5($author$project$Render$Expression$math, g, a, s, m, str);
				})),
			_Utils_Tuple2(
			'chem',
			F5(
				function (g, a, s, m, str) {
					return A5($author$project$Render$Expression$chem, g, a, s, m, str);
				}))
		]));
var $author$project$Render$Expression$renderVerbatim = F6(
	function (name, generation, acc, settings, meta, str) {
		var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Expression$verbatimDict);
		if (_v0.$ === 1) {
			return A2($author$project$Render$Expression$errorText, 1, name);
		} else {
			var f = _v0.a;
			return A5(f, generation, acc, settings, meta, str);
		}
	});
var $author$project$Render$Expression$rightBracket = $mdgriffith$elm_ui$Element$text(']');
var $mdgriffith$elm_ui$Element$Font$strike = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.tD);
var $author$project$Render$Constants$titleFontSize = 32;
var $author$project$Render$Expression$ulink = F5(
	function (_v0, _v1, settings, attr, exprList) {
		var _v2 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v2.$ === 1) {
			return $author$project$Render$Expression$errorText_('Please provide label and url');
		} else {
			var argString = _v2.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var fragment = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			var username = A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2($elm$core$String$split, ':', fragment)));
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					fI: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(settings.bH)
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					ka: $elm$core$Maybe$Just(
						A3($author$project$ScriptaV2$Msg$GetPublicDocumentFromAuthor, 0, username, fragment))
				});
		}
	});
var $author$project$Render$Expression$underscore = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			$mdgriffith$elm_ui$Element$text('_'));
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $author$project$Render$Utility$unicodeFromHex = function (hex) {
	return $elm$core$String$fromChar(
		$elm$core$Char$fromCode(hex));
};
var $author$project$Render$Expression$vspace = F5(
	function (_v0, _v1, _v2, _v3, exprList) {
		var h = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$String$toInt(
				A2(
					$elm$core$String$join,
					'',
					$author$project$Generic$ASTTools$exprListToStringList(exprList))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $author$project$Render$Expression$abstract = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Abstract.')),
					A6($author$project$Render$Expression$simpleElement, _List_Nil, g, acc, s, attr, exprList)
				]));
	});
var $author$project$Render$Expression$anchor = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Font$underline, attr),
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$render, g, acc, s, _List_Nil),
				exprList));
	});
var $author$project$Render$Expression$blue = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 0, 200))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$boldItalic = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 2, k2: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$brackets = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('['),
					A6($author$project$Render$Expression$simpleElement, _List_Nil, g, acc, s, attr, exprList),
					$mdgriffith$elm_ui$Element$text(' ]')
				]));
	});
var $author$project$Render$Expression$emph = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 2, k2: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$errorHighlight = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 200, 200)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$gray = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$green = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 140, 0))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$highlight = F5(
	function (g, acc, s, attr, exprList_) {
		var exprList = A2($author$project$Generic$ASTTools$filterOutExpressionsOnName, 'color', exprList_);
		var colorName = $elm$core$String$trim(
			A2(
				$elm$core$Maybe$withDefault,
				'yellow',
				A2(
					$elm$core$Maybe$andThen,
					$author$project$Generic$ASTTools$getText,
					$elm$core$List$head(
						A2($author$project$Generic$ASTTools$filterExpressionsOnName, 'color', exprList_)))));
		var colorElement = A2(
			$elm$core$Maybe$withDefault,
			A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0),
			A2($elm$core$Dict$get, colorName, $author$project$Render$Expression$colorDict));
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(colorElement),
					A2($mdgriffith$elm_ui$Element$paddingXY, 6, 3)
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$italic = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 2, k2: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$large = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(18)
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$magenta = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 51, 192))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$mark1 = F5(
	function (g, acc, s, attr, exprList) {
		if (((((exprList.b && (!exprList.a.$)) && exprList.b.b) && (exprList.b.a.$ === 1)) && (exprList.b.a.a === 'anchor')) && (!exprList.b.b.b)) {
			var _v7 = exprList.a;
			var str = _v7.a;
			var _v8 = exprList.b;
			var _v9 = _v8.a;
			var list = _v9.b;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$author$project$Render$Expression$htmlId(
						$elm$core$String$trim(str)),
						$mdgriffith$elm_ui$Element$Font$underline
					]),
				A2(
					$elm$core$List$map,
					A4($author$project$Render$Expression$render, g, acc, s, attr),
					list));
		} else {
			return $mdgriffith$elm_ui$Element$text('Parse error in element mark?');
		}
	});
var $author$project$Render$Expression$marked = F5(
	function (g, acc, s, attr, exprList) {
		_v4$2:
		while (true) {
			if (exprList.b) {
				if (!exprList.b.b) {
					var first = exprList.a;
					return A6(
						$author$project$Render$Expression$simpleElement,
						_List_Nil,
						g,
						acc,
						s,
						attr,
						_List_fromArray(
							[first]));
				} else {
					if (!exprList.a.$) {
						var _v5 = exprList.a;
						var str = _v5.a;
						var rest = exprList.b;
						return A6(
							$author$project$Render$Expression$simpleElement,
							_List_fromArray(
								[
									$author$project$Render$Expression$htmlId(str)
								]),
							g,
							acc,
							s,
							attr,
							rest);
					} else {
						break _v4$2;
					}
				}
			} else {
				break _v4$2;
			}
		}
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$Expression$pink = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 100, 100))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$quote = F5(
	function (g, acc, s, attr, exprList) {
		var rightQuote = $elm$core$String$fromChar('\"');
		var meta = {qb: 0, rb: 1, hg: 'qq', jz: 0};
		var leftQuote = $elm$core$String$fromChar('\"');
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$render, g, acc, s, attr),
				A2(
					$elm$core$List$cons,
					A2($author$project$Generic$Language$Text, leftQuote, meta),
					_Utils_ap(
						exprList,
						_List_fromArray(
							[
								A2($author$project$Generic$Language$Text, rightQuote, meta)
							])))));
	});
var $author$project$Render$Expression$red = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 200, 0, 0))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$render = F5(
	function (generation, acc, settings, attrs, expr) {
		var background = $mdgriffith$elm_ui$Element$Background$color(
			A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.sx;
				},
				settings.h7));
		switch (expr.$) {
			case 0:
				var string = expr.a;
				var meta = expr.b;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						background,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Events$onClick(
									$author$project$ScriptaV2$Msg$SendMeta(meta)),
									$author$project$Render$Expression$htmlId(meta.hg)
								]),
							attrs)),
					$mdgriffith$elm_ui$Element$text(string + ' '));
			case 1:
				var name = expr.a;
				var exprList = expr.b;
				var meta = expr.c;
				if (A2(
					$elm$core$List$member,
					name,
					_List_fromArray(
						['chem', 'math', 'code']))) {
					return A6(
						$author$project$Render$Expression$renderVerbatim,
						name,
						generation,
						acc,
						settings,
						meta,
						A2(
							$elm$core$String$join,
							' ',
							$author$project$Generic$ASTTools$exprListToStringList(exprList)));
				} else {
					if (name === 'anchor') {
						var contentIds = A2(
							$elm$core$List$map,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Generic$Language$getMeta,
								function ($) {
									return $.hg;
								}),
							exprList);
						var contentIdMatches = A2($elm$core$List$member, settings.kL, contentIds);
						var anchorIdMatches = _Utils_eq(settings.kL, meta.hg);
						var shouldHighlight = anchorIdMatches || contentIdMatches;
						var highlightAttrs = shouldHighlight ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'background-color', '#ADD8E6')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'padding', '4px')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('anchor-highlight'))
							]) : _List_Nil;
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Events$onClick(
										$author$project$ScriptaV2$Msg$SendMeta(meta)),
										$author$project$Render$Expression$htmlId(meta.hg)
									]),
								highlightAttrs),
							A6($author$project$Render$Expression$renderMarked, name, generation, acc, settings, attrs, exprList));
					} else {
						if (name === 'mark') {
							var anchorIdMatches = _Utils_eq(settings.kL, meta.hg);
							var highlightAttrs = anchorIdMatches ? _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'background-color', '#ADD8E6')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'padding', '4px')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('anchor-highlight'))
								]) : _List_Nil;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Events$onClick(
											$author$project$ScriptaV2$Msg$SendMeta(meta)),
											$author$project$Render$Expression$htmlId(meta.hg)
										]),
									highlightAttrs),
								A6($author$project$Render$Expression$renderMarked, name, generation, acc, settings, attrs, exprList));
						} else {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									background,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Events$onClick(
											$author$project$ScriptaV2$Msg$SendMeta(meta)),
											$author$project$Render$Expression$htmlId(meta.hg)
										])),
								A6($author$project$Render$Expression$renderMarked, name, generation, acc, settings, attrs, exprList));
						}
					}
				}
			case 2:
				var name = expr.a;
				var str = expr.b;
				var meta = expr.c;
				return A6($author$project$Render$Expression$renderVerbatim, name, generation, acc, settings, meta, str);
			default:
				var exprList = expr.a;
				var meta = expr.b;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							A2(
								$elm$core$List$cons,
								background,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$paddingEach(
										{iG: 0, jG: 24, kC: 0, k2: 0})
									])),
							A2(
								$elm$core$List$map,
								A4($author$project$Render$Expression$render, generation, acc, settings, attrs),
								exprList))
						]));
		}
	});
var $author$project$Render$Expression$renderMarked = F6(
	function (name, generation, acc, settings, attrs, exprList) {
		var _v2 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Render$Expression$cyclic$markupDict());
		if (_v2.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$cons,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Expression$errorBackgroundColor),
								A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
							]),
						$mdgriffith$elm_ui$Element$text(name)),
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Expression$render, generation, acc, settings, attrs),
						exprList)));
		} else {
			var f = _v2.a;
			return A5(f, generation, acc, settings, attrs, exprList);
		}
	});
var $author$project$Render$Expression$simpleElement = F6(
	function (formatList, g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			formatList,
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$render, g, acc, s, attr),
				exprList));
	});
var $author$project$Render$Expression$smallsubheading = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 0, jG: 0, kC: 0, k2: 8})
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(16),
								$mdgriffith$elm_ui$Element$Font$italic
							]),
						A2(
							$elm$core$List$map,
							A4($author$project$Render$Expression$render, g, acc, s, attr),
							exprList)))
				]));
	});
var $author$project$Render$Expression$strike = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$strike]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$strong = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$subheading = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 0, jG: 0, kC: 0, k2: 8})
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						A2(
							$elm$core$List$map,
							A4($author$project$Render$Expression$render, g, acc, s, attr),
							exprList)))
				]));
	});
var $author$project$Render$Expression$table = F5(
	function (g, acc, s, attr, rows) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$tableRow, g, acc, s, attr),
				rows));
	});
var $author$project$Render$Expression$tableItem = F5(
	function (g, acc, s, attr, expr) {
		if ((expr.$ === 1) && (expr.a === 'tableItem')) {
			var exprList = expr.b;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(100))
					]),
				A2(
					$elm$core$List$map,
					A4($author$project$Render$Expression$render, g, acc, s, attr),
					exprList));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Expression$tableRow = F5(
	function (g, acc, s, attr, expr) {
		if ((expr.$ === 1) && (expr.a === 'tableRow')) {
			var items = expr.b;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$map,
					A4($author$project$Render$Expression$tableItem, g, acc, s, attr),
					items));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Expression$term = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 2, k2: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$title = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size($author$project$Render$Constants$titleFontSize),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 2, k2: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$underline = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$underline]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$var = F5(
	function (g, acc, s, attr, exprList) {
		return A6($author$project$Render$Expression$simpleElement, _List_Nil, g, acc, s, attr, exprList);
	});
var $author$project$Render$Expression$violet = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 150, 100, 255))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
function $author$project$Render$Expression$cyclic$markupDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bibitem',
				F5(
					function (_v10, _v11, _v12, attr, exprList) {
						return $author$project$Render$Expression$bibitem(exprList);
					})),
				_Utils_Tuple2(
				'scheme',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderScheme, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'compute',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderComputation, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'data',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderDataTools, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'button',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderButton, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'strong',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'bold',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'textbf',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'b',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'subheading',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$subheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'sh',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$subheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'smallsubheading',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$smallsubheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ssh',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$smallsubheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'var',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$var, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'marked',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$marked, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'italic',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$italic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'qed',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$qed, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'textit',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$italic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'bi',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$boldItalic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'i',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$italic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'boldItalic',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$boldItalic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'strike',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strike, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'underscore',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$underscore, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ref',
				F5(
					function (_v13, acc, settings, attr, exprList) {
						return A3($author$project$Render$Expression$ref, acc, settings, exprList);
					})),
				_Utils_Tuple2(
				'reflink',
				F5(
					function (_v14, acc, s, attr, exprList) {
						return A3($author$project$Render$Expression$reflink, s, acc, exprList);
					})),
				_Utils_Tuple2(
				'eqref',
				F5(
					function (_v15, acc, s, attr, exprList) {
						return A3($author$project$Render$Expression$eqref, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'underline',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$underline, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'u',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$underline, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'hide',
				F5(
					function (_v16, _v17, _v18, _v19, _v20) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'author',
				F5(
					function (_v21, _v22, _v23, _v24, _v25) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'date',
				F5(
					function (_v26, _v27, _v28, _v29, _v30) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'today',
				F5(
					function (_v31, _v32, _v33, _v34, _v35) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'comment',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$blue, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'lambda',
				F5(
					function (_v36, _v37, _v38, _v39, _v40) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'hrule',
				F5(
					function (_v41, _v42, s, _v43, _v44) {
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(s.uE))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$width(1),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(s.uE)),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$Border$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0.75, 0.75, 0.75))
										]),
									$mdgriffith$elm_ui$Element$text(''))
								]));
					})),
				_Utils_Tuple2(
				'title',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$title, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'setcounter',
				F5(
					function (_v45, _v46, _v47, _v48, _v49) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'red',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$red, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'blue',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$blue, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'green',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$green, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'pink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$pink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'magenta',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$magenta, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'violet',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$violet, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'highlight',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$highlight, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'gray',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$gray, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'errorHighlight',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$errorHighlight, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'link',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$link, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'href',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$href, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ilink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$ilink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ulink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$ulink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'newPost',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$newPost, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'cslink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$cslink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'abstract',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$abstract, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'large',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$large, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'mdash',
				F5(
					function (_v50, _v51, _v52, _v53, _v54) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('—'));
					})),
				_Utils_Tuple2(
				'ndash',
				F5(
					function (_v55, _v56, _v57, _v58, _v59) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('–'));
					})),
				_Utils_Tuple2(
				'box',
				F5(
					function (_v60, _v61, _v62, _v63, _v64) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9744)));
					})),
				_Utils_Tuple2(
				'cbox',
				F5(
					function (_v65, _v66, _v67, _v68, _v69) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9745)));
					})),
				_Utils_Tuple2(
				'rbox',
				F5(
					function (_v70, _v71, _v72, _v73, _v74) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9744)));
					})),
				_Utils_Tuple2(
				'crbox',
				F5(
					function (_v75, _v76, _v77, _v78, _v79) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9745)));
					})),
				_Utils_Tuple2(
				'fbox',
				F5(
					function (_v80, _v81, _v82, _v83, _v84) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(24)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9632)));
					})),
				_Utils_Tuple2(
				'frbox',
				F5(
					function (_v85, _v86, _v87, _v88, _v89) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(24),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9632)));
					})),
				_Utils_Tuple2(
				'label',
				F5(
					function (_v90, _v91, _v92, _v93, _v94) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'cite',
				F5(
					function (_v95, acc, _v96, attr, exprList) {
						return A3($author$project$Render$Expression$cite, acc, attr, exprList);
					})),
				_Utils_Tuple2(
				'table',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$table, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'image',
				F5(
					function (_v97, _v98, s, attr, exprList) {
						return A3($author$project$Render$Graphics$image, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'inlineimage',
				F5(
					function (_v99, _v100, s, attr, exprList) {
						return A3($author$project$Render$Graphics$inlineimage, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'tags',
				F5(
					function (_v101, _v102, _v103, _v104, _v105) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2('quote', $author$project$Render$Expression$quote),
				_Utils_Tuple2('anchor', $author$project$Render$Expression$anchor),
				_Utils_Tuple2('mark', $author$project$Render$Expression$mark1),
				_Utils_Tuple2('vspace', $author$project$Render$Expression$vspace),
				_Utils_Tuple2('break', $author$project$Render$Expression$vspace),
				_Utils_Tuple2('//', $author$project$Render$Expression$par),
				_Utils_Tuple2('par', $author$project$Render$Expression$par),
				_Utils_Tuple2('indent', $author$project$Render$Expression$indent),
				_Utils_Tuple2(
				'term',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$term, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'term_',
				F5(
					function (_v106, _v107, _v108, _v109, _v110) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'footnote',
				F5(
					function (_v111, acc, s, attr, exprList) {
						return A3($author$project$Render$Expression$footnote, acc, s, exprList);
					})),
				_Utils_Tuple2(
				'emph',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$emph, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'dollarSign',
				F5(
					function (_v112, _v113, _v114, _v115, _v116) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'dollar',
				F5(
					function (_v117, _v118, _v119, _v120, _v121) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'brackets',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$brackets, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'rb',
				F5(
					function (_v122, _v123, _v124, _v125, _v126) {
						return $author$project$Render$Expression$rightBracket;
					})),
				_Utils_Tuple2(
				'lb',
				F5(
					function (_v127, _v128, _v129, _v130, _v131) {
						return $author$project$Render$Expression$leftBracket;
					})),
				_Utils_Tuple2(
				'bt',
				F5(
					function (_v132, _v133, _v134, _v135, _v136) {
						return $author$project$Render$Expression$backTick;
					})),
				_Utils_Tuple2(
				'ds',
				F5(
					function (_v137, _v138, _v139, _v140, _v141) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'backTick',
				F5(
					function (_v142, _v143, _v144, _v145, _v146) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('`'));
					}))
			]));
}
var $author$project$Render$Expression$markupDict = $author$project$Render$Expression$cyclic$markupDict();
$author$project$Render$Expression$cyclic$markupDict = function () {
	return $author$project$Render$Expression$markupDict;
};
var $author$project$Render$Helper$renderWithDefault = F6(
	function (_default, count, acc, settings, attr, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(settings.sY),
						$mdgriffith$elm_ui$Element$Font$size(14)
					]),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A4($author$project$Render$Expression$render, count, acc, settings, attr),
			exprs);
	});
var $author$project$Render$Utility$vspace = F2(
	function (top, bottom) {
		return $mdgriffith$elm_ui$Element$paddingEach(
			{iG: bottom, jG: 0, kC: 0, k2: top});
	});
var $author$project$Render$List$desc = F5(
	function (count, acc, settings, attr, block) {
		var label = A2($elm$core$String$join, ' ', block.lv);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$author$project$Render$Utility$idAttribute(block.nJ.hg),
						A2($author$project$Render$Utility$vspace, 0, settings.us)
					]),
				A2($author$project$Render$Sync$attributes, settings, block)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(100))
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						$author$project$Render$Utility$leftPadding(settings.no),
						A2($author$project$Render$Sync$attributes, settings, block)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| desc',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$BlockRegistry$empty = $elm$core$Dict$empty;
var $author$project$Render$Helper$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$Render$Footnote$renderFootnote = function (_v0) {
	var label = _v0.fI;
	var content = _v0.iV;
	var id = _v0.hg;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(4)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$author$project$Render$Helper$htmlId(id),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(24))
					]),
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(label) + '.')),
				$mdgriffith$elm_ui$Element$text(content)
			]));
};
var $author$project$Render$Footnote$endnotes = F5(
	function (_v0, acc, _v1, attrs, block) {
		var endnoteList = A2(
			$elm$core$List$sortBy,
			function ($) {
				return $.fI;
			},
			A2(
				$elm$core$List$map,
				function (_v2) {
					var content = _v2.a;
					var meta = _v2.b;
					return {
						iV: content,
						hg: meta.hg + '_',
						fI: A2(
							$elm$core$Maybe$withDefault,
							0,
							A2($elm$core$Dict$get, meta.hg, acc.g8))
					};
				},
				$elm$core$Dict$toList(acc.g9)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(12)
					]),
				attrs),
			A2(
				$elm$core$List$cons,
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Endnotes')),
				A2($elm$core$List$map, $author$project$Render$Footnote$renderFootnote, endnoteList)));
	});
var $author$project$Render$Footnote$indexItem_ = function (_v0) {
	var name = _v0.a;
	var loc = _v0.b;
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8)),
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$ScriptaV2$Msg$SelectId(loc.hg))
			]),
		{
			fI: A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text(name)),
			uz: $author$project$Render$Utility$internalLink(loc.hg)
		});
};
var $author$project$Render$Footnote$index = F5(
	function (_v0, acc, _v1, attrs, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(150))
				]),
			A2(
				$elm$core$List$map,
				$author$project$Render$Footnote$indexItem_,
				A2(
					$elm$core$List$sortBy,
					function (_v3) {
						var name = _v3.a;
						return name;
					},
					A2(
						$elm$core$List$map,
						function (_v2) {
							var name = _v2.a;
							var item_ = _v2.b;
							return _Utils_Tuple2(
								$elm$core$String$trim(name),
								item_);
						},
						$elm$core$Dict$toList(acc.h3)))));
	});
var $author$project$Render$List$indentationScale = 15;
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $author$project$Render$List$item = F5(
	function (count, acc, settings, attr, block) {
		var level_ = (block.hh / 2) | 0;
		var label_ = function () {
			var _v0 = A2($elm$core$Basics$modBy, 3, level_);
			switch (_v0) {
				case 0:
					return $elm$core$String$fromChar('•');
				case 1:
					return $elm$core$String$fromChar('○');
				default:
					return '◊';
			}
		}();
		var indentation = $author$project$Render$List$indentationScale * level_;
		var id = $elm$core$String$fromInt(block.nJ.jR);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$moveRight(indentation),
						$mdgriffith$elm_ui$Element$alignTop,
						$author$project$Render$Utility$idAttribute(block.nJ.hg),
						A2($author$project$Render$Utility$vspace, 0, settings.us),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE - 50))
					]),
				A2($author$project$Render$Sync$attributes, settings, block)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$moveRight(6),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24)),
							$author$project$Render$Utility$leftPadding(settings.no)
						]),
					$mdgriffith$elm_ui$Element$text(label_)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						$author$project$Render$Utility$leftPadding(settings.no),
						A2($author$project$Render$Sync$attributes, settings, block)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| item',
						count,
						acc,
						_Utils_update(
							settings,
							{uE: settings.uE - indentation}),
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$List$numbered = F5(
	function (count, acc, settings, attr, block) {
		var romanNumerals = _List_fromArray(
			['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'vi']);
		var roman = function (k) {
			return A2(
				$elm$core$Maybe$withDefault,
				'i',
				A2(
					$elm_community$list_extra$List$Extra$getAt,
					A2($elm$core$Basics$modBy, 26, k - 1),
					romanNumerals));
		};
		var id = block.nJ.hg;
		var val = A2($elm$core$Dict$get, id, acc.ew);
		var index_ = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.jz;
				},
				val));
		var level = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.ns;
				},
				val));
		var indentation = $author$project$Render$List$indentationScale * level;
		var alphabet = _List_fromArray(
			['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']);
		var alpha = function (k) {
			return A2(
				$elm$core$Maybe$withDefault,
				'a',
				A2(
					$elm_community$list_extra$List$Extra$getAt,
					A2($elm$core$Basics$modBy, 26, k - 1),
					alphabet));
		};
		var label_ = function () {
			var _v0 = A2($elm$core$Basics$modBy, 3, level);
			switch (_v0) {
				case 1:
					return alpha(index_);
				case 2:
					return roman(index_);
				default:
					return $elm$core$String$fromInt(index_);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveRight(indentation),
					$mdgriffith$elm_ui$Element$alignTop,
					$author$project$Render$Utility$idAttribute(block.nJ.hg),
					A2($author$project$Render$Utility$vspace, 0, settings.us),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.uE - 50))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24)),
							$author$project$Render$Utility$leftPadding(settings.rX)
						]),
					$mdgriffith$elm_ui$Element$text(label_ + '. ')),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						$author$project$Render$Utility$leftPadding(settings.no),
						A2($author$project$Render$Sync$attributes, settings, block)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| numbered',
						count,
						acc,
						_Utils_update(
							settings,
							{uE: settings.uE - indentation}),
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$BlockRegistry$register = F3(
	function (name, renderer, registry) {
		return A3($elm$core$Dict$insert, name, renderer, registry);
	});
var $author$project$Render$BlockRegistry$registerBatch = F2(
	function (renderers, registry) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var name = _v0.a;
					var renderer = _v0.b;
					return A3($author$project$Render$BlockRegistry$register, name, renderer, acc);
				}),
			registry,
			renderers);
	});
var $author$project$Render$Utility$idAttributeFromInt = function (k) {
	return A2(
		$author$project$Render$Utility$elementAttribute,
		'id',
		$elm$core$String$fromInt(k));
};
var $author$project$Render$Blocks$Container$bibitem = F5(
	function (count, acc, settings, attrs, block) {
		var label = function (s) {
			return '[' + (s + ']');
		}(
			A2(
				$elm$core$Maybe$withDefault,
				'(12)',
				A2($elm_community$list_extra$List$Extra$getAt, 0, block.lv)));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR),
					A2($author$project$Render$Utility$vspace, 0, settings.us)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(34))
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2($author$project$Render$Sync$attributes, settings, block),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'bibitem',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Container$blockHeading = function (block) {
	var _v0 = $author$project$Generic$Language$getNameFromHeading(block.fC);
	if (_v0.$ === 1) {
		return '';
	} else {
		var name = _v0.a;
		return A2(
			$elm$core$List$member,
			name,
			_List_fromArray(
				['banner_', 'banner'])) ? '' : ($elm_community$string_extra$String$Extra$toTitleCase(name) + (' ' + (A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'label', block.sS)) + '. ')));
	}
};
var $author$project$Render$Blocks$Container$box = F5(
	function (count, acc, settings, attr, block) {
		var style = function () {
			var _v1 = A2($elm$core$Dict$get, 'style', block.sS);
			if ((!_v1.$) && (_v1.a === 'italic')) {
				return $mdgriffith$elm_ui$Element$Font$italic;
			} else {
				return $mdgriffith$elm_ui$Element$Font$unitalicized;
			}
		}();
		var numbering = A2($elm$core$List$member, 'numbered', block.lv) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			$mdgriffith$elm_ui$Element$text(
				$author$project$Render$Blocks$Container$blockHeading(block))) : $mdgriffith$elm_ui$Element$none;
		var caption = function () {
			var _v0 = A2($elm$core$Dict$get, 'caption', block.sS);
			if (!_v0.$) {
				var c = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(c));
			} else {
				return $mdgriffith$elm_ui$Element$text('Box');
			}
		}();
		var bgColorAttr = $mdgriffith$elm_ui$Element$Background$color(
			A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.sx;
				},
				settings.h7));
		var heading = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 4, jG: 0, kC: 0, k2: 18}),
					$mdgriffith$elm_ui$Element$Font$underline,
					$mdgriffith$elm_ui$Element$Font$color(
					A2(
						$author$project$Render$Settings$getThemedElementColor,
						function ($) {
							return $.o5;
						},
						settings.h7)),
					bgColorAttr
				]),
			_List_fromArray(
				[numbering, caption]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.uE - 0)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$spacing(8),
					A2(
						$elm$core$List$cons,
						bgColorAttr,
						A2($author$project$Render$Sync$attributes, settings, block)))),
			_List_fromArray(
				[
					heading,
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 0),
							$mdgriffith$elm_ui$Element$centerX,
							bgColorAttr
						]),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'',
						count,
						acc,
						_Utils_update(
							settings,
							{uE: settings.uE - 180}),
						A2(
							$elm$core$List$cons,
							style,
							A2($elm$core$List$cons, bgColorAttr, attr)),
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Container$collection = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$Constants$defaultIndentWidth = 12;
var $author$project$Render$Helper$features = F2(
	function (settings, block) {
		var italicStyle = function () {
			var _v6 = A2($elm$core$Dict$get, 'style', block.sS);
			if ((!_v6.$) && (_v6.a === 'italic')) {
				return $mdgriffith$elm_ui$Element$Font$italic;
			} else {
				return $mdgriffith$elm_ui$Element$Font$unitalicized;
			}
		}();
		var indentation = function () {
			var _v4 = $elm$core$List$head(block.lv);
			if (_v4.$ === 1) {
				return $author$project$Render$Constants$defaultIndentWidth;
			} else {
				var str = _v4.a;
				var _v5 = $elm$core$String$toInt(str);
				if (!_v5.$) {
					var w = _v5.a;
					return w;
				} else {
					return $author$project$Render$Constants$defaultIndentWidth;
				}
			}
		}();
		var colorValue = function () {
			var _v3 = A2($elm$core$Dict$get, 'color', block.sS);
			_v3$3:
			while (true) {
				if (!_v3.$) {
					switch (_v3.a) {
						case 'red':
							return A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0);
						case 'blue':
							return A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
						case 'gray':
							return A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5);
						default:
							break _v3$3;
					}
				} else {
					break _v3$3;
				}
			}
			return A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0);
		}();
		var titleElement = function () {
			var _v2 = A2($elm$core$Dict$get, 'title', block.sS);
			if (!_v2.$) {
				var title_ = _v2.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 4, jG: indentation, kC: 0, k2: 0}),
							$mdgriffith$elm_ui$Element$Font$color(colorValue),
							$mdgriffith$elm_ui$Element$Font$semiBold
						]),
					$mdgriffith$elm_ui$Element$text(title_));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var bodyWidth = settings.uE - indentation;
		var authorElement = function () {
			var _v1 = A2($elm$core$Dict$get, 'author', block.sS);
			if (!_v1.$) {
				var author_ = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 4, jG: 0, kC: 0, k2: 0}),
							$mdgriffith$elm_ui$Element$Font$color(colorValue)
						]),
					$mdgriffith$elm_ui$Element$text('(' + (author_ + ')')));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var author = function () {
			var _v0 = A2($elm$core$Dict$get, 'author', block.sS);
			if (!_v0.$) {
				var a = _v0.a;
				return a;
			} else {
				return '';
			}
		}();
		return {p4: authorElement, lG: bodyWidth, qG: colorValue, mX: indentation, rS: italicStyle, ue: titleElement};
	});
var $author$project$Render$Blocks$Container$comment = F5(
	function (count, acc, settings, attr, block) {
		var feature = A2($author$project$Render$Helper$features, settings, block);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(feature.lG)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: feature.mX, kC: 0, k2: 0})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					_List_fromArray(
						[feature.ue, feature.p4])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						feature.rS,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$Font$color(feature.qG),
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$paddingEach(
										{iG: 0, jG: feature.mX, kC: 0, k2: 0})
									]),
								A2($author$project$Render$Sync$attributes, settings, block)))),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'indent',
						count,
						acc,
						_Utils_update(
							settings,
							{uE: feature.lG}),
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Container$renderWithDefault2 = F6(
	function (_v0, count, acc, settings, attr, exprs) {
		return A2(
			$elm$core$List$map,
			A4($author$project$Render$Expression$render, count, acc, settings, attr),
			exprs);
	});
var $author$project$Render$Blocks$Container$env = F5(
	function (count, acc, settings, attr, block) {
		var _v0 = block.qh;
		if (!_v0.$) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var exprs = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$spacing(8),
					A2(
						$elm$core$List$cons,
						$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR),
						A2($author$project$Render$Sync$attributes, settings, block))),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$bold]),
								$mdgriffith$elm_ui$Element$text(
									$author$project$Render$Blocks$Container$blockHeading(block))),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(
									A2($elm$core$String$join, ' ', block.lv)))
							])),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						A6(
							$author$project$Render$Blocks$Container$renderWithDefault2,
							'??' + A2(
								$elm$core$Maybe$withDefault,
								'(name)',
								$author$project$Generic$Language$getNameFromHeading(block.fC)),
							count,
							acc,
							settings,
							attr,
							exprs))
					]));
		}
	});
var $author$project$Render$Blocks$Container$env_ = F5(
	function (count, acc, settings, attr, block) {
		var _v0 = $elm$core$List$head(block.lv);
		if (_v0.$ === 1) {
			return A5($author$project$Render$Blocks$Container$env, count, acc, settings, attr, block);
		} else {
			return A5($author$project$Render$Blocks$Container$env, count, acc, settings, attr, block);
		}
	});
var $author$project$Render$Blocks$Container$renderLabel = function (settings) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px($author$project$Render$Constants$defaultIndentWidth)),
				$author$project$Render$Utility$leftPadding(settings.no + 12),
				$mdgriffith$elm_ui$Element$Font$color(
				A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.o5;
					},
					settings.h7))
			]),
		$mdgriffith$elm_ui$Element$text(
			$elm$core$String$fromChar('•')));
};
var $author$project$Render$Blocks$Container$itemList = F5(
	function (count, acc, settings, attr, block) {
		var renderItem = F2(
			function (settings_, expr) {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE - $author$project$Render$Constants$defaultIndentWidth))
						]),
					_List_fromArray(
						[
							$author$project$Render$Blocks$Container$renderLabel(settings),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							A2($author$project$Render$Sync$attributes, settings_, block),
							A2(
								$elm$core$List$cons,
								A5($author$project$Render$Expression$render, count, acc, settings, _List_Nil, expr),
								_List_Nil))
						]));
			});
		var listOfExprList = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				return _List_Nil;
			} else {
				var list = _v0.a;
				return list;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$spacing(2),
				A2($author$project$Render$Sync$attributes, settings, block)),
			A2(
				$elm$core$List$map,
				renderItem(settings),
				listOfExprList));
	});
var $author$project$Render$Blocks$Container$renderNumberedLabel = F2(
	function (settings, k) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(14),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px($author$project$Render$Constants$defaultIndentWidth)),
					$author$project$Render$Utility$leftPadding(settings.no + 12),
					$mdgriffith$elm_ui$Element$Font$color(
					A2(
						$author$project$Render$Settings$getThemedElementColor,
						function ($) {
							return $.o5;
						},
						settings.h7))
				]),
			$mdgriffith$elm_ui$Element$text(
				$elm$core$String$fromInt(k + 1) + '.'));
	});
var $author$project$Render$Blocks$Container$numberedList = F5(
	function (count, acc, settings, attr, block) {
		var renderNumberedItem = F2(
			function (k, expr) {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE - $author$project$Render$Constants$defaultIndentWidth))
						]),
					_List_fromArray(
						[
							A2($author$project$Render$Blocks$Container$renderNumberedLabel, settings, k),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							A2($author$project$Render$Sync$attributes, settings, block),
							A2(
								$elm$core$List$cons,
								A5($author$project$Render$Expression$render, 0, acc, settings, _List_Nil, expr),
								_List_Nil))
						]));
			});
		var listOfExprList = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				return _List_Nil;
			} else {
				var list = _v0.a;
				return list;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$spacing(2),
				A2($author$project$Render$Sync$attributes, settings, block)),
			A2($elm$core$List$indexedMap, renderNumberedItem, listOfExprList));
	});
var $author$project$Render$Blocks$Container$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('box', $author$project$Render$Blocks$Container$box),
				_Utils_Tuple2('itemList', $author$project$Render$Blocks$Container$itemList),
				_Utils_Tuple2('numberedList', $author$project$Render$Blocks$Container$numberedList),
				_Utils_Tuple2('comment', $author$project$Render$Blocks$Container$comment),
				_Utils_Tuple2('collection', $author$project$Render$Blocks$Container$collection),
				_Utils_Tuple2('bibitem', $author$project$Render$Blocks$Container$bibitem),
				_Utils_Tuple2('env', $author$project$Render$Blocks$Container$env_)
			]),
		registry);
};
var $author$project$Render$Helper$fontColor = F3(
	function (selectedId, selectedSlug, docId) {
		return _Utils_eq(selectedId, docId) ? $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0)) : (_Utils_eq(
			selectedSlug,
			$elm$core$Maybe$Just(docId)) ? $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0)) : $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.9)));
	});
var $author$project$ScriptaV2$Msg$GetPublicDocument = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$Render$Blocks$Document$ilink = F4(
	function (docTitle, selectedId, selecteSlug, docId) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_Nil,
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$size(14),
							A3($author$project$Render$Helper$fontColor, selectedId, selecteSlug, docId)
						]),
					$mdgriffith$elm_ui$Element$text(docTitle)),
				ka: $elm$core$Maybe$Just(
					A2($author$project$ScriptaV2$Msg$GetPublicDocument, 0, docId))
			});
	});
var $author$project$Tools$Utility$truncateString_ = F2(
	function (k, str) {
		if (_Utils_cmp(
			$elm$core$String$length(str),
			k) < 0) {
			return str;
		} else {
			var words = $elm$core$String$words(str);
			var n = $elm$core$List$length(words);
			return A2(
				$author$project$Tools$Utility$truncateString_,
				k,
				A2(
					$elm$core$String$join,
					' ',
					A2($elm$core$List$take, n - 1, words)));
		}
	});
var $author$project$Tools$Utility$truncateString = F2(
	function (k, str) {
		var str2 = A2($author$project$Tools$Utility$truncateString_, k, str);
		return _Utils_eq(str, str2) ? str : (str2 + ' ...');
	});
var $author$project$Render$Blocks$Document$document = F5(
	function (_v0, _v1, settings, attrs, block) {
		var title_ = A2(
			$author$project$Tools$Utility$truncateString,
			35,
			A2(
				$elm$core$String$join,
				' ',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2(
						$elm$core$List$map,
						$author$project$Generic$ASTTools$getText,
						$author$project$Generic$Language$getExpressionContent(block)))));
		var sectionNumber = function () {
			var _v4 = A2($elm$core$Dict$get, 'label', block.sS);
			if (!_v4.$) {
				switch (_v4.a) {
					case '-':
						return '- ';
					case '':
						return '';
					default:
						var s = _v4.a;
						return s + '. ';
				}
			} else {
				return '- ';
			}
		}();
		var level = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$String$toInt(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2($elm_community$list_extra$List$Extra$getAt, 1, block.lv))));
		var docId = function () {
			var _v2 = $elm$core$List$head(block.lv);
			if (!_v2.$) {
				var idx = _v2.a;
				return idx;
			} else {
				var _v3 = A2($elm$core$Dict$get, 'docId', block.sS);
				if (!_v3.$) {
					var ident = _v3.a;
					return ident;
				} else {
					return '(noId)';
				}
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					A2($author$project$Render$Utility$elementAttribute, 'id', settings.kL),
					A2($author$project$Render$Utility$vspace, 0, settings.us),
					$mdgriffith$elm_ui$Element$moveRight(15 * (level - 1)),
					A3($author$project$Render$Helper$fontColor, settings.kL, settings.tm, docId)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(30))
						]),
					$mdgriffith$elm_ui$Element$text(sectionNumber)),
					A4($author$project$Render$Blocks$Document$ilink, title_, settings.kL, settings.tm, docId)
				]));
	});
var $author$project$Render$Helper$blockLabel = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'label', properties));
};
var $author$project$Render$Blocks$Document$renderWithDefaultWithSize = F7(
	function (size, _default, count, acc, settings, attr, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(settings.sY),
							$mdgriffith$elm_ui$Element$Font$size(size)
						]),
					attr),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A4($author$project$Render$Expression$render, count, acc, settings, attr),
			exprs);
	});
var $author$project$Render$Sync$highlightIfIdIsSelected = F3(
	function (firstLineNumber, numberOfLines, settings) {
		return _Utils_eq(
			$elm$core$String$fromInt(firstLineNumber),
			settings.kL) ? _List_fromArray(
			[
				A2($author$project$Render$Sync$rightToLeftSyncHelper, firstLineNumber, firstLineNumber + numberOfLines),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 1.0))
			]) : _List_Nil;
	});
var $author$project$Generic$ASTTools$stringValue = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return str;
		case 1:
			var textList = expr.b;
			return A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$map, $author$project$Generic$ASTTools$stringValue, textList));
		case 2:
			var str = expr.b;
			return str;
		default:
			return '[ExprList]';
	}
};
var $author$project$Generic$ASTTools$stringValueOfList = function (textList) {
	return A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$map, $author$project$Generic$ASTTools$stringValue, textList));
};
var $author$project$Render$Utility$makeId = function (exprs) {
	return A2(
		$author$project$Render$Utility$elementAttribute,
		'id',
		$author$project$Render$Utility$makeSlug(
			$elm$core$String$trim(
				$author$project$Generic$ASTTools$stringValueOfList(exprs))));
};
var $author$project$Render$Blocks$Document$sectionBlockAttributes = F3(
	function (block, settings, attrs) {
		return _Utils_ap(
			_List_fromArray(
				[
					$author$project$Render$Utility$makeId(
					$author$project$Generic$Language$getExpressionContent(block)),
					$author$project$Render$Utility$idAttribute(block.nJ.hg)
				]),
			_Utils_ap(
				A3($author$project$Render$Sync$highlightIfIdIsSelected, block.nJ.jR, block.nJ.n_, settings),
				attrs));
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Render$Blocks$Document$topPadding = function (k) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{iG: 0, jG: 0, kC: 0, k2: k});
};
var $author$project$Render$Blocks$Document$section = F5(
	function (count, acc, settings, attr, block) {
		var maxNumberedLevel = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toFloat,
				A2($elm$core$Dict$get, 'number-to-level', settings.sS)));
		var headingLevel = function () {
			var _v0 = A2($elm$core$Dict$get, 'level', block.sS);
			if (_v0.$ === 1) {
				return 2;
			} else {
				var n = _v0.a;
				return A2(
					$elm$core$Maybe$withDefault,
					3,
					$elm$core$String$toFloat(n));
			}
		}();
		var fontSize = $elm$core$Basics$round(
			1.2 * (settings.nD / $elm$core$Basics$sqrt(headingLevel)));
		var sectionNumber = (_Utils_cmp(headingLevel, maxNumberedLevel) < 1) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(fontSize)
				]),
			$mdgriffith$elm_ui$Element$text(
				$author$project$Render$Helper$blockLabel(block.sS) + '. ')) : $mdgriffith$elm_ui$Element$none;
		var exprs = $author$project$Generic$Language$getExpressionContent(block);
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				A3(
					$author$project$Render$Blocks$Document$sectionBlockAttributes,
					block,
					settings,
					_List_fromArray(
						[
							$author$project$Render$Blocks$Document$topPadding(20),
							$mdgriffith$elm_ui$Element$Font$size(fontSize)
						])),
				A2($author$project$Render$Sync$attributes, settings, block)),
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A2(
						$elm$core$List$cons,
						sectionNumber,
						A7($author$project$Render$Blocks$Document$renderWithDefaultWithSize, 18, '--', count, acc, settings, attr, exprs))),
				uz: $author$project$Render$Utility$internalLink(settings.k1 + 'title')
			});
	});
var $author$project$Render$Sync2$sync = F3(
	function (block, settings, attrs) {
		return A3(
			$author$project$Render$Sync$highlightIfIdSelected,
			block.nJ.hg,
			settings,
			A2(
				$elm$core$List$cons,
				$author$project$Render$Helper$htmlId(block.nJ.hg),
				attrs));
	});
var $author$project$Render$Blocks$Document$subheading = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A3(
					$author$project$Render$Blocks$Document$sectionBlockAttributes,
					block,
					settings,
					_Utils_ap(
						_List_fromArray(
							[
								$author$project$Render$Blocks$Document$topPadding(10),
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						attr))),
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2($author$project$Render$Sync$attributes, settings, block),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| subheading',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block))),
				uz: $author$project$Render$Utility$internalLink(settings.k1 + 'title')
			});
	});
var $author$project$Render$Blocks$Document$unnumberedSection = F5(
	function (count, acc, settings, attr, block) {
		var headingLevel = function () {
			var _v0 = A2($elm$core$Dict$get, 'level', block.sS);
			if (_v0.$ === 1) {
				return 2;
			} else {
				var n = _v0.a;
				return A2(
					$elm$core$Maybe$withDefault,
					3,
					$elm$core$String$toFloat(n));
			}
		}();
		var fontSize = $elm$core$Basics$round(
			1.2 * (settings.nD / $elm$core$Basics$sqrt(headingLevel)));
		var exprs = $author$project$Generic$Language$getExpressionContent(block);
		return A2(
			$mdgriffith$elm_ui$Element$link,
			A3(
				$author$project$Render$Blocks$Document$sectionBlockAttributes,
				block,
				settings,
				_List_fromArray(
					[
						$author$project$Render$Blocks$Document$topPadding(20),
						$mdgriffith$elm_ui$Element$Font$size(fontSize)
					])),
			{
				fI: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2($author$project$Render$Sync$attributes, settings, block),
					A7($author$project$Render$Blocks$Document$renderWithDefaultWithSize, 18, '--', count, acc, settings, attr, exprs)),
				uz: $author$project$Render$Utility$internalLink(settings.k1 + 'title')
			});
	});
var $author$project$Render$Blocks$Document$visibleBanner = F5(
	function (count, acc, settings, attr, block) {
		var fontSize = 12;
		var exprs = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				return _List_Nil;
			} else {
				var exprs_ = _v0.a;
				return exprs_;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(fontSize),
						A2($author$project$Render$Utility$elementAttribute, 'id', 'banner')
					]),
				A2($author$project$Render$Sync$attributes, settings, block)),
			A7($author$project$Render$Blocks$Document$renderWithDefaultWithSize, fontSize, '??!!(2)', count, acc, settings, attr, exprs));
	});
var $author$project$Render$Blocks$Document$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('document', $author$project$Render$Blocks$Document$document),
				_Utils_Tuple2('section', $author$project$Render$Blocks$Document$section),
				_Utils_Tuple2('section*', $author$project$Render$Blocks$Document$unnumberedSection),
				_Utils_Tuple2('subheading', $author$project$Render$Blocks$Document$subheading),
				_Utils_Tuple2('sh', $author$project$Render$Blocks$Document$subheading),
				_Utils_Tuple2('visibleBanner', $author$project$Render$Blocks$Document$visibleBanner),
				_Utils_Tuple2(
				'runninghead_',
				F5(
					function (_v0, _v1, _v2, _v3, _v4) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'banner',
				F5(
					function (_v5, _v6, _v7, _v8, _v9) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'subtitle',
				F5(
					function (_v10, _v11, _v12, _v13, _v14) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'author',
				F5(
					function (_v15, _v16, _v17, _v18, _v19) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'date',
				F5(
					function (_v20, _v21, _v22, _v23, _v24) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'contents',
				F5(
					function (_v25, _v26, _v27, _v28, _v29) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'tags',
				F5(
					function (_v30, _v31, _v32, _v33, _v34) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'type',
				F5(
					function (_v35, _v36, _v37, _v38, _v39) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'setcounter',
				F5(
					function (_v40, _v41, _v42, _v43, _v44) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'shiftandsetcounter',
				F5(
					function (_v45, _v46, _v47, _v48, _v49) {
						return $mdgriffith$elm_ui$Element$none;
					}))
			]),
		registry);
};
var $author$project$ScriptaV2$Msg$ProposeSolution = function (a) {
	return {$: 8, a: a};
};
var $author$project$ScriptaV2$Msg$Solved = function (a) {
	return {$: 1, a: a};
};
var $author$project$ScriptaV2$Msg$Unsolved = {$: 0};
var $author$project$Render$Color$blue = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $author$project$Render$Blocks$Interactive$answer = F5(
	function (count, acc, settings, attrs, block) {
		var title_ = A2($elm$core$String$join, ' ', block.lv);
		var clicker = _Utils_eq(settings.kL, block.nJ.hg) ? $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution($author$project$ScriptaV2$Msg$Unsolved)) : $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution(
				$author$project$ScriptaV2$Msg$Solved(block.nJ.hg)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(12),
						$mdgriffith$elm_ui$Element$paddingEach(
						{iG: 24, jG: 0, kC: 0, k2: 0})
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							clicker
						]),
					$mdgriffith$elm_ui$Element$text(title_)),
					_Utils_eq(settings.kL, block.nJ.hg) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$ProposeSolution($author$project$ScriptaV2$Msg$Unsolved))
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR),
									A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8)
								]),
							A2($author$project$Render$Sync$attributes, settings, block)),
						A6(
							$author$project$Render$Helper$renderWithDefault,
							'...',
							count,
							acc,
							settings,
							attrs,
							$author$project$Generic$Language$getExpressionContent(block)))) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$ScriptaV2$Msg$HighlightId = function (a) {
	return {$: 4, a: a};
};
var $author$project$Render$Helper$getLabel = function (dict) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'label', dict));
};
var $author$project$Render$Blocks$Interactive$question = F5(
	function (count, acc, settings, attrs, block) {
		var title_ = A2($elm$core$String$join, ' ', block.lv);
		var qId = A2(
			$elm$core$Maybe$withDefault,
			block.nJ.hg,
			A2($elm$core$Dict$get, block.nJ.hg, acc.hJ));
		var label = ' ' + $author$project$Render$Helper$getLabel(block.sS);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(12)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$HighlightId(qId))
						]),
					$mdgriffith$elm_ui$Element$text(title_ + (' ' + label))),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$ScriptaV2$Msg$HighlightId(qId)),
								$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR)
							]),
						A2($author$project$Render$Sync$attributes, settings, block)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'...',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Interactive$reveal = F5(
	function (count, acc, settings, attrs, block) {
		var preTitle = A2($elm$core$String$join, ' ', block.lv);
		var title_ = (preTitle === 'more') ? ((!_Utils_eq(settings.kL, block.nJ.hg)) ? '(More ...)' : '(Less ...)') : (preTitle + ' ...');
		var label = ' ' + $author$project$Render$Helper$getLabel(block.sS);
		var clicker = _Utils_eq(settings.kL, block.nJ.hg) ? $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution($author$project$ScriptaV2$Msg$Unsolved)) : $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution(
				$author$project$ScriptaV2$Msg$Solved(block.nJ.hg)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(6)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							clicker
						]),
					$mdgriffith$elm_ui$Element$text(title_ + (' ' + label))),
					_Utils_eq(settings.kL, block.nJ.hg) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						A3(
							$author$project$Render$Sync2$sync,
							block,
							settings,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 1.0)),
									A2($mdgriffith$elm_ui$Element$paddingXY, 18, 8)
								])),
						A6(
							$author$project$Render$Helper$renderWithDefault,
							'...',
							count,
							acc,
							settings,
							attrs,
							$author$project$Generic$Language$getExpressionContent(block)))) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$Render$Blocks$Interactive$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('q', $author$project$Render$Blocks$Interactive$question),
				_Utils_Tuple2('a', $author$project$Render$Blocks$Interactive$answer),
				_Utils_Tuple2('reveal', $author$project$Render$Blocks$Interactive$reveal)
			]),
		registry);
};
var $author$project$Render$Helper$renderWithDefaultNarrow = F6(
	function (_default, count, acc, settings, attr, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(settings.sY),
						$mdgriffith$elm_ui$Element$Font$size(14)
					]),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A4(
				$author$project$Render$Expression$render,
				count,
				acc,
				_Utils_update(
					settings,
					{sK: 0}),
				attr),
			exprs);
	});
var $author$project$Render$Blocks$Text$blue = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE - 0)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefaultNarrow,
					'blue',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$centered = F5(
	function (count, acc, settings, attr, block) {
		var feature = A2($author$project$Render$Helper$features, settings, block);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(feature.lG)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: feature.mX, kC: 0, k2: 0})
				]),
			_List_fromArray(
				[
					feature.ue,
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						feature.rS,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$Font$color(feature.qG),
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(settings.uE - (2 * feature.mX)))
									]),
								A2($author$project$Render$Sync$attributes, settings, block)))),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'centered',
						count,
						acc,
						_Utils_update(
							settings,
							{uE: feature.lG}),
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Text$compact = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(0),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE - 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefaultNarrow,
					'compact',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$identity = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(0),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE - 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefault,
					'identity',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$indented = F5(
	function (count, acc, settings, attr, block) {
		var feature = A2($author$project$Render$Helper$features, settings, block);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(feature.lG)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: feature.mX, kC: 0, k2: 0})
				]),
			_List_fromArray(
				[
					feature.ue,
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						feature.rS,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$Font$color(feature.qG),
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$paddingEach(
										{iG: 0, jG: feature.mX, kC: 0, k2: 0})
									]),
								A2($author$project$Render$Sync$attributes, settings, block)))),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'indent',
						count,
						acc,
						_Utils_update(
							settings,
							{uE: feature.lG}),
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Helper$blockAttributes = F3(
	function (settings, block, attrs) {
		return _Utils_ap(
			_List_fromArray(
				[
					$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR)
				]),
			_Utils_ap(
				A2($author$project$Render$Sync$attributes, settings, block),
				attrs));
	});
var $author$project$Render$Helper$noteFromPropertyKey = F3(
	function (key, attrs, block) {
		var _v0 = A2($elm$core$Dict$get, key, block.sS);
		if (_v0.$ === 1) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var note_ = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				attrs,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(note_)
					]));
		}
	});
var $author$project$Render$Blocks$Text$quotation = F5(
	function (count, acc, settings, attrs, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE - (2 * 24)))
					]),
				A2($author$project$Render$Sync$attributes, settings, block)),
			_List_fromArray(
				[
					A3(
					$author$project$Render$Helper$noteFromPropertyKey,
					'title',
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					block),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A3($author$project$Render$Helper$blockAttributes, settings, block, _List_Nil)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'quotation',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Text$red = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE - 0)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefaultNarrow,
					'red',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$red2 = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE))
					])),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{iG: 0, jG: 12, kC: 0, k2: 0}),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefault,
					'red2',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('indent', $author$project$Render$Blocks$Text$indented),
				_Utils_Tuple2('center', $author$project$Render$Blocks$Text$centered),
				_Utils_Tuple2('compact', $author$project$Render$Blocks$Text$compact),
				_Utils_Tuple2('identity', $author$project$Render$Blocks$Text$identity),
				_Utils_Tuple2('red', $author$project$Render$Blocks$Text$red),
				_Utils_Tuple2('red2', $author$project$Render$Blocks$Text$red2),
				_Utils_Tuple2('blue', $author$project$Render$Blocks$Text$blue),
				_Utils_Tuple2('quotation', $author$project$Render$Blocks$Text$quotation)
			]),
		registry);
};
var $author$project$Render$Table$formatDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('l', $mdgriffith$elm_ui$Element$alignLeft),
			_Utils_Tuple2('r', $mdgriffith$elm_ui$Element$alignRight),
			_Utils_Tuple2('c', $mdgriffith$elm_ui$Element$centerX)
		]));
var $author$project$Render$Table$renderCell = F5(
	function (count, acc, settings, _v0, cell) {
		var colWidth = _v0.a;
		var fmt = _v0.b;
		if ((cell.$ === 1) && (cell.a === 'cell')) {
			var exprs = cell.b;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(colWidth + 10))
					]),
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[fmt]),
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Expression$render, count, acc, settings, _List_Nil),
						exprs)));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Table$renderRow = F5(
	function (count, acc, settings, columnFormats, row) {
		if ((row.$ === 1) && (row.a === 'row')) {
			var cells = row.b;
			var list = A3(
				$elm$core$List$map2,
				A3($author$project$Render$Table$renderCell, count, acc, settings),
				columnFormats,
				cells);
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(20)),
						$mdgriffith$elm_ui$Element$spacing(12)
					]),
				list);
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Table$render = F5(
	function (count, acc, settings, columnFormats, block) {
		var _v0 = block.qh;
		if (_v0.$ === 1) {
			if (((_v0.a.b && (_v0.a.a.$ === 1)) && (_v0.a.a.a === 'table')) && (!_v0.a.b.b)) {
				var _v1 = _v0.a;
				var _v2 = _v1.a;
				var rows = _v2.b;
				var formatList_ = A2(
					$elm$core$List$map,
					function (c) {
						return A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$centerX,
							A2(
								$elm$core$Dict$get,
								$elm$core$String$trim(c),
								$author$project$Render$Table$formatDict));
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2(
							$elm$core$String$split,
							' ',
							$elm$core$String$trim(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2($elm$core$Dict$get, 'format', block.sS))))));
				var columnWidths_ = A2(
					$elm$core$List$map,
					function (c) {
						return A2(
							$elm$core$Maybe$withDefault,
							100,
							$elm$core$String$toInt(c));
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2(
							$elm$core$String$split,
							',',
							A2(
								$elm$core$String$dropRight,
								1,
								A2(
									$elm$core$String$dropLeft,
									1,
									A2(
										$elm$core$Maybe$withDefault,
										'',
										A2($elm$core$Dict$get, 'columnWidths', block.sS)))))));
				var formats = A3(
					$elm$core$List$map2,
					F2(
						function (x, y) {
							return _Utils_Tuple2(x, y);
						}),
					columnWidths_,
					formatList_);
				return A2(
					$mdgriffith$elm_ui$Element$column,
					A3(
						$author$project$Render$Sync2$sync,
						block,
						settings,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								{iG: 24, jG: 24, kC: 0, k2: 24}),
								$mdgriffith$elm_ui$Element$spacing(0)
							])),
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Table$renderRow, count, acc, settings, formats),
						rows));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		} else {
			var data = _v0.a;
			return $mdgriffith$elm_ui$Element$text(data);
		}
	});
var $author$project$Render$OrdinaryBlock$initRegistry = A2(
	$author$project$Render$BlockRegistry$registerBatch,
	_List_fromArray(
		[
			_Utils_Tuple2('table', $author$project$Render$Table$render),
			_Utils_Tuple2('item', $author$project$Render$List$item),
			_Utils_Tuple2('desc', $author$project$Render$List$desc),
			_Utils_Tuple2('numbered', $author$project$Render$List$numbered),
			_Utils_Tuple2('index', $author$project$Render$Footnote$index),
			_Utils_Tuple2('endnotes', $author$project$Render$Footnote$endnotes)
		]),
	$author$project$Render$Blocks$Interactive$registerRenderers(
		$author$project$Render$Blocks$Document$registerRenderers(
			$author$project$Render$Blocks$Container$registerRenderers(
				$author$project$Render$Blocks$Text$registerRenderers($author$project$Render$BlockRegistry$empty)))));
var $author$project$Render$BlockRegistry$lookup = $elm$core$Dict$get;
var $author$project$Render$OrdinaryBlock$render = F5(
	function (count, acc, settings, attr, block) {
		var registry = $author$project$Render$OrdinaryBlock$initRegistry;
		var _v0 = block.qh;
		if (!_v0.$) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var _v1 = block.fC;
			if (_v1.$ === 1) {
				var functionName = _v1.a;
				var renderedBlock = function () {
					var _v2 = A2($author$project$Render$BlockRegistry$lookup, functionName, registry);
					if (_v2.$ === 1) {
						var envRenderer = A2(
							$elm$core$Maybe$withDefault,
							F5(
								function (_v3, _v4, _v5, _v6, _v7) {
									return $mdgriffith$elm_ui$Element$none;
								}),
							A2($author$project$Render$BlockRegistry$lookup, 'env', registry));
						return A5(envRenderer, count, acc, settings, attr, block);
					} else {
						var renderer = _v2.a;
						var blockType = $author$project$Render$BlockType$fromString(functionName);
						var newSettings = function () {
							_v8$2:
							while (true) {
								if (blockType.$ === 4) {
									switch (blockType.a) {
										case 0:
											var _v9 = blockType.a;
											return _Utils_update(
												settings,
												{uE: settings.uE - (6 * block.hh)});
										case 1:
											var _v10 = blockType.a;
											return _Utils_update(
												settings,
												{uE: settings.uE - (6 * block.hh)});
										default:
											break _v8$2;
									}
								} else {
									break _v8$2;
								}
							}
							return settings;
						}();
						return A5(renderer, count, acc, newSettings, attr, block);
					}
				}();
				return A4(
					$author$project$Render$OrdinaryBlock$indentOrdinaryBlock,
					block.hh,
					$elm$core$String$fromInt(block.nJ.jR),
					settings,
					renderedBlock);
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}
	});
var $author$project$Render$Helper$noSuchVerbatimBlock = F2(
	function (functionName, content) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(4)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 180, 0, 0))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('No such block (V): ' + functionName)
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4)
						]),
					A2(
						$elm$core$List$map,
						function (t) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(t));
						},
						$elm$core$String$lines(content)))
				]));
	});
var $author$project$Render$Math$DisplayMathMode = 1;
var $author$project$Render$Math$equationLabel = function (properties) {
	var labelText = '(' + (A2(
		$elm$core$Maybe$withDefault,
		'-',
		A2($elm$core$Dict$get, 'equation-number', properties)) + ')');
	var label_ = A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(12)
			]),
		$mdgriffith$elm_ui$Element$text(labelText));
	return label_;
};
var $author$project$Render$Sync$selectedColor = A4($mdgriffith$elm_ui$Element$rgba, 0.1, 0.1, 0.8, 0.5);
var $author$project$Render$Sync$highlighter = F2(
	function (args, attrs) {
		return A2($elm$core$List$member, 'highlight', args) ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Sync$selectedColor),
			attrs) : attrs;
	});
var $author$project$Render$Math$highlightMath = F2(
	function (settings, block) {
		return A3(
			$author$project$Render$Sync$highlightIfIdSelected,
			block.nJ.hg,
			settings,
			A2($author$project$Render$Sync$highlighter, block.lv, _List_Nil));
	});
var $author$project$Render$Math$aligned = F5(
	function (count, acc, settings, attrs, block) {
		var str = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				var str_ = _v0.a;
				return str_;
			} else {
				return '';
			}
		}();
		var label = $author$project$Render$Math$equationLabel(block.sS);
		var filteredLines = A2(
			$elm$core$List$filter,
			function (line) {
				return (!(A2($elm$core$String$left, 6, line) === '\\label')) && (!(line === ''));
			},
			$elm$core$String$lines(str));
		var deleteTrailingSlashes = function (inputString) {
			var str_ = $elm$core$String$trim(inputString);
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var adjustedLines_ = A2(
			$elm$core$List$filter,
			function (line) {
				return $elm$core$String$trim(line) !== '';
			},
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					deleteTrailingSlashes,
					$author$project$ETeX$Transform$evalStr(acc.jS)),
				filteredLines));
		var innerContent = A2($elm$core$String$join, '\\\\\n', adjustedLines_);
		var content = '\\begin{aligned}\n' + (innerContent + '\n\\end{aligned}');
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE))
					]),
				_Utils_ap(
					attrs,
					A2($author$project$Render$Sync$attributes, settings, block))),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Render$Math$highlightMath, settings, block)),
							A6(
								$author$project$Render$Math$mathText,
								$author$project$Render$ThemeHelpers$themeAsStringFromSettings(settings),
								count,
								str,
								block.nJ.hg,
								1,
								content))
						]))
				]));
	});
var $author$project$Render$Math$array = F5(
	function (count, acc, settings, attrs, block) {
		var str = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				var str_ = _v0.a;
				return str_;
			} else {
				return '';
			}
		}();
		var label = $author$project$Render$Math$equationLabel(block.sS);
		var format = A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(block.lv));
		var filteredLines = A2(
			$elm$core$List$filter,
			function (line) {
				return (!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === ''));
			},
			$elm$core$String$lines(str));
		var deleteTrailingSlashes = function (inputString) {
			var str_ = $elm$core$String$trim(inputString);
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var adjustedLines_ = A2(
			$elm$core$List$filter,
			function (line) {
				return line !== '';
			},
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					deleteTrailingSlashes,
					$author$project$ETeX$Transform$evalStr(acc.jS)),
				filteredLines));
		var innerContent = A2($elm$core$String$join, '\\\\\n', adjustedLines_);
		var content = '\\begin{array}{' + (format + ('}\n' + (innerContent + '\n\\end{array}')));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE)),
						A2($author$project$Render$Sync$attributes, settings, block)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Render$Sync$attributes, settings, block)),
							A6(
								$author$project$Render$Math$mathText,
								$author$project$Render$ThemeHelpers$themeAsStringFromSettings(settings),
								count,
								str,
								block.nJ.hg,
								1,
								content))
						]))
				]));
	});
var $author$project$Render$Math$getContent = function (_v0) {
	var body = _v0.qh;
	if (!body.$) {
		var str = body.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Math$displayedMath = F5(
	function (count, acc, settings, attrs_, block) {
		var w = $elm$core$String$fromInt(settings.uE) + 'px';
		var filteredLines = A2(
			$elm$core$List$map,
			$author$project$ETeX$Transform$evalStr(acc.jS),
			A2(
				$elm$core$List$filter,
				function (line) {
					return line !== '';
				},
				A2(
					$elm$core$List$filter,
					function (line) {
						return !(A2($elm$core$String$left, 6, line) === '[label');
					},
					A2(
						$elm$core$List$filter,
						function (line) {
							return !(A2(
								$elm$core$String$left,
								2,
								$elm$core$String$trim(line)) === '$$');
						},
						$elm$core$String$lines(
							$author$project$Render$Math$getContent(block))))));
		var attrs = A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(settings.uE)),
			attrs_);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			attrs,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$author$project$Render$Sync$highlighter,
						block.lv,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX])),
					A6(
						$author$project$Render$Math$mathText,
						$author$project$Render$ThemeHelpers$themeAsStringFromSettings(settings),
						count,
						w,
						block.nJ.hg,
						1,
						A2($elm$core$String$join, '\n', filteredLines)))
				]));
	});
var $author$project$Render$Math$chem = F5(
	function (count, acc, settings, attrs_, block) {
		var newBlock = function () {
			var _v0 = block.qh;
			if (!_v0.$) {
				var s = _v0.a;
				return _Utils_update(
					block,
					{
						qh: $toastal$either$Either$Left('\\ce{' + (s + '}'))
					});
			} else {
				return block;
			}
		}();
		return A5($author$project$Render$Math$displayedMath, count, acc, settings, attrs_, newBlock);
	});
var $elm$core$String$trimRight = _String_trimRight;
var $author$project$Render$Math$equation = F5(
	function (count, acc, settings, attrs, block) {
		var isNumbered = A2($elm$core$List$member, 'numbered', block.lv);
		var label = isNumbered ? $author$project$Render$Math$equationLabel(block.sS) : $mdgriffith$elm_ui$Element$none;
		var labelWidth = isNumbered ? 60 : 0;
		var filteredLines = A2(
			$elm$core$List$map,
			$author$project$ETeX$Transform$evalStr(acc.jS),
			A2(
				$elm$core$List$filter,
				function (line) {
					return (!(A2($elm$core$String$left, 2, line) === '$$')) && ((!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === 'end')));
				},
				A2(
					$elm$core$List$map,
					$elm$core$String$trimRight,
					$elm$core$String$lines(
						$author$project$Render$Math$getContent(block)))));
		var evalMacro = function (line) {
			return (A2($elm$core$String$right, 2, line) === '\\\\') ? function (str) {
				return str + '\\\\';
			}(
				A2(
					$author$project$ETeX$Transform$evalStr,
					acc.jS,
					A2($elm$core$String$dropRight, 2, line))) : A2($author$project$ETeX$Transform$evalStr, acc.jS, line);
		};
		var contentWidth = settings.uE - labelWidth;
		var content = A2($elm$core$String$join, '\n', filteredLines);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(contentWidth))
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$moveRight(labelWidth / 2)
							]),
						A6(
							$author$project$Render$Math$mathText,
							$author$project$Render$ThemeHelpers$themeAsStringFromSettings(settings),
							count,
							$elm$core$String$fromInt(contentWidth),
							block.nJ.hg,
							1,
							content))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(labelWidth))
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						label))
				]));
	});
var $author$project$Render$Graphics$getDescription = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'description', properties));
};
var $author$project$Render$Graphics$parameters = F2(
	function (settings, properties) {
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', properties);
			if (_v2.$ === 1) {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v2.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var displayWidth = settings.uE;
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', properties);
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$px(displayWidth);
			} else {
				switch (_v0.a) {
					case 'fill':
						return $mdgriffith$elm_ui$Element$fill;
					case 'to-edges':
						return $mdgriffith$elm_ui$Element$px(displayWidth + 198);
					default:
						var w_ = _v0.a;
						var _v1 = $elm$core$String$toInt(w_);
						if (_v1.$ === 1) {
							return $mdgriffith$elm_ui$Element$px(displayWidth);
						} else {
							var w = _v1.a;
							return $mdgriffith$elm_ui$Element$px(w);
						}
				}
			}
		}();
		var description = A2($elm$core$Dict$get, 'description', properties);
		var captionPhrase = A2($elm$core$Dict$get, 'caption', properties);
		return {fb: captionPhrase, q$: description, fW: placement, uE: width};
	});
var $author$project$Render$Graphics$image2 = F5(
	function (_v0, _v1, settings, attrs, block) {
		var ypadding = function () {
			var _v10 = A2($elm$core$Dict$get, 'ypadding', block.sS);
			if (_v10.$ === 1) {
				return 18;
			} else {
				var dy = _v10.a;
				return A2(
					$elm$core$Maybe$withDefault,
					18,
					$elm$core$String$toInt(dy));
			}
		}();
		var width = function () {
			var _v8 = A2($elm$core$Dict$get, 'width', block.sS);
			if (_v8.$ === 1) {
				return $mdgriffith$elm_ui$Element$px(settings.uE);
			} else {
				switch (_v8.a) {
					case 'fill':
						return $mdgriffith$elm_ui$Element$fill;
					case 'to-edges':
						return $mdgriffith$elm_ui$Element$px(
							$elm$core$Basics$round(1.2 * settings.uE));
					default:
						var w_ = _v8.a;
						var _v9 = $elm$core$String$toInt(w_);
						if (_v9.$ === 1) {
							return $mdgriffith$elm_ui$Element$px(settings.uE);
						} else {
							var w = _v9.a;
							return $mdgriffith$elm_ui$Element$px(w);
						}
				}
			}
		}();
		var url = function () {
			var _v7 = block.qh;
			if (!_v7.$) {
				var str = _v7.a;
				return str;
			} else {
				return 'bad block';
			}
		}();
		var params = A2($author$project$Render$Graphics$parameters, settings, block.sS);
		var figureLabel = function () {
			var _v2 = _Utils_Tuple2(
				A2($elm$core$Dict$get, 'figure', block.sS),
				A2($elm$core$Dict$get, 'caption', block.sS));
			if (_v2.a.$ === 1) {
				if (_v2.b.$ === 1) {
					var _v3 = _v2.a;
					var _v4 = _v2.b;
					return $mdgriffith$elm_ui$Element$none;
				} else {
					var _v5 = _v2.a;
					var cap = _v2.b.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$text(cap));
				}
			} else {
				if (_v2.b.$ === 1) {
					var fig = _v2.a.a;
					var _v6 = _v2.b;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$text('Figure ' + fig));
				} else {
					var fig = _v2.a.a;
					var cap = _v2.b.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$text('Figure ' + (fig + ('. ' + cap))));
				}
			}
		}();
		var inner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: ypadding, jG: 0, kC: 0, k2: ypadding + 6}),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.uE)
						]),
					{
						q$: $author$project$Render$Graphics$getDescription(block.sS),
						oV: url
					}),
					figureLabel
				]));
		var outer = A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{fI: inner, uz: url});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.uE))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(width),
								$mdgriffith$elm_ui$Element$centerX
							]),
						_Utils_ap(
							attrs,
							A2($author$project$Render$Sync$attributes, settings, block))),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(params.uE),
									$mdgriffith$elm_ui$Element$spacing(0)
								]),
							outer)
						]))
				]));
	});
var $author$project$Render$Graphics$getVerbatimContent = function (_v0) {
	var body = _v0.qh;
	if (!body.$) {
		var str = body.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Graphics$red = A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0);
var $author$project$Render$Graphics$quiver = F5(
	function (_v0, _v1, settings, attrs, block) {
		var qArgs = A2($author$project$Render$Graphics$parameters, settings, block.sS);
		var maybePair = function () {
			var _v5 = A2(
				$elm$core$String$split,
				'---',
				$author$project$Render$Graphics$getVerbatimContent(block));
			if ((_v5.b && _v5.b.b) && (!_v5.b.b.b)) {
				var a = _v5.a;
				var _v6 = _v5.b;
				var b = _v6.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (maybePair.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Graphics$red)
					]),
				$mdgriffith$elm_ui$Element$text('Something is wrong'));
		} else {
			var _v3 = maybePair.a;
			var imageData = _v3.a;
			var params = A2(
				$author$project$Render$Graphics$imageParameters,
				settings,
				$elm$core$String$words(imageData));
			var desc = function () {
				var _v4 = qArgs.fb;
				if (!_v4.$) {
					var caption = _v4.a;
					return caption;
				} else {
					return '';
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE))
						]),
					_Utils_ap(
						attrs,
						A2($author$project$Render$Sync$attributes, settings, block))),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(qArgs.uE),
								params.fW
							]),
						{q$: desc, oV: params.uz}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$author$project$Render$Sync$highlighter,
							block.lv,
							_List_fromArray(
								[
									params.fW,
									params.fW,
									A2($mdgriffith$elm_ui$Element$paddingXY, 12, 4),
									A2($author$project$Render$Utility$elementAttribute, 'id', block.nJ.hg)
								])),
						$mdgriffith$elm_ui$Element$text(desc))
					]));
		}
	});
var $author$project$Render$CSVTable$getVerbatimContent = function (block) {
	var _v0 = block.qh;
	if (!_v0.$) {
		var str = _v0.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$CSVTable$prepareTable = F2(
	function (fontWidth_, block) {
		var title = A2($elm$core$Dict$get, 'title', block.sS);
		var lines = A2(
			$elm$core$String$split,
			'\n',
			$author$project$Render$CSVTable$getVerbatimContent(block));
		var rawCells = A2(
			$elm$core$List$map,
			$elm$core$List$map($elm$core$String$trim),
			A2(
				$elm$core$List$map,
				$elm$core$String$split(','),
				lines));
		var columnsToDisplay = A2(
			$elm$core$List$map,
			function (n) {
				return n - 1;
			},
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toInt),
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$split(','),
							A2($elm$core$Dict$get, 'columns', block.sS))))));
		var selectedCells = function () {
			if (_Utils_eq(columnsToDisplay, _List_Nil)) {
				return rawCells;
			} else {
				var updater = F2(
					function (_v0, acc_) {
						var k = _v0.a;
						var col = _v0.b;
						return A2($elm$core$List$member, k, columnsToDisplay) ? A2($elm$core$List$cons, col, acc_) : acc_;
					});
				var cols = A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, col) {
							return _Utils_Tuple2(k, col);
						}),
					$elm_community$list_extra$List$Extra$transpose(rawCells));
				var selectedCols = A3($elm$core$List$foldl, updater, _List_Nil, cols);
				return $elm_community$list_extra$List$Extra$transpose(
					$elm$core$List$reverse(selectedCols));
			}
		}();
		var columnWidths = A2(
			$elm$core$List$map,
			function (w) {
				return fontWidth_ * w;
			},
			A2(
				$elm$core$List$map,
				function (column) {
					return A2(
						$elm$core$Maybe$withDefault,
						1,
						$elm$core$List$maximum(column));
				},
				$elm_community$list_extra$List$Extra$transpose(
					A2(
						$elm$core$List$map,
						$elm$core$List$map($elm$core$String$length),
						selectedCells))));
		var totalWidth = $elm$core$List$sum(columnWidths);
		return {iQ: columnWidths, kK: selectedCells, ic: title, pe: totalWidth};
	});
var $author$project$Render$CSVTable$render = F5(
	function (count, acc, settings, attrs, block) {
		var renderRow = F3(
			function (rowNumber, widths_, cells_) {
				var totalWidth = $elm$core$List$sum(widths_) + 0;
				return (!rowNumber) ? A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(totalWidth))
						]),
					A3(
						$elm$core$List$map2,
						F2(
							function (cell, width) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(width)),
											$mdgriffith$elm_ui$Element$Font$underline
										]),
									$mdgriffith$elm_ui$Element$text(
										A3($elm$core$String$replace, '_', '', cell)));
							}),
						cells_,
						widths_)) : A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(totalWidth))
						]),
					A3(
						$elm$core$List$map2,
						F2(
							function (cell, width) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(width))
										]),
									$mdgriffith$elm_ui$Element$text(cell));
							}),
						cells_,
						widths_));
			});
		var data = A2($author$project$Render$CSVTable$prepareTable, 15, block);
		var title = function () {
			var _v0 = data.ic;
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				var title_ = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text(title_));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 18, jG: 36, kC: 0, k2: 18})
				]),
			A2(
				$elm$core$List$cons,
				title,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, row) {
							return A3(renderRow, k, data.iQ, row);
						}),
					data.kK)));
	});
var $author$project$Render$ChartV2$ChartData2D = function (a) {
	return {$: 0, a: a};
};
var $author$project$Render$ChartV2$ChartData3D = function (a) {
	return {$: 1, a: a};
};
var $author$project$Render$ChartV2$applyIf = F3(
	function (flag, f, x) {
		return flag ? f(x) : x;
	});
var $author$project$Render$ChartV2$valueOfPair = function (_v0) {
	var ma = _v0.a;
	var mb = _v0.b;
	var _v1 = _Utils_Tuple2(ma, mb);
	if ((!_v1.a.$) && (!_v1.b.$)) {
		var a = _v1.a.a;
		var b = _v1.b.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(a, b));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$listTo2DPoint = function (list) {
	if (list.b && list.b.b) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		var rest = _v1.b;
		return A2(
			$elm$core$Maybe$map,
			function (_v2) {
				var u = _v2.a;
				var v = _v2.b;
				return {be: u, uL: v};
			},
			$author$project$Render$ChartV2$valueOfPair(
				_Utils_Tuple2(
					$elm$core$String$toFloat(
						$elm$core$String$trim(x)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(y)))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$csvTo2DData = function (data) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$Render$ChartV2$listTo2DPoint, data));
};
var $author$project$Render$ChartV2$valueOfTriple = function (_v0) {
	var ma = _v0.a;
	var mb = _v0.b;
	var mc = _v0.c;
	var _v1 = _Utils_Tuple3(ma, mb, mc);
	if (((!_v1.a.$) && (!_v1.b.$)) && (!_v1.c.$)) {
		var a = _v1.a.a;
		var b = _v1.b.a;
		var c = _v1.c.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(a, b, c));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$listTo3DPoint = function (list) {
	if ((list.b && list.b.b) && list.b.b.b) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		var _v2 = _v1.b;
		var z = _v2.a;
		var rest = _v2.b;
		return A2(
			$elm$core$Maybe$map,
			function (_v3) {
				var u = _v3.a;
				var v = _v3.b;
				var w = _v3.c;
				return {be: u, uL: v, pH: w};
			},
			$author$project$Render$ChartV2$valueOfTriple(
				_Utils_Tuple3(
					$elm$core$String$toFloat(
						$elm$core$String$trim(x)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(y)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(z)))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$csvTo3DData = function (data) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$Render$ChartV2$listTo3DPoint, data));
};
var $author$project$Render$ChartV2$makeTimeseries = function (data) {
	return A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, oneList) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$fromInt(i),
					oneList);
			}),
		data);
};
var $author$project$Render$ChartV2$applyFunctions = F2(
	function (fs, a) {
		return $elm$core$List$reverse(
			A3(
				$elm$core$List$foldl,
				F2(
					function (f, acc) {
						return A2(
							$elm$core$List$cons,
							f(a),
							acc);
					}),
				_List_Nil,
				fs));
	});
var $author$project$Render$ChartV2$select = F2(
	function (columns_, data) {
		if (columns_.$ === 1) {
			return $elm$core$Maybe$Just(data);
		} else {
			var columns = columns_.a;
			var selectors = A2($elm$core$List$map, $elm_community$list_extra$List$Extra$getAt, columns);
			return $elm_community$maybe_extra$Maybe$Extra$combine(
				A2($author$project$Render$ChartV2$applyFunctions, selectors, data));
		}
	});
var $author$project$Render$ChartV2$selectColumns = F2(
	function (columns, data) {
		return _Utils_eq(
			columns,
			$elm$core$Maybe$Just(_List_Nil)) ? $elm$core$Maybe$Just(data) : $elm_community$maybe_extra$Maybe$Extra$combine(
			A2(
				$elm$core$List$map,
				$author$project$Render$ChartV2$select(columns),
				data));
	});
var $author$project$Render$ChartV2$csvToChartData = F2(
	function (options, inputLines_) {
		var takeRows = F2(
			function (maybeRowPair, lines) {
				if (maybeRowPair.$ === 1) {
					return lines;
				} else {
					var _v10 = maybeRowPair.a;
					var start = _v10.a;
					var end = _v10.b;
					var _v11 = _Utils_Tuple2(start, end);
					if (!_v11.a) {
						if (!_v11.b) {
							return lines;
						} else {
							return A2($elm$core$List$take, end, lines);
						}
					} else {
						if (!_v11.b) {
							return A2($elm$core$List$drop, start, lines);
						} else {
							return A2(
								$elm$core$List$take,
								end,
								A2($elm$core$List$drop, start, lines));
						}
					}
				}
			});
		var stripHeader = F2(
			function (dropLines, lines) {
				if (dropLines.$ === 1) {
					return lines;
				} else {
					var n = dropLines.a;
					return A2($elm$core$List$drop, n, lines);
				}
			});
		var separator = function () {
			var _v7 = options.hZ;
			if (!_v7.$) {
				var sep = _v7.a;
				return (sep === 'tab') ? '\t' : ((sep === 'blank') ? ' ' : ((sep === 'comma') ? ',' : ((sep === 'semicolon') ? ';' : ((sep === 'colon') ? ':' : sep))));
			} else {
				return ',';
			}
		}();
		var reverse = F2(
			function (options_, lines) {
				return options_.eD ? $elm$core$List$reverse(lines) : lines;
			});
		var flipIf = F3(
			function (data, reverse_, rows) {
				if (reverse_) {
					if (rows.$ === 1) {
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(
								0,
								$elm$core$List$length(data)));
					} else {
						var _v6 = rows.a;
						var start = _v6.a;
						var end = _v6.b;
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(
								$elm$core$List$length(data) - end,
								$elm$core$List$length(data) - start));
					}
				} else {
					return rows;
				}
			});
		var filterLines = F2(
			function (filter_, lines) {
				if (filter_.$ === 1) {
					return lines;
				} else {
					var filter = filter_.a;
					return A2(
						$elm$core$List$filter,
						function (line) {
							return A2($elm$core$String$contains, filter, line);
						},
						lines);
				}
			});
		var filteredInputLines = function (data) {
			return A2(
				takeRows,
				A3(flipIf, data, options.eD, options.hS),
				data);
		}(
			A2(
				filterLines,
				options.g3,
				A2(
					stripHeader,
					options.he,
					A2(
						$elm$core$List$filter,
						function (line) {
							return ($elm$core$String$trim(line) !== '') && (A2($elm$core$String$left, 1, line) !== '#');
						},
						inputLines_))));
		var data_ = function () {
			var _v3 = options.fH;
			if ((!_v3.$) && (_v3.a === 'timeseries')) {
				return A2(
					$elm$core$Maybe$map,
					$author$project$Render$ChartV2$makeTimeseries,
					A2(
						$elm$core$Maybe$map,
						A2($author$project$Render$ChartV2$applyIf, options.eD, $elm$core$List$reverse),
						A2(
							$author$project$Render$ChartV2$selectColumns,
							options.fc,
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$split(','),
									$elm$core$List$map($elm$core$String$trim)),
								filteredInputLines))));
			} else {
				return A2(
					$author$project$Render$ChartV2$selectColumns,
					options.fc,
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split(separator),
							$elm$core$List$map($elm$core$String$trim)),
						filteredInputLines));
			}
		}();
		var dimension = A2(
			$elm$core$Maybe$map,
			$elm$core$List$length,
			A2($elm$core$Maybe$andThen, $elm$core$List$head, data_));
		var _v0 = _Utils_Tuple2(dimension, data_);
		if (_v0.a.$ === 1) {
			var _v1 = _v0.a;
			return $elm$core$Maybe$Nothing;
		} else {
			if (_v0.b.$ === 1) {
				var _v2 = _v0.b;
				return $elm$core$Maybe$Nothing;
			} else {
				switch (_v0.a.a) {
					case 2:
						var data = _v0.b.a;
						return $elm$core$Maybe$Just(
							$author$project$Render$ChartV2$ChartData2D(
								$author$project$Render$ChartV2$csvTo2DData(data)));
					case 3:
						var data = _v0.b.a;
						return $elm$core$Maybe$Just(
							$author$project$Render$ChartV2$ChartData3D(
								$author$project$Render$ChartV2$csvTo3DData(data)));
					default:
						return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $author$project$Render$ChartV2$deltaWidth = 100;
var $author$project$Render$ChartV2$getRange = function (str) {
	var _v0 = A2(
		$elm$core$List$take,
		2,
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ',', str)));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var low = _v0.a;
		var _v1 = _v0.b;
		var high = _v1.a;
		return $elm$core$Maybe$Just(
			{
				mO: $elm$core$String$toFloat(high),
				ep: $elm$core$String$toFloat(low)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $terezka$elm_charts$Internal$Property$NotStacked = function (a) {
	return {$: 0, a: a};
};
var $terezka$elm_charts$Internal$Property$notStacked = F3(
	function (toY, interpolation, presentation) {
		return $terezka$elm_charts$Internal$Property$NotStacked(
			{
				m4: interpolation,
				sQ: presentation,
				id: toY,
				gh: toY,
				pd: $elm$core$Maybe$Nothing,
				uq: function (datum) {
					return A2(
						$elm$core$Maybe$withDefault,
						'N/A',
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$fromFloat,
							toY(datum)));
				},
				pu: F2(
					function (_v0, _v1) {
						return _List_Nil;
					})
			});
	});
var $terezka$elm_charts$Chart$bar = function (y) {
	return A2(
		$terezka$elm_charts$Internal$Property$notStacked,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$elm_charts$Chart$BarsElement = F5(
	function (a, b, c, d, e) {
		return {$: 2, a: a, b: b, c: c, d: d, e: e};
	});
var $terezka$elm_charts$Chart$Indexed = function (a) {
	return {$: 0, a: a};
};
var $terezka$elm_charts$Internal$Many$apply = F2(
	function (_v0, items) {
		var func = _v0.b;
		return func(items);
	});
var $terezka$elm_charts$Chart$Item$apply = $terezka$elm_charts$Internal$Many$apply;
var $terezka$elm_charts$Internal$Helpers$apply = F2(
	function (attrs, _default) {
		var apply_ = F2(
			function (_v0, a) {
				var f = _v0;
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, attrs);
	});
var $terezka$elm_charts$Internal$Many$Remodel = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $terezka$elm_charts$Internal$Item$Rendered = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $terezka$elm_charts$Internal$Many$editLimits = F2(
	function (edit, _v0) {
		var _v1 = _v0.a;
		var x = _v1.a;
		var xs = _v1.b;
		var rendering = _v0.b;
		return A2(
			$terezka$elm_charts$Internal$Item$Rendered,
			_Utils_Tuple2(x, xs),
			_Utils_update(
				rendering,
				{
					at: A2(edit, x, rendering.at)
				}));
	});
var $terezka$elm_charts$Internal$Item$getPosition = F2(
	function (plane, _v0) {
		var item = _v0.b;
		return item.ul(plane);
	});
var $terezka$elm_charts$Internal$Item$getX1 = function (_v0) {
	var meta = _v0.a;
	return meta.uG;
};
var $terezka$elm_charts$Internal$Item$getX2 = function (_v0) {
	var meta = _v0.a;
	return meta.uH;
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $terezka$elm_charts$Internal$Helpers$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				if (!scattered.b) {
					return $elm$core$List$reverse(gathered);
				} else {
					var toGather = scattered.a;
					var population = scattered.b;
					var _v1 = A2(
						$elm$core$List$partition,
						testFn(toGather),
						population);
					var gathering = _v1.a;
					var remaining = _v1.b;
					return A2(
						helper,
						remaining,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered));
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $terezka$elm_charts$Internal$Coordinates$Position = F4(
	function (x1, x2, y1, y2) {
		return {uG: x1, uH: x2, uM: y1, uN: y2};
	});
var $terezka$elm_charts$Internal$Coordinates$foldPosition = F2(
	function (func, data) {
		var fold = F2(
			function (datum, posM) {
				if (!posM.$) {
					var pos = posM.a;
					return $elm$core$Maybe$Just(
						{
							uG: A2(
								$elm$core$Basics$min,
								func(datum).uG,
								pos.uG),
							uH: A2(
								$elm$core$Basics$max,
								func(datum).uH,
								pos.uH),
							uM: A2(
								$elm$core$Basics$min,
								func(datum).uM,
								pos.uM),
							uN: A2(
								$elm$core$Basics$max,
								func(datum).uN,
								pos.uN)
						});
				} else {
					return $elm$core$Maybe$Just(
						func(datum));
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			A4($terezka$elm_charts$Internal$Coordinates$Position, 0, 0, 0, 0),
			A3($elm$core$List$foldl, fold, $elm$core$Maybe$Nothing, data));
	});
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $terezka$elm_charts$Internal$Item$getLimits = function (_v0) {
	var item = _v0.b;
	return item.at;
};
var $terezka$elm_charts$Internal$Item$render = F2(
	function (plane, _v0) {
		var item = _v0.b;
		return A2(
			item.ot,
			plane,
			item.ul(plane));
	});
var $elm$html$Html$table = _VirtualDom_node('table');
var $terezka$elm_charts$Internal$Item$tooltip = function (_v0) {
	var item = _v0.b;
	return item.up(0);
};
var $terezka$elm_charts$Internal$Many$toGroup = F2(
	function (first, rest) {
		var all = A2($elm$core$List$cons, first, rest);
		return A2(
			$terezka$elm_charts$Internal$Item$Rendered,
			_Utils_Tuple2(first, rest),
			{
				at: A2($terezka$elm_charts$Internal$Coordinates$foldPosition, $terezka$elm_charts$Internal$Item$getLimits, all),
				ot: F2(
					function (plane, _v0) {
						return A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__group')
								]),
							A2(
								$elm$core$List$map,
								$terezka$elm_charts$Internal$Item$render(plane),
								all));
					}),
				ul: function (plane) {
					return A2(
						$terezka$elm_charts$Internal$Coordinates$foldPosition,
						$terezka$elm_charts$Internal$Item$getPosition(plane),
						all);
				},
				up: function (c) {
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$table,
							_List_Nil,
							A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Item$tooltip, all))
						]);
				}
			});
	});
var $terezka$elm_charts$Internal$Many$groupingHelp = F2(
	function (_v0, items) {
		var shared = _v0.h_;
		var equality = _v0.g_;
		var edits = _v0.gY;
		var toShared = function (_v2) {
			var meta = _v2.a;
			var item = _v2.b;
			return shared(meta);
		};
		var toNewGroup = function (_v1) {
			var i = _v1.a;
			var is = _v1.b;
			return edits(
				A2($terezka$elm_charts$Internal$Many$toGroup, i, is));
		};
		var toEquality = F2(
			function (aO, bO) {
				return A2(
					equality,
					toShared(aO),
					toShared(bO));
			});
		return A2(
			$elm$core$List$map,
			toNewGroup,
			A2($terezka$elm_charts$Internal$Helpers$gatherWith, toEquality, items));
	});
var $terezka$elm_charts$Internal$Many$bins = A2(
	$terezka$elm_charts$Internal$Many$Remodel,
	$terezka$elm_charts$Internal$Item$getPosition,
	$terezka$elm_charts$Internal$Many$groupingHelp(
		{
			gY: $terezka$elm_charts$Internal$Many$editLimits(
				F2(
					function (item, pos) {
						return _Utils_update(
							pos,
							{
								uG: $terezka$elm_charts$Internal$Item$getX1(item),
								uH: $terezka$elm_charts$Internal$Item$getX2(item)
							});
					})),
			g_: F2(
				function (a, b) {
					return _Utils_eq(a.uG, b.uG) && (_Utils_eq(a.uH, b.uH) && (_Utils_eq(a.i6, b.i6) && _Utils_eq(a.l1, b.l1)));
				}),
			h_: function (config) {
				return {l1: config.rz.l1, i6: config.rz.q7, uG: config.uG, uH: config.uH};
			}
		}));
var $terezka$elm_charts$Chart$Item$bins = $terezka$elm_charts$Internal$Many$bins;
var $terezka$elm_charts$Internal$Produce$defaultBars = {rp: false, rq: true, dq: 0.1, s8: 0, s9: 0, tv: 0.05, uG: $elm$core$Maybe$Nothing, uH: $elm$core$Maybe$Nothing};
var $terezka$elm_charts$Internal$Item$generalize = function (_v0) {
	var meta = _v0.a;
	var item = _v0.b;
	return A2(
		$terezka$elm_charts$Internal$Item$Rendered,
		{
			qF: meta.qF,
			l2: meta.l2,
			rz: meta.rz,
			rQ: meta.rQ,
			bn: meta.bn,
			sQ: meta.uh(meta.sQ),
			uh: $elm$core$Basics$identity,
			uq: meta.uq,
			uG: meta.uG,
			uH: meta.uH,
			uL: meta.uL
		},
		item);
};
var $terezka$elm_charts$Internal$Many$getMembers = function (_v0) {
	var _v1 = _v0.a;
	var x = _v1.a;
	var xs = _v1.b;
	return A2($elm$core$List$cons, x, xs);
};
var $terezka$elm_charts$Internal$Many$generalize = function (many) {
	return A2(
		$elm$core$List$map,
		$terezka$elm_charts$Internal$Item$generalize,
		$terezka$elm_charts$Internal$Many$getMembers(many));
};
var $terezka$elm_charts$Chart$Item$getLimits = $terezka$elm_charts$Internal$Item$getLimits;
var $terezka$elm_charts$Internal$Item$map = F2(
	function (func, _v0) {
		var meta = _v0.a;
		var item = _v0.b;
		return A2(
			$terezka$elm_charts$Internal$Item$Rendered,
			{
				qF: meta.qF,
				l2: func(meta.l2),
				rz: meta.rz,
				rQ: meta.rQ,
				bn: meta.bn,
				sQ: meta.sQ,
				uh: meta.uh,
				uq: meta.uq,
				uG: meta.uG,
				uH: meta.uH,
				uL: meta.uL
			},
			item);
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $terezka$elm_charts$Internal$Legend$BarLegend = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $terezka$elm_charts$Internal$Helpers$Attribute = $elm$core$Basics$identity;
var $terezka$elm_charts$Chart$Attributes$border = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{iF: v});
	};
};
var $terezka$elm_charts$Chart$Attributes$color = function (v) {
	return function (config) {
		return (v === '') ? config : _Utils_update(
			config,
			{qF: v});
	};
};
var $terezka$elm_charts$Internal$Helpers$pink = '#ea60df';
var $terezka$elm_charts$Internal$Svg$defaultBar = {ly: _List_Nil, iF: 'white', lJ: 0, qF: $terezka$elm_charts$Internal$Helpers$pink, i1: $elm$core$Maybe$Nothing, eb: 0, ru: '', rv: 10, bO: 1, s8: 0, s9: 0};
var $terezka$elm_charts$Chart$Attributes$roundBottom = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{s8: v});
	};
};
var $terezka$elm_charts$Chart$Attributes$roundTop = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{s9: v});
	};
};
var $terezka$elm_charts$Internal$Property$toConfigs = function (property) {
	if (!property.$) {
		var config = property.a;
		return _List_fromArray(
			[config]);
	} else {
		var configs = property.a;
		return configs;
	}
};
var $terezka$elm_charts$Internal$Helpers$blue = '#12A5ED';
var $terezka$elm_charts$Internal$Helpers$brown = '#871c1c';
var $terezka$elm_charts$Internal$Helpers$green = '#71c614';
var $terezka$elm_charts$Internal$Helpers$moss = '#92b42c';
var $terezka$elm_charts$Internal$Helpers$orange = '#FF8400';
var $terezka$elm_charts$Internal$Helpers$purple = '#7b4dff';
var $terezka$elm_charts$Internal$Helpers$red = '#F5325B';
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $terezka$elm_charts$Internal$Helpers$toDefault = F3(
	function (_default, items, index) {
		var dict = $elm$core$Dict$fromList(
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, items));
		var numOfItems = $elm$core$Dict$size(dict);
		var itemIndex = index % numOfItems;
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, itemIndex, dict));
	});
var $terezka$elm_charts$Internal$Helpers$turquoise = '#22d2ba';
var $terezka$elm_charts$Internal$Helpers$yellow = '#FFCA00';
var $terezka$elm_charts$Internal$Helpers$toDefaultColor = A2(
	$terezka$elm_charts$Internal$Helpers$toDefault,
	$terezka$elm_charts$Internal$Helpers$pink,
	_List_fromArray(
		[$terezka$elm_charts$Internal$Helpers$purple, $terezka$elm_charts$Internal$Helpers$pink, $terezka$elm_charts$Internal$Helpers$blue, $terezka$elm_charts$Internal$Helpers$green, $terezka$elm_charts$Internal$Helpers$red, $terezka$elm_charts$Internal$Helpers$yellow, $terezka$elm_charts$Internal$Helpers$turquoise, $terezka$elm_charts$Internal$Helpers$orange, $terezka$elm_charts$Internal$Helpers$moss, $terezka$elm_charts$Internal$Helpers$brown]));
var $terezka$elm_charts$Internal$Legend$toBarLegends = F3(
	function (elIndex, barsAttrs, properties) {
		var toBarConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, barsAttrs, $terezka$elm_charts$Internal$Produce$defaultBars);
		var toBarLegend = F2(
			function (colorIndex, prop) {
				var rounding = A2($elm$core$Basics$max, barsConfig.s9, barsConfig.s8);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$roundTop(rounding),
						$terezka$elm_charts$Chart$Attributes$roundBottom(rounding),
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$border(defaultColor)
					]);
				var attrsOrg = _Utils_ap(defaultAttrs, prop.sQ);
				var productOrg = toBarConfig(attrsOrg);
				var attrs = _Utils_eq(productOrg.iF, defaultColor) ? _Utils_ap(
					attrsOrg,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$border(productOrg.qF)
						])) : attrsOrg;
				return A2(
					$terezka$elm_charts$Internal$Legend$BarLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.pd),
					attrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			function (propIndex) {
				return toBarLegend(elIndex + propIndex);
			},
			A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Property$toConfigs, properties));
	});
var $terezka$elm_charts$Internal$Item$Bar = function (a) {
	return {$: 1, a: a};
};
var $terezka$elm_charts$Internal$Commands$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e, f: f, g: g};
	});
var $terezka$elm_charts$Internal$Commands$Line = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $terezka$elm_charts$Internal$Commands$Move = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $terezka$elm_charts$Internal$Commands$joinCommands = function (commands) {
	return A2($elm$core$String$join, ' ', commands);
};
var $terezka$elm_charts$Internal$Commands$stringBoolInt = function (bool) {
	return bool ? '1' : '0';
};
var $terezka$elm_charts$Internal$Commands$stringPoint = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
};
var $terezka$elm_charts$Internal$Commands$stringPoints = function (points) {
	return A2(
		$elm$core$String$join,
		',',
		A2($elm$core$List$map, $terezka$elm_charts$Internal$Commands$stringPoint, points));
};
var $terezka$elm_charts$Internal$Commands$stringCommand = function (command) {
	switch (command.$) {
		case 0:
			var x = command.a;
			var y = command.b;
			return 'M' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 1:
			var x = command.a;
			var y = command.b;
			return 'L' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 2:
			var cx1 = command.a;
			var cy1 = command.b;
			var cx2 = command.c;
			var cy2 = command.d;
			var x = command.e;
			var y = command.f;
			return 'C' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(cx2, cy2),
						_Utils_Tuple2(x, y)
					]));
		case 3:
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 4:
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 5:
			var x = command.a;
			var y = command.b;
			return 'T' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 6:
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var x = command.f;
			var y = command.g;
			return 'A ' + $terezka$elm_charts$Internal$Commands$joinCommands(
				_List_fromArray(
					[
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(rx, ry)),
						$elm$core$String$fromInt(xAxisRotation),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(largeArcFlag),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(sweepFlag),
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(x, y))
					]));
		default:
			return 'Z';
	}
};
var $terezka$elm_charts$Internal$Commands$Close = {$: 7};
var $terezka$elm_charts$Internal$Commands$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {$: 2, a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $terezka$elm_charts$Internal$Commands$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {$: 3, a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {$: 4, a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziersShort = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $terezka$elm_charts$Internal$Coordinates$innerLength = function (axis) {
	return A2($elm$core$Basics$max, 1, (axis.np - axis.r4) - axis.r3);
};
var $terezka$elm_charts$Internal$Coordinates$innerWidth = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.be);
};
var $terezka$elm_charts$Internal$Coordinates$range = function (axis) {
	var diff = axis.jT - axis.jX;
	return (diff > 0) ? diff : 1;
};
var $terezka$elm_charts$Internal$Coordinates$scaleSVGX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerWidth(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.be);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, value - plane.be.jX) + plane.be.r4;
	});
var $terezka$elm_charts$Internal$Coordinates$innerHeight = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.uL);
};
var $terezka$elm_charts$Internal$Coordinates$scaleSVGY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerHeight(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.uL);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGY = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGY, plane, plane.uL.jT - value) + plane.uL.r4;
	});
var $terezka$elm_charts$Internal$Commands$translate = F2(
	function (plane, command) {
		switch (command.$) {
			case 0:
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Move,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 1:
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Line,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 2:
				var cx1 = command.a;
				var cy1 = command.b;
				var cx2 = command.c;
				var cy2 = command.d;
				var x = command.e;
				var y = command.f;
				return A6(
					$terezka$elm_charts$Internal$Commands$CubicBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 3:
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$CubicBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 4:
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 5:
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 6:
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var x = command.f;
				var y = command.g;
				return A7(
					$terezka$elm_charts$Internal$Commands$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			default:
				return $terezka$elm_charts$Internal$Commands$Close;
		}
	});
var $terezka$elm_charts$Internal$Commands$description = F2(
	function (plane, commands) {
		return $terezka$elm_charts$Internal$Commands$joinCommands(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$terezka$elm_charts$Internal$Commands$translate(plane),
					$terezka$elm_charts$Internal$Commands$stringCommand),
				commands));
	});
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.be)) / $terezka$elm_charts$Internal$Coordinates$innerWidth(plane);
	});
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.uL)) / $terezka$elm_charts$Internal$Coordinates$innerHeight(plane);
	});
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternTransform = _VirtualDom_attribute('patternTransform');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$stopColor = _VirtualDom_attribute('stop-color');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $terezka$elm_charts$Internal$Svg$toPattern = F2(
	function (defaultColor, design) {
		var toPatternId = function (props) {
			return A3(
				$elm$core$String$replace,
				'(',
				'-',
				A3(
					$elm$core$String$replace,
					')',
					'-',
					A3(
						$elm$core$String$replace,
						'.',
						'-',
						A3(
							$elm$core$String$replace,
							',',
							'-',
							A3(
								$elm$core$String$replace,
								' ',
								'-',
								A2(
									$elm$core$String$join,
									'-',
									_Utils_ap(
										_List_fromArray(
											[
												'elm-charts__pattern',
												function () {
												switch (design.$) {
													case 0:
														return 'striped';
													case 1:
														return 'dotted';
													default:
														return 'gradient';
												}
											}()
											]),
										props)))))));
		};
		var toPatternDefs = F4(
			function (id, spacing, rotate, inside) {
				return A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse'),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$patternTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotate) + ')'))
								]),
							_List_fromArray(
								[inside]))
						]));
			});
		var _v0 = function () {
			switch (design.$) {
				case 0:
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Helpers$apply,
						edits,
						{qF: defaultColor, W: 45, tv: 4, uE: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.qF,
								$elm$core$String$fromFloat(config.uE),
								$elm$core$String$fromFloat(config.tv),
								$elm$core$String$fromFloat(config.W)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.tv,
							config.W,
							A2(
								$elm$svg$Svg$line,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$x1('0'),
										$elm$svg$Svg$Attributes$y('0'),
										$elm$svg$Svg$Attributes$x2('0'),
										$elm$svg$Svg$Attributes$y2(
										$elm$core$String$fromFloat(config.tv)),
										$elm$svg$Svg$Attributes$stroke(config.qF),
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(config.uE))
									]),
								_List_Nil)),
						theId);
				case 1:
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Helpers$apply,
						edits,
						{qF: defaultColor, W: 45, tv: 4, uE: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.qF,
								$elm$core$String$fromFloat(config.uE),
								$elm$core$String$fromFloat(config.tv),
								$elm$core$String$fromFloat(config.W)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.tv,
							config.W,
							A2(
								$elm$svg$Svg$circle,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(config.qF),
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(config.uE / 3)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(config.uE / 3)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(config.uE / 3))
									]),
								_List_Nil)),
						theId);
				default:
					var edits = design.a;
					var colors = _Utils_eq(edits, _List_Nil) ? _List_fromArray(
						[defaultColor, 'white']) : edits;
					var theId = toPatternId(colors);
					var totalColors = $elm$core$List$length(colors);
					var toPercentage = function (i) {
						return (i * 100) / (totalColors - 1);
					};
					var toStop = F2(
						function (i, c) {
							return A2(
								$elm$svg$Svg$stop,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$offset(
										$elm$core$String$fromFloat(
											toPercentage(i)) + '%'),
										$elm$svg$Svg$Attributes$stopColor(c)
									]),
								_List_Nil);
						});
					return _Utils_Tuple2(
						A2(
							$elm$svg$Svg$defs,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$linearGradient,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$id(theId),
											$elm$svg$Svg$Attributes$x1('0'),
											$elm$svg$Svg$Attributes$x2('0'),
											$elm$svg$Svg$Attributes$y1('0'),
											$elm$svg$Svg$Attributes$y2('1')
										]),
									A2($elm$core$List$indexedMap, toStop, colors))
								])),
						theId);
			}
		}();
		var patternDefs = _v0.a;
		var patternId = _v0.b;
		return _Utils_Tuple2(patternDefs, 'url(#' + (patternId + ')'));
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $terezka$elm_charts$Internal$Svg$withAttrs = F3(
	function (attrs, toEl, defaultAttrs) {
		return toEl(
			_Utils_ap(
				defaultAttrs,
				A2(
					$elm$core$List$map,
					$elm$html$Html$Attributes$map($elm$core$Basics$never),
					attrs)));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $terezka$elm_charts$Internal$Coordinates$toId = function (plane) {
	var numToStr = A2(
		$elm$core$Basics$composeR,
		$elm$core$String$fromFloat,
		A2($elm$core$String$replace, '.', '-'));
	return A2(
		$elm$core$String$join,
		'_',
		_List_fromArray(
			[
				'elm-charts__id',
				numToStr(plane.be.np),
				numToStr(plane.be.jX),
				numToStr(plane.be.jT),
				numToStr(plane.be.r4),
				numToStr(plane.be.r3),
				numToStr(plane.uL.np),
				numToStr(plane.uL.jX),
				numToStr(plane.uL.jT),
				numToStr(plane.uL.r4),
				numToStr(plane.uL.r3)
			]));
};
var $terezka$elm_charts$Internal$Svg$withinChartArea = function (plane) {
	return $elm$svg$Svg$Attributes$clipPath(
		'url(#' + ($terezka$elm_charts$Internal$Coordinates$toId(plane) + ')'));
};
var $terezka$elm_charts$Internal$Svg$bar = F3(
	function (plane, config, point) {
		var viewBar = F6(
			function (fill, fillOpacity, border, borderWidth, strokeOpacity, cmds) {
				return A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.ly,
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__bar'),
							$elm$svg$Svg$Attributes$fill(fill),
							$elm$svg$Svg$Attributes$fillOpacity(
							$elm$core$String$fromFloat(fillOpacity)),
							$elm$svg$Svg$Attributes$stroke(border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(borderWidth)),
							$elm$svg$Svg$Attributes$strokeOpacity(
							$elm$core$String$fromFloat(strokeOpacity)),
							$elm$svg$Svg$Attributes$d(
							A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_Nil);
			});
		var highlightColor = (config.ru === '') ? config.qF : config.ru;
		var borderWidthCarY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, config.lJ / 2);
		var highlightWidthCarY = borderWidthCarY + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, config.rv / 2);
		var borderWidthCarX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, config.lJ / 2);
		var highlightWidthCarX = borderWidthCarX + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, config.rv / 2);
		var pos = {
			uG: A2($elm$core$Basics$min, point.uG, point.uH) + borderWidthCarX,
			uH: A2($elm$core$Basics$max, point.uG, point.uH) - borderWidthCarX,
			uM: A2($elm$core$Basics$min, point.uM, point.uN) + borderWidthCarY,
			uN: A2($elm$core$Basics$max, point.uM, point.uN) - borderWidthCarY
		};
		var height = $elm$core$Basics$abs(pos.uN - pos.uM);
		var highlightPos = {uG: pos.uG - highlightWidthCarX, uH: pos.uH + highlightWidthCarX, uM: pos.uM - highlightWidthCarY, uN: pos.uN + highlightWidthCarY};
		var width = $elm$core$Basics$abs(pos.uH - pos.uG);
		var roundingBottom = (A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.s8);
		var radiusBottomX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, roundingBottom);
		var radiusBottomY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, roundingBottom);
		var roundingTop = (A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.s9);
		var radiusTopX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, roundingTop);
		var radiusTopY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, roundingTop);
		var _v0 = ((((height - (radiusTopY * 0.8)) - (radiusBottomY * 0.8)) <= 0) || (((width - (radiusTopX * 0.8)) - (radiusBottomX * 0.8)) <= 0)) ? _Utils_Tuple2(0, 0) : _Utils_Tuple2(config.s9, config.s8);
		var roundTop = _v0.a;
		var roundBottom = _v0.b;
		var _v1 = function () {
			if (_Utils_eq(pos.uM, pos.uN)) {
				return _Utils_Tuple2(_List_Nil, _List_Nil);
			} else {
				var _v2 = _Utils_Tuple2(roundTop > 0, roundBottom > 0);
				if (!_v2.a) {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.uG, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uM)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.uG, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uG, highlightPos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH, highlightPos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uM)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.uG + radiusBottomX, pos.uM),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.uG, pos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.uH - radiusBottomX, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG + radiusBottomX, pos.uM)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.uG + radiusBottomX, highlightPos.uM),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.uG, highlightPos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uG, highlightPos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH, highlightPos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH, highlightPos.uM + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.uH - radiusBottomX, highlightPos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uG + radiusBottomX, highlightPos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH - radiusBottomX, pos.uM),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.uH, pos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM)
								]));
					}
				} else {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.uG, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uN - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.uG + radiusTopX, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH - radiusTopX, pos.uN),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.uH, pos.uN - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uM)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.uG, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uG, highlightPos.uN - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.uG + radiusTopX, highlightPos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH - radiusTopX, highlightPos.uN),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.uH, highlightPos.uN - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uN - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.uH - radiusTopX, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG + radiusTopX, pos.uN),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.uG, pos.uN - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uM)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.uG + radiusBottomX, pos.uM),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.uG, pos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uN - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.uG + radiusTopX, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH - radiusTopX, pos.uN),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.uH, pos.uN - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.uH - radiusBottomX, pos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG + radiusBottomX, pos.uM)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.uG + radiusBottomX, highlightPos.uM),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.uG, highlightPos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uG, highlightPos.uN - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.uG + radiusTopX, highlightPos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH - radiusTopX, highlightPos.uN),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.uH, highlightPos.uN - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uH, highlightPos.uM + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.uH - radiusBottomX, highlightPos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.uG + radiusBottomX, highlightPos.uM),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH - radiusBottomX, pos.uM),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.uH, pos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uN - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.uH - radiusTopX, pos.uN),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG + radiusTopX, pos.uN),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.uG, pos.uN - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uG, pos.uM + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.uH, pos.uM)
								]));
					}
				}
			}
		}();
		var commands = _v1.a;
		var highlightCommands = _v1.b;
		var viewAuraBar = function (fill) {
			return (!config.eb) ? A6(viewBar, fill, config.bO, config.iF, config.lJ, 1, commands) : A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-highlight')
					]),
				_List_fromArray(
					[
						A6(viewBar, highlightColor, config.eb, 'transparent', 0, 0, highlightCommands),
						A6(viewBar, fill, config.bO, config.iF, config.lJ, 1, commands)
					]));
		};
		var _v3 = config.i1;
		if (_v3.$ === 1) {
			return viewAuraBar(config.qF);
		} else {
			var design = _v3.a;
			var _v4 = A2($terezka$elm_charts$Internal$Svg$toPattern, config.qF, design);
			var patternDefs = _v4.a;
			var fill = _v4.b;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-pattern')
					]),
				_List_fromArray(
					[
						patternDefs,
						viewAuraBar(fill)
					]));
		}
	});
var $terezka$elm_charts$Internal$Produce$toBin = F5(
	function (barsConfig, index, prevM, curr, nextM) {
		var _v0 = _Utils_Tuple2(barsConfig.uG, barsConfig.uH);
		if (_v0.a.$ === 1) {
			if (_v0.b.$ === 1) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return {l2: curr, rb: (index + 1) + 0.5, tz: (index + 1) - 0.5};
			} else {
				var _v8 = _v0.a;
				var toX2 = _v0.b.a;
				var _v9 = _Utils_Tuple2(prevM, nextM);
				if (!_v9.a.$) {
					var prev = _v9.a.a;
					return {
						l2: curr,
						rb: toX2(curr),
						tz: toX2(prev)
					};
				} else {
					if (!_v9.b.$) {
						var _v10 = _v9.a;
						var next = _v9.b.a;
						return {
							l2: curr,
							rb: toX2(curr),
							tz: toX2(curr) - (toX2(next) - toX2(curr))
						};
					} else {
						var _v11 = _v9.a;
						var _v12 = _v9.b;
						return {
							l2: curr,
							rb: toX2(curr),
							tz: toX2(curr) - 1
						};
					}
				}
			}
		} else {
			if (_v0.b.$ === 1) {
				var toX1 = _v0.a.a;
				var _v3 = _v0.b;
				var _v4 = _Utils_Tuple2(prevM, nextM);
				if (!_v4.b.$) {
					var next = _v4.b.a;
					return {
						l2: curr,
						rb: toX1(next),
						tz: toX1(curr)
					};
				} else {
					if (!_v4.a.$) {
						var prev = _v4.a.a;
						var _v5 = _v4.b;
						return {
							l2: curr,
							rb: toX1(curr) + (toX1(curr) - toX1(prev)),
							tz: toX1(curr)
						};
					} else {
						var _v6 = _v4.a;
						var _v7 = _v4.b;
						return {
							l2: curr,
							rb: toX1(curr) + 1,
							tz: toX1(curr)
						};
					}
				}
			} else {
				var toX1 = _v0.a.a;
				var toX2 = _v0.b.a;
				return {
					l2: curr,
					rb: toX2(curr),
					tz: toX1(curr)
				};
			}
		}
	});
var $terezka$elm_charts$Internal$Produce$toDefaultName = F2(
	function (ids, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			'Property #' + $elm$core$String$fromInt(ids.pJ + 1),
			name);
	});
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $terezka$elm_charts$Internal$Produce$tooltipRow = F3(
	function (color, title, text) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', color),
							A2($elm$html$Html$Attributes$style, 'padding', '0'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title + ':')
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
							A2($elm$html$Html$Attributes$style, 'padding', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(text)
						]))
				]));
	});
var $terezka$elm_charts$Internal$Produce$updateBorder = F2(
	function (defaultColor, product) {
		return _Utils_eq(product.iF, defaultColor) ? _Utils_update(
			product,
			{iF: product.qF}) : product;
	});
var $terezka$elm_charts$Internal$Produce$updateColorIfGradientIsSet = F2(
	function (defaultColor, product) {
		var _v0 = product.i1;
		if (((!_v0.$) && (_v0.a.$ === 2)) && _v0.a.a.b) {
			var _v1 = _v0.a.a;
			var first = _v1.a;
			return _Utils_eq(product.qF, defaultColor) ? _Utils_update(
				product,
				{qF: first}) : product;
		} else {
			return product;
		}
	});
var $terezka$elm_charts$Internal$Helpers$withFirst = F2(
	function (xs, func) {
		if (xs.b) {
			var x = xs.a;
			var rest = xs.b;
			return $elm$core$Maybe$Just(
				A2(func, x, rest));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$elm_charts$Internal$Helpers$withSurround = F2(
	function (all, func) {
		var fold = F4(
			function (index, prev, acc, list) {
				fold:
				while (true) {
					if (list.b) {
						if (list.b.b) {
							var a = list.a;
							var _v1 = list.b;
							var b = _v1.a;
							var rest = _v1.b;
							var $temp$index = index + 1,
								$temp$prev = $elm$core$Maybe$Just(a),
								$temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(
										func,
										index,
										prev,
										a,
										$elm$core$Maybe$Just(b))
									])),
								$temp$list = A2($elm$core$List$cons, b, rest);
							index = $temp$index;
							prev = $temp$prev;
							acc = $temp$acc;
							list = $temp$list;
							continue fold;
						} else {
							var a = list.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(func, index, prev, a, $elm$core$Maybe$Nothing)
									]));
						}
					} else {
						return acc;
					}
				}
			});
		return A4(fold, 0, $elm$core$Maybe$Nothing, _List_Nil, all);
	});
var $terezka$elm_charts$Internal$Produce$toBarSeries = F4(
	function (elementIndex, barsAttrs, properties, data) {
		var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, barsAttrs, $terezka$elm_charts$Internal$Produce$defaultBars);
		var numOfStacks = barsConfig.rq ? $elm$core$List$length(properties) : 1;
		var forEachDataPoint = F7(
			function (absoluteIndex, stackSeriesConfigIndex, barSeriesConfigIndex, numOfBarsInStack, barSeriesConfig, dataIndex, bin) {
				var ySum = barSeriesConfig.gh(bin.l2);
				var y = barSeriesConfig.id(bin.l2);
				var start = bin.tz;
				var minY = (numOfBarsInStack > 1) ? $elm$core$Basics$max(0) : $elm$core$Basics$identity;
				var y1 = minY(
					A2($elm$core$Maybe$withDefault, 0, ySum) - A2($elm$core$Maybe$withDefault, 0, y));
				var y2 = minY(
					A2($elm$core$Maybe$withDefault, 0, ySum));
				var isSingle = numOfBarsInStack === 1;
				var identification = {pJ: absoluteIndex, l1: dataIndex, q7: elementIndex, tp: barSeriesConfigIndex, ty: stackSeriesConfigIndex};
				var isBottom = _Utils_eq(identification.tp, numOfBarsInStack - 1);
				var roundBottom = (isSingle || isBottom) ? barsConfig.s8 : 0;
				var isTop = !identification.tp;
				var roundTop = (isSingle || isTop) ? barsConfig.s9 : 0;
				var end = bin.rb;
				var length = end - start;
				var margin = length * barsConfig.dq;
				var spacing = length * barsConfig.tv;
				var width = ((length - (margin * 2)) - ((numOfStacks - 1) * spacing)) / numOfStacks;
				var offset = barsConfig.rq ? ((identification.ty * width) + (identification.ty * spacing)) : 0;
				var x1 = (start + margin) + offset;
				var x2 = ((start + margin) + offset) + width;
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(identification.pJ);
				var basicAttributes = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$roundTop(roundTop),
						$terezka$elm_charts$Chart$Attributes$roundBottom(roundBottom),
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$border(defaultColor)
					]);
				var barPresentationConfig = A2(
					$terezka$elm_charts$Internal$Produce$updateBorder,
					defaultColor,
					A2(
						$terezka$elm_charts$Internal$Produce$updateColorIfGradientIsSet,
						defaultColor,
						A2(
							$terezka$elm_charts$Internal$Helpers$apply,
							_Utils_ap(
								basicAttributes,
								_Utils_ap(
									barSeriesConfig.sQ,
									A2(barSeriesConfig.pu, identification, bin.l2))),
							$terezka$elm_charts$Internal$Svg$defaultBar)));
				return A2(
					$terezka$elm_charts$Internal$Item$Rendered,
					{
						qF: barPresentationConfig.qF,
						l2: bin.l2,
						rz: identification,
						rQ: !_Utils_eq(y, $elm$core$Maybe$Nothing),
						bn: barSeriesConfig.pd,
						sQ: barPresentationConfig,
						uh: $terezka$elm_charts$Internal$Item$Bar,
						uq: barSeriesConfig.uq(bin.l2),
						uG: start,
						uH: end,
						uL: A2($elm$core$Maybe$withDefault, 0, y)
					},
					{
						at: {
							uG: x1,
							uH: x2,
							uM: A2($elm$core$Basics$min, y1, y2),
							uN: A2($elm$core$Basics$max, y1, y2)
						},
						ot: F2(
							function (plane, position) {
								return A3($terezka$elm_charts$Internal$Svg$bar, plane, barPresentationConfig, position);
							}),
						ul: function (_v5) {
							return {uG: x1, uH: x2, uM: y1, uN: y2};
						},
						up: function (_v6) {
							return _List_fromArray(
								[
									A3(
									$terezka$elm_charts$Internal$Produce$tooltipRow,
									barPresentationConfig.qF,
									A2($terezka$elm_charts$Internal$Produce$toDefaultName, identification, barSeriesConfig.pd),
									barSeriesConfig.uq(bin.l2))
								]);
						}
					});
			});
		var forEachBarSeriesConfig = F6(
			function (bins, absoluteIndex, stackSeriesConfigIndex, numOfBarsInStack, barSeriesConfigIndex, barSeriesConfig) {
				var absoluteIndexNew = absoluteIndex + barSeriesConfigIndex;
				var items = A2(
					$elm$core$List$indexedMap,
					A5(forEachDataPoint, absoluteIndexNew, stackSeriesConfigIndex, barSeriesConfigIndex, numOfBarsInStack, barSeriesConfig),
					bins);
				return A2(
					$terezka$elm_charts$Internal$Helpers$withFirst,
					items,
					F2(
						function (first, rest) {
							return A2(
								$terezka$elm_charts$Internal$Item$Rendered,
								_Utils_Tuple2(first, rest),
								{
									at: A2($terezka$elm_charts$Internal$Coordinates$foldPosition, $terezka$elm_charts$Internal$Item$getLimits, items),
									ot: F2(
										function (plane, _v3) {
											return A2(
												$elm$svg$Svg$g,
												_List_fromArray(
													[
														$elm$svg$Svg$Attributes$class('elm-charts__series')
													]),
												A2(
													$elm$core$List$map,
													$terezka$elm_charts$Internal$Item$render(plane),
													items));
										}),
									ul: function (plane) {
										return A2(
											$terezka$elm_charts$Internal$Coordinates$foldPosition,
											$terezka$elm_charts$Internal$Item$getPosition(plane),
											items);
									},
									up: function (_v4) {
										return _List_fromArray(
											[
												A2(
												$elm$html$Html$table,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin', '0')
													]),
												A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Item$tooltip, items))
											]);
									}
								});
						}));
			});
		var forEachStackSeriesConfig = F3(
			function (bins, stackSeriesConfig, _v2) {
				var absoluteIndex = _v2.a;
				var stackSeriesConfigIndex = _v2.b;
				var items = _v2.c;
				var seriesItems = function () {
					if (!stackSeriesConfig.$) {
						var barSeriesConfig = stackSeriesConfig.a;
						return _List_fromArray(
							[
								A6(forEachBarSeriesConfig, bins, absoluteIndex, stackSeriesConfigIndex, 1, 0, barSeriesConfig)
							]);
					} else {
						var barSeriesConfigs = stackSeriesConfig.a;
						var numOfBarsInStack = $elm$core$List$length(barSeriesConfigs);
						return A2(
							$elm$core$List$indexedMap,
							A4(forEachBarSeriesConfig, bins, absoluteIndex, stackSeriesConfigIndex, numOfBarsInStack),
							barSeriesConfigs);
					}
				}();
				return _Utils_Tuple3(
					absoluteIndex + $elm$core$List$length(seriesItems),
					stackSeriesConfigIndex + 1,
					_Utils_ap(
						items,
						A2($elm$core$List$filterMap, $elm$core$Basics$identity, seriesItems)));
			});
		return function (bins) {
			return function (_v0) {
				var items = _v0.c;
				return items;
			}(
				A3(
					$elm$core$List$foldl,
					forEachStackSeriesConfig(bins),
					_Utils_Tuple3(elementIndex, 0, _List_Nil),
					properties));
		}(
			A2(
				$terezka$elm_charts$Internal$Helpers$withSurround,
				data,
				$terezka$elm_charts$Internal$Produce$toBin(barsConfig)));
	});
var $terezka$elm_charts$Chart$barsMap = F4(
	function (mapData, edits, properties, data) {
		return $terezka$elm_charts$Chart$Indexed(
			function (index) {
				var legends_ = A3($terezka$elm_charts$Internal$Legend$toBarLegends, index, edits, properties);
				var items = A4($terezka$elm_charts$Internal$Produce$toBarSeries, index, edits, properties, data);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$elm_charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Many$generalize, items));
				var bins = A2($terezka$elm_charts$Chart$Item$apply, $terezka$elm_charts$Chart$Item$bins, generalized);
				var toLimits = A2($elm$core$List$map, $terezka$elm_charts$Internal$Item$getLimits, bins);
				var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Produce$defaultBars);
				var toTicks = F2(
					function (plane, acc) {
						return _Utils_update(
							acc,
							{
								aZ: _Utils_ap(
									acc.aZ,
									barsConfig.rp ? A2(
										$elm$core$List$concatMap,
										A2(
											$elm$core$Basics$composeR,
											$terezka$elm_charts$Chart$Item$getLimits,
											function (pos) {
												return _List_fromArray(
													[pos.uG, pos.uH]);
											}),
										bins) : _List_Nil)
							});
					});
				return _Utils_Tuple2(
					A5(
						$terezka$elm_charts$Chart$BarsElement,
						toLimits,
						generalized,
						legends_,
						toTicks,
						function (plane) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$elm_charts$Internal$Item$render(plane),
										items)));
						}),
					index + $elm$core$List$length(items));
			});
	});
var $terezka$elm_charts$Chart$bars = F3(
	function (edits, properties, data) {
		return A4($terezka$elm_charts$Chart$barsMap, $elm$core$Basics$identity, edits, properties, data);
	});
var $terezka$elm_charts$Chart$Attributes$blue = $terezka$elm_charts$Internal$Helpers$blue;
var $terezka$elm_charts$Internal$Svg$Event = F2(
	function (name, handler) {
		return {mJ: handler, bn: name};
	});
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $K_Adam$elm_dom$DOM$offsetHeight = A2($elm$json$Json$Decode$field, 'offsetHeight', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$offsetWidth = A2($elm$json$Json$Decode$field, 'offsetWidth', $elm$json$Json$Decode$float);
var $elm$json$Json$Decode$map4 = _Json_map4;
var $K_Adam$elm_dom$DOM$offsetLeft = A2($elm$json$Json$Decode$field, 'offsetLeft', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'offsetParent',
					$elm$json$Json$Decode$null(x)),
					A2($elm$json$Json$Decode$field, 'offsetParent', decoder)
				]));
	});
var $K_Adam$elm_dom$DOM$offsetTop = A2($elm$json$Json$Decode$field, 'offsetTop', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$scrollLeft = A2($elm$json$Json$Decode$field, 'scrollLeft', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$scrollTop = A2($elm$json$Json$Decode$field, 'scrollTop', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				var x_ = _v0.a;
				var y_ = _v0.b;
				return A2(
					$K_Adam$elm_dom$DOM$offsetParent,
					_Utils_Tuple2(x_, y_),
					A2($K_Adam$elm_dom$DOM$position, x_, y_));
			},
			A5(
				$elm$json$Json$Decode$map4,
				F4(
					function (scrollLeftP, scrollTopP, offsetLeftP, offsetTopP) {
						return _Utils_Tuple2((x + offsetLeftP) - scrollLeftP, (y + offsetTopP) - scrollTopP);
					}),
				$K_Adam$elm_dom$DOM$scrollLeft,
				$K_Adam$elm_dom$DOM$scrollTop,
				$K_Adam$elm_dom$DOM$offsetLeft,
				$K_Adam$elm_dom$DOM$offsetTop));
	});
var $K_Adam$elm_dom$DOM$boundingClientRect = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (_v0, width, height) {
			var x = _v0.a;
			var y = _v0.b;
			return {mL: height, jG: x, k2: y, uE: width};
		}),
	A2($K_Adam$elm_dom$DOM$position, 0, 0),
	$K_Adam$elm_dom$DOM$offsetWidth,
	$K_Adam$elm_dom$DOM$offsetHeight);
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(0));
};
var $K_Adam$elm_dom$DOM$parentElement = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'parentElement', decoder);
};
function $terezka$elm_charts$Internal$Svg$cyclic$decodePosition() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$K_Adam$elm_dom$DOM$boundingClientRect,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $K_Adam$elm_dom$DOM$parentElement(
						$terezka$elm_charts$Internal$Svg$cyclic$decodePosition());
				})
			]));
}
var $terezka$elm_charts$Internal$Svg$decodePosition = $terezka$elm_charts$Internal$Svg$cyclic$decodePosition();
$terezka$elm_charts$Internal$Svg$cyclic$decodePosition = function () {
	return $terezka$elm_charts$Internal$Svg$decodePosition;
};
var $terezka$elm_charts$Internal$Coordinates$toCartesianX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, value - plane.be.r4) + plane.be.jX;
	});
var $terezka$elm_charts$Internal$Coordinates$toCartesianY = F2(
	function (plane, value) {
		return ($terezka$elm_charts$Internal$Coordinates$range(plane.uL) - A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, value - plane.uL.r4)) + plane.uL.jX;
	});
var $terezka$elm_charts$Internal$Svg$fromSvg = F2(
	function (plane, point) {
		return {
			be: A2($terezka$elm_charts$Internal$Coordinates$toCartesianX, plane, point.be),
			uL: A2($terezka$elm_charts$Internal$Coordinates$toCartesianY, plane, point.uL)
		};
	});
var $K_Adam$elm_dom$DOM$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $terezka$elm_charts$Internal$Svg$decoder = F2(
	function (plane, toMsg) {
		var handle = F3(
			function (mouseX, mouseY, box) {
				var yPrev = plane.uL;
				var xPrev = plane.be;
				var widthPercent = box.uE / plane.be.np;
				var heightPercent = box.mL / plane.uL.np;
				var newPlane = _Utils_update(
					plane,
					{
						be: _Utils_update(
							xPrev,
							{np: box.uE, r3: plane.be.r3 * widthPercent, r4: plane.be.r4 * widthPercent}),
						uL: _Utils_update(
							yPrev,
							{np: box.mL, r3: plane.uL.r3 * heightPercent, r4: plane.uL.r4 * heightPercent})
					});
				var searched = A2(
					$terezka$elm_charts$Internal$Svg$fromSvg,
					newPlane,
					{be: mouseX - box.jG, uL: mouseY - box.k2});
				return A2(toMsg, newPlane, searched);
			});
		return A4(
			$elm$json$Json$Decode$map3,
			handle,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			$K_Adam$elm_dom$DOM$target($terezka$elm_charts$Internal$Svg$decodePosition));
	});
var $elm$svg$Svg$Events$on = $elm$html$Html$Events$on;
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $terezka$elm_charts$Internal$Svg$container = F5(
	function (plane, config, below, chartEls, above) {
		var toEvent = function (event) {
			return A2(
				$elm$svg$Svg$Events$on,
				event.bn,
				A2($terezka$elm_charts$Internal$Svg$decoder, plane, event.mJ));
		};
		var svgAttrsSize = config.hP ? _List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(
				'0 0 ' + ($elm$core$String$fromFloat(plane.be.np) + (' ' + $elm$core$String$fromFloat(plane.uL.np)))),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]) : _List_fromArray(
			[
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(plane.be.np)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(plane.uL.np)),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]);
		var htmlAttrsSize = config.hP ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%')
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(plane.be.np) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(plane.uL.np) + 'px')
			]);
		var htmlAttrsDef = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__container-inner')
			]);
		var htmlAttrs = _Utils_ap(
			config.hf,
			_Utils_ap(htmlAttrsDef, htmlAttrsSize));
		var chartPosition = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$x(
				$elm$core$String$fromFloat(plane.be.r4)),
				$elm$svg$Svg$Attributes$y(
				$elm$core$String$fromFloat(plane.uL.r4)),
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerWidth(plane))),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerHeight(plane))),
				$elm$svg$Svg$Attributes$fill('transparent')
			]);
		var clipPathDefs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id(
							$terezka$elm_charts$Internal$Coordinates$toId(plane))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$rect, chartPosition, _List_Nil)
						]))
				]));
		var catcher = A2(
			$elm$svg$Svg$rect,
			_Utils_ap(
				chartPosition,
				A2($elm$core$List$map, toEvent, config.rc)),
			_List_Nil);
		var chart = A2(
			$elm$svg$Svg$svg,
			_Utils_ap(svgAttrsSize, config.ly),
			_Utils_ap(
				_List_fromArray(
					[clipPathDefs]),
				_Utils_ap(
					chartEls,
					_List_fromArray(
						[catcher]))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('elm-charts__container'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					htmlAttrs,
					_Utils_ap(
						below,
						_Utils_ap(
							_List_fromArray(
								[chart]),
							above)))
				]));
	});
var $terezka$elm_charts$Chart$Attributes$lowest = F2(
	function (v, edit) {
		return function (b) {
			return _Utils_update(
				b,
				{
					jX: A3(edit, v, b.jX, b.qT)
				});
		};
	});
var $terezka$elm_charts$Chart$Attributes$orLower = F3(
	function (least, real, _v0) {
		return (_Utils_cmp(real, least) > 0) ? least : real;
	});
var $terezka$elm_charts$Chart$definePlane = F2(
	function (config, elements) {
		var width = A2($elm$core$Basics$max, 1, (config.uE - config.n4.jG) - config.n4.kC);
		var toLimit = F5(
			function (length, marginMin, marginMax, min, max) {
				return {qS: max, qT: min, np: length, r3: marginMax, r4: marginMin, jT: max, jX: min};
			});
		var height = A2($elm$core$Basics$max, 1, (config.mL - config.n4.iG) - config.n4.k2);
		var fixSingles = function (bs) {
			return _Utils_eq(bs.jX, bs.jT) ? _Utils_update(
				bs,
				{jT: bs.jX + 10}) : bs;
		};
		var collectLimits = F2(
			function (el, acc) {
				switch (el.$) {
					case 0:
						return acc;
					case 1:
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 2:
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 3:
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[
									$terezka$elm_charts$Internal$Item$getLimits(item)
								]));
					case 4:
						return acc;
					case 5:
						return acc;
					case 6:
						return acc;
					case 7:
						return acc;
					case 8:
						return acc;
					case 9:
						return acc;
					case 10:
						return acc;
					case 11:
						var subs = el.a;
						return A3($elm$core$List$foldl, collectLimits, acc, subs);
					case 12:
						return acc;
					default:
						return acc;
				}
			});
		var limits_ = function (pos) {
			return function (_v3) {
				var x = _v3.be;
				var y = _v3.uL;
				return {
					be: fixSingles(x),
					uL: fixSingles(y)
				};
			}(
				{
					be: A5(toLimit, width, config.dq.jG, config.dq.kC, pos.uG, pos.uH),
					uL: A5(toLimit, height, config.dq.k2, config.dq.iG, pos.uM, pos.uN)
				});
		}(
			A2(
				$terezka$elm_charts$Internal$Coordinates$foldPosition,
				$elm$core$Basics$identity,
				A3($elm$core$List$foldl, collectLimits, _List_Nil, elements)));
		var calcRange = function () {
			var _v2 = config.kv;
			if (!_v2.b) {
				return limits_.be;
			} else {
				var some = _v2;
				return A2($terezka$elm_charts$Internal$Helpers$apply, some, limits_.be);
			}
		}();
		var calcDomain = function () {
			var _v1 = config.i5;
			if (!_v1.b) {
				return A2(
					$terezka$elm_charts$Internal$Helpers$apply,
					_List_fromArray(
						[
							A2($terezka$elm_charts$Chart$Attributes$lowest, 0, $terezka$elm_charts$Chart$Attributes$orLower)
						]),
					limits_.uL);
			} else {
				var some = _v1;
				return A2($terezka$elm_charts$Internal$Helpers$apply, some, limits_.uL);
			}
		}();
		var unpadded = {be: calcRange, uL: calcDomain};
		var scalePadX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX(unpadded);
		var xMax = calcRange.jT + scalePadX(config.n4.kC);
		var xMin = calcRange.jX - scalePadX(config.n4.jG);
		var scalePadY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY(unpadded);
		var yMax = calcDomain.jT + scalePadY(config.n4.k2);
		var yMin = calcDomain.jX - scalePadY(config.n4.iG);
		return {
			be: _Utils_update(
				calcRange,
				{
					np: config.uE,
					jT: A2($elm$core$Basics$max, xMin, xMax),
					jX: A2($elm$core$Basics$min, xMin, xMax)
				}),
			uL: _Utils_update(
				calcDomain,
				{
					np: config.mL,
					jT: A2($elm$core$Basics$max, yMin, yMax),
					jX: A2($elm$core$Basics$min, yMin, yMax)
				})
		};
	});
var $terezka$elm_charts$Chart$getItems = F2(
	function (plane, elements) {
		var toItems = F2(
			function (el, acc) {
				switch (el.$) {
					case 0:
						return acc;
					case 1:
						var items = el.b;
						return _Utils_ap(acc, items);
					case 2:
						var items = el.b;
						return _Utils_ap(acc, items);
					case 3:
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[item]));
					case 4:
						var func = el.a;
						return acc;
					case 5:
						return acc;
					case 6:
						return acc;
					case 7:
						return acc;
					case 8:
						return acc;
					case 9:
						return acc;
					case 10:
						return acc;
					case 11:
						var subs = el.a;
						return A3($elm$core$List$foldl, toItems, acc, subs);
					case 12:
						return acc;
					default:
						return acc;
				}
			});
		return A3($elm$core$List$foldl, toItems, _List_Nil, elements);
	});
var $terezka$elm_charts$Chart$getLegends = function (elements) {
	var toLegends = F2(
		function (el, acc) {
			switch (el.$) {
				case 0:
					return acc;
				case 1:
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 2:
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 3:
					return acc;
				case 4:
					return acc;
				case 5:
					return acc;
				case 6:
					return acc;
				case 7:
					return acc;
				case 8:
					return acc;
				case 9:
					return acc;
				case 10:
					return acc;
				case 11:
					var subs = el.a;
					return A3($elm$core$List$foldl, toLegends, acc, subs);
				case 12:
					return acc;
				default:
					return acc;
			}
		});
	return A3($elm$core$List$foldl, toLegends, _List_Nil, elements);
};
var $terezka$elm_charts$Chart$TickValues = F4(
	function (xAxis, yAxis, xs, ys) {
		return {gu: xAxis, aZ: xs, gv: yAxis, dM: ys};
	});
var $terezka$elm_charts$Chart$getTickValues = F3(
	function (plane, items, elements) {
		var toValues = F2(
			function (el, acc) {
				switch (el.$) {
					case 0:
						return acc;
					case 1:
						return acc;
					case 2:
						var func = el.d;
						return A2(func, plane, acc);
					case 3:
						return acc;
					case 4:
						var func = el.a;
						return A2(func, plane, acc);
					case 5:
						var func = el.a;
						return A2(func, plane, acc);
					case 6:
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 7:
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 8:
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 10:
						var func = el.a;
						return A3(
							$elm$core$List$foldl,
							toValues,
							acc,
							A2(func, plane, items));
					case 9:
						return acc;
					case 11:
						var subs = el.a;
						return A3($elm$core$List$foldl, toValues, acc, subs);
					case 12:
						return acc;
					default:
						return acc;
				}
			});
		return A3(
			$elm$core$List$foldl,
			toValues,
			A4($terezka$elm_charts$Chart$TickValues, _List_Nil, _List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$GridElement = function (a) {
	return {$: 9, a: a};
};
var $terezka$elm_charts$Internal$Svg$Circle = 0;
var $terezka$elm_charts$Chart$Attributes$circle = function (config) {
	return _Utils_update(
		config,
		{
			eG: $elm$core$Maybe$Just(0)
		});
};
var $terezka$elm_charts$Internal$Helpers$darkGray = 'rgb(200 200 200)';
var $terezka$elm_charts$Chart$Attributes$dashed = function (value) {
	return function (config) {
		return _Utils_update(
			config,
			{gU: value});
	};
};
var $terezka$elm_charts$Internal$Svg$defaultDot = {iF: '', lJ: 0, qF: $terezka$elm_charts$Internal$Helpers$pink, T: false, eb: 0, ru: '', rv: 5, bO: 1, eG: $elm$core$Maybe$Nothing, eJ: 6};
var $terezka$elm_charts$Internal$Svg$isWithinPlane = F3(
	function (plane, x, y) {
		return _Utils_eq(
			A3($elm$core$Basics$clamp, plane.be.jX, plane.be.jT, x),
			x) && _Utils_eq(
			A3($elm$core$Basics$clamp, plane.uL.jX, plane.uL.jT, y),
			y);
	});
var $elm$core$Basics$pi = _Basics_pi;
var $terezka$elm_charts$Internal$Svg$plusPath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(area_ / 4) + off;
		var r6 = side / 2;
		var r3 = side;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_ - r6) + (' ' + $elm$core$String$fromFloat(((y_ - r3) - r6) + off))),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat(r3),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat(r3),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(-r3),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(-r3),
					'v' + $elm$core$String$fromFloat(r3 - off)
				]));
	});
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $elm$core$Basics$tan = _Basics_tan;
var $terezka$elm_charts$Internal$Svg$trianglePath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(
			(area_ * 4) / $elm$core$Basics$sqrt(3)) + (off * $elm$core$Basics$sqrt(3));
		var height = ($elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - (($elm$core$Basics$tan(
			$elm$core$Basics$degrees(30)) * side) / 2);
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_) + (' ' + $elm$core$String$fromFloat(y_ - fromMiddle))),
					'l' + ($elm$core$String$fromFloat((-side) / 2) + (' ' + $elm$core$String$fromFloat(height))),
					'h' + $elm$core$String$fromFloat(side),
					'z'
				]));
	});
var $terezka$elm_charts$Internal$Svg$dot = F5(
	function (plane, toX, toY, config, datum_) {
		var yOrg = toY(datum_);
		var y_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, yOrg);
		var xOrg = toX(datum_);
		var x_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, xOrg);
		var styleAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(
				(config.iF === '') ? config.qF : config.iF),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.lJ)),
				$elm$svg$Svg$Attributes$fillOpacity(
				$elm$core$String$fromFloat(config.bO)),
				$elm$svg$Svg$Attributes$fill(config.qF),
				$elm$svg$Svg$Attributes$class('elm-charts__dot'),
				config.T ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
			]);
		var showDot = A3($terezka$elm_charts$Internal$Svg$isWithinPlane, plane, xOrg, yOrg) || config.T;
		var highlightColor = (config.ru === '') ? config.qF : config.ru;
		var highlightAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(highlightColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.rv)),
				$elm$svg$Svg$Attributes$strokeOpacity(
				$elm$core$String$fromFloat(config.eb)),
				$elm$svg$Svg$Attributes$fill('transparent'),
				$elm$svg$Svg$Attributes$class('elm-charts__dot-highlight')
			]);
		var view = F3(
			function (toEl, highlightOff, toAttrs) {
				return (config.eb > 0) ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__dot-container')
						]),
					_List_fromArray(
						[
							A2(
							toEl,
							_Utils_ap(
								toAttrs(highlightOff),
								highlightAttrs),
							_List_Nil),
							A2(
							toEl,
							_Utils_ap(
								toAttrs(0),
								styleAttrs),
							_List_Nil)
						])) : A2(
					toEl,
					_Utils_ap(
						toAttrs(0),
						styleAttrs),
					_List_Nil);
			});
		var area_ = (2 * $elm$core$Basics$pi) * config.eJ;
		if (!showDot) {
			return $elm$svg$Svg$text('');
		} else {
			var _v0 = config.eG;
			if (_v0.$ === 1) {
				return $elm$svg$Svg$text('');
			} else {
				switch (_v0.a) {
					case 0:
						var _v1 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$circle,
							config.rv / 2,
							function (off) {
								var radius = $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(x_)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(y_)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(radius + off))
									]);
							});
					case 1:
						var _v2 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.rv,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$trianglePath, area_, off, x_, y_))
									]);
							});
					case 2:
						var _v3 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.rv,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff))
									]);
							});
					case 3:
						var _v4 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.rv,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					case 4:
						var _v5 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.rv,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					default:
						var _v6 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.rv,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_))
									]);
							});
				}
			}
		}
	});
var $terezka$elm_charts$Chart$Svg$dot = F4(
	function (plane, toX, toY, edits) {
		return A4(
			$terezka$elm_charts$Internal$Svg$dot,
			plane,
			toX,
			toY,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultDot));
	});
var $terezka$elm_charts$Internal$Helpers$gray = '#EFF2FA';
var $terezka$elm_charts$Internal$Svg$defaultLine = {ly: _List_Nil, qq: false, qF: 'rgb(210, 210, 210)', gU: _List_Nil, G: false, T: false, bO: 1, t9: -90, ua: 0, uE: 1, uG: $elm$core$Maybe$Nothing, uH: $elm$core$Maybe$Nothing, uI: $elm$core$Maybe$Nothing, M: 0, uM: $elm$core$Maybe$Nothing, uN: $elm$core$Maybe$Nothing, uO: $elm$core$Maybe$Nothing, N: 0};
var $elm$core$Basics$cos = _Basics_cos;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY;
var $elm$core$Basics$sin = _Basics_sin;
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $terezka$elm_charts$Internal$Svg$line = F2(
	function (plane, config) {
		var angle = $elm$core$Basics$degrees(config.t9);
		var _v0 = function () {
			var _v3 = _Utils_Tuple3(
				_Utils_Tuple2(config.uG, config.uH),
				_Utils_Tuple2(config.uM, config.uN),
				_Utils_Tuple2(config.uI, config.uO));
			if (!_v3.a.a.$) {
				if (!_v3.a.b.$) {
					if (_v3.b.a.$ === 1) {
						if (_v3.b.b.$ === 1) {
							var _v4 = _v3.a;
							var a = _v4.a.a;
							var b = _v4.b.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(plane.uL.jX, plane.uL.jX));
						} else {
							var _v38 = _v3.a;
							var a = _v38.a.a;
							var b = _v38.b.a;
							var _v39 = _v3.b;
							var _v40 = _v39.a;
							var c = _v39.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						}
					} else {
						if (_v3.b.b.$ === 1) {
							var _v41 = _v3.a;
							var a = _v41.a.a;
							var b = _v41.b.a;
							var _v42 = _v3.b;
							var c = _v42.a.a;
							var _v43 = _v42.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						} else {
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.be.jX, config.uG),
									A2($elm$core$Maybe$withDefault, plane.be.jT, config.uH)),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.uL.jX, config.uM),
									A2($elm$core$Maybe$withDefault, plane.uL.jT, config.uN)));
						}
					}
				} else {
					if (_v3.b.a.$ === 1) {
						if (_v3.b.b.$ === 1) {
							var _v8 = _v3.a;
							var a = _v8.a.a;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, a),
								_Utils_Tuple2(plane.uL.jX, plane.uL.jT));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v51 = _v3.a;
									var a = _v51.a.a;
									var _v52 = _v51.b;
									var _v53 = _v3.b;
									var _v54 = _v53.a;
									var b = _v53.b.a;
									var _v55 = _v3.c;
									var xOff = _v55.a.a;
									var yOff = _v55.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v56 = _v3.a;
									var a = _v56.a.a;
									var _v57 = _v56.b;
									var _v58 = _v3.b;
									var _v59 = _v58.a;
									var b = _v58.b.a;
									var _v60 = _v3.c;
									var xOff = _v60.a.a;
									var _v61 = _v60.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v44 = _v3.a;
									var a = _v44.a.a;
									var _v45 = _v44.b;
									var _v46 = _v3.b;
									var _v47 = _v46.a;
									var b = _v46.b.a;
									var _v48 = _v3.c;
									var _v49 = _v48.a;
									var _v50 = _v48.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.be.jT),
										_Utils_Tuple2(b, b));
								} else {
									var _v62 = _v3.a;
									var a = _v62.a.a;
									var _v63 = _v62.b;
									var _v64 = _v3.b;
									var _v65 = _v64.a;
									var b = _v64.b.a;
									var _v66 = _v3.c;
									var _v67 = _v66.a;
									var yOff = _v66.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (!_v3.b.b.$) {
							var _v35 = _v3.a;
							var c = _v35.a.a;
							var _v36 = _v35.b;
							var _v37 = _v3.b;
							var a = _v37.a.a;
							var b = _v37.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v75 = _v3.a;
									var a = _v75.a.a;
									var _v76 = _v75.b;
									var _v77 = _v3.b;
									var b = _v77.a.a;
									var _v78 = _v77.b;
									var _v79 = _v3.c;
									var xOff = _v79.a.a;
									var yOff = _v79.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v80 = _v3.a;
									var a = _v80.a.a;
									var _v81 = _v80.b;
									var _v82 = _v3.b;
									var b = _v82.a.a;
									var _v83 = _v82.b;
									var _v84 = _v3.c;
									var xOff = _v84.a.a;
									var _v85 = _v84.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v68 = _v3.a;
									var a = _v68.a.a;
									var _v69 = _v68.b;
									var _v70 = _v3.b;
									var b = _v70.a.a;
									var _v71 = _v70.b;
									var _v72 = _v3.c;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.be.jT),
										_Utils_Tuple2(b, b));
								} else {
									var _v86 = _v3.a;
									var a = _v86.a.a;
									var _v87 = _v86.b;
									var _v88 = _v3.b;
									var b = _v88.a.a;
									var _v89 = _v88.b;
									var _v90 = _v3.c;
									var _v91 = _v90.a;
									var yOff = _v90.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				}
			} else {
				if (!_v3.a.b.$) {
					if (_v3.b.a.$ === 1) {
						if (_v3.b.b.$ === 1) {
							var _v13 = _v3.a;
							var _v14 = _v13.a;
							var b = _v13.b.a;
							var _v15 = _v3.b;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(b, b),
								_Utils_Tuple2(plane.uL.jX, plane.uL.jT));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v99 = _v3.a;
									var _v100 = _v99.a;
									var a = _v99.b.a;
									var _v101 = _v3.b;
									var _v102 = _v101.a;
									var b = _v101.b.a;
									var _v103 = _v3.c;
									var xOff = _v103.a.a;
									var yOff = _v103.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v104 = _v3.a;
									var _v105 = _v104.a;
									var a = _v104.b.a;
									var _v106 = _v3.b;
									var _v107 = _v106.a;
									var b = _v106.b.a;
									var _v108 = _v3.c;
									var xOff = _v108.a.a;
									var _v109 = _v108.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v92 = _v3.a;
									var _v93 = _v92.a;
									var a = _v92.b.a;
									var _v94 = _v3.b;
									var _v95 = _v94.a;
									var b = _v94.b.a;
									var _v96 = _v3.c;
									var _v97 = _v96.a;
									var _v98 = _v96.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.be.jT),
										_Utils_Tuple2(b, b));
								} else {
									var _v110 = _v3.a;
									var _v111 = _v110.a;
									var a = _v110.b.a;
									var _v112 = _v3.b;
									var _v113 = _v112.a;
									var b = _v112.b.a;
									var _v114 = _v3.c;
									var _v115 = _v114.a;
									var yOff = _v114.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (!_v3.b.b.$) {
							var _v32 = _v3.a;
							var _v33 = _v32.a;
							var c = _v32.b.a;
							var _v34 = _v3.b;
							var a = _v34.a.a;
							var b = _v34.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (!_v3.c.a.$) {
								if (!_v3.c.b.$) {
									var _v123 = _v3.a;
									var _v124 = _v123.a;
									var a = _v123.b.a;
									var _v125 = _v3.b;
									var b = _v125.a.a;
									var _v126 = _v125.b;
									var _v127 = _v3.c;
									var xOff = _v127.a.a;
									var yOff = _v127.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v128 = _v3.a;
									var _v129 = _v128.a;
									var a = _v128.b.a;
									var _v130 = _v3.b;
									var b = _v130.a.a;
									var _v131 = _v130.b;
									var _v132 = _v3.c;
									var xOff = _v132.a.a;
									var _v133 = _v132.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 1) {
									var _v116 = _v3.a;
									var _v117 = _v116.a;
									var a = _v116.b.a;
									var _v118 = _v3.b;
									var b = _v118.a.a;
									var _v119 = _v118.b;
									var _v120 = _v3.c;
									var _v121 = _v120.a;
									var _v122 = _v120.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.be.jT),
										_Utils_Tuple2(b, b));
								} else {
									var _v134 = _v3.a;
									var _v135 = _v134.a;
									var a = _v134.b.a;
									var _v136 = _v3.b;
									var b = _v136.a.a;
									var _v137 = _v136.b;
									var _v138 = _v3.c;
									var _v139 = _v138.a;
									var yOff = _v138.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				} else {
					if (!_v3.b.a.$) {
						if (!_v3.b.b.$) {
							var _v18 = _v3.a;
							var _v19 = _v18.a;
							var _v20 = _v18.b;
							var _v21 = _v3.b;
							var a = _v21.a.a;
							var b = _v21.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.be.jX, plane.be.jX),
								_Utils_Tuple2(a, b));
						} else {
							var _v22 = _v3.a;
							var _v23 = _v22.a;
							var _v24 = _v22.b;
							var _v25 = _v3.b;
							var a = _v25.a.a;
							var _v26 = _v25.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.be.jX, plane.be.jT),
								_Utils_Tuple2(a, a));
						}
					} else {
						if (!_v3.b.b.$) {
							var _v27 = _v3.a;
							var _v28 = _v27.a;
							var _v29 = _v27.b;
							var _v30 = _v3.b;
							var _v31 = _v30.a;
							var b = _v30.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.be.jX, plane.be.jT),
								_Utils_Tuple2(b, b));
						} else {
							var _v140 = _v3.a;
							var _v141 = _v140.a;
							var _v142 = _v140.b;
							var _v143 = _v3.b;
							var _v144 = _v143.a;
							var _v145 = _v143.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.be.jX, plane.be.jT),
								_Utils_Tuple2(plane.uL.jX, plane.uL.jT));
						}
					}
				}
			}
		}();
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var x2 = _v1.b;
		var _v2 = _v0.b;
		var y1 = _v2.a;
		var y2 = _v2.b;
		var x1_ = x1 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.M);
		var x2_ = x2 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.M);
		var y1_ = y1 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.N);
		var y2_ = y2 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.N);
		var _v146 = (config.ua > 0) ? _Utils_Tuple2(
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianX,
				plane,
				$elm$core$Basics$cos(angle) * config.ua),
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianY,
				plane,
				$elm$core$Basics$sin(angle) * config.ua)) : _Utils_Tuple2(0, 0);
		var tickOffsetX = _v146.a;
		var tickOffsetY = _v146.b;
		var cmds = config.G ? _Utils_ap(
			(config.ua > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_ + tickOffsetX, y2_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_, y2_)
				]),
			_Utils_ap(
				config.qq ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y1_),
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]),
				(config.ua > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_ + tickOffsetX, y1_ + tickOffsetY)
					]) : _List_Nil)) : _Utils_ap(
			(config.ua > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_ + tickOffsetX, y1_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_, y1_)
				]),
			_Utils_ap(
				config.qq ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y2_),
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]),
				(config.ua > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_ + tickOffsetX, y2_ + tickOffsetY)
					]) : _List_Nil));
		return A4(
			$terezka$elm_charts$Internal$Svg$withAttrs,
			config.ly,
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__line'),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$elm$svg$Svg$Attributes$stroke(config.qF),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.uE)),
					$elm$svg$Svg$Attributes$strokeOpacity(
					$elm$core$String$fromFloat(config.bO)),
					$elm$svg$Svg$Attributes$strokeDasharray(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, config.gU))),
					$elm$svg$Svg$Attributes$d(
					A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
					config.T ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
				]),
			_List_Nil);
	});
var $terezka$elm_charts$Chart$Svg$line = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$line,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultLine));
	});
var $terezka$elm_charts$Chart$Attributes$size = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{eJ: v});
	};
};
var $terezka$elm_charts$Chart$Attributes$width = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{uE: v});
	};
};
var $terezka$elm_charts$Chart$Attributes$x1 = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{
				uG: $elm$core$Maybe$Just(v)
			});
	};
};
var $terezka$elm_charts$Chart$Attributes$y1 = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{
				uM: $elm$core$Maybe$Just(v)
			});
	};
};
var $terezka$elm_charts$Chart$grid = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{qF: '', gU: _List_Nil, fm: false, uE: 0});
	var width = (!config.uE) ? (config.fm ? 0.5 : 1) : config.uE;
	var color = $elm$core$String$isEmpty(config.qF) ? (config.fm ? $terezka$elm_charts$Internal$Helpers$darkGray : $terezka$elm_charts$Internal$Helpers$gray) : config.qF;
	var toDot = F4(
		function (vs, p, x, y) {
			return (A2($elm$core$List$member, x, vs.gu) || A2($elm$core$List$member, y, vs.gv)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A5(
					$terezka$elm_charts$Chart$Svg$dot,
					p,
					function ($) {
						return $.be;
					},
					function ($) {
						return $.uL;
					},
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$size(width),
							$terezka$elm_charts$Chart$Attributes$circle
						]),
					{be: x, uL: y}));
		});
	var toXGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.gu) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$x1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.gU)
						])));
		});
	var toYGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.gv) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$y1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.gU)
						])));
		});
	return $terezka$elm_charts$Chart$GridElement(
		F2(
			function (p, vs) {
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__grid')
						]),
					config.fm ? A2(
						$elm$core$List$concatMap,
						function (x) {
							return A2(
								$elm$core$List$filterMap,
								A3(toDot, vs, p, x),
								vs.dM);
						},
						vs.aZ) : _List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__x-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toXGrid, vs, p),
								vs.aZ)),
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__y-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toYGrid, vs, p),
								vs.dM))
						]));
			}));
};
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $terezka$elm_charts$Chart$viewElements = F6(
	function (config, plane, tickValues, allItems, allLegends, elements) {
		var viewOne = F2(
			function (el, _v0) {
				var before = _v0.a;
				var chart_ = _v0.b;
				var after = _v0.c;
				switch (el.$) {
					case 0:
						return _Utils_Tuple3(before, chart_, after);
					case 1:
						var view = el.d;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 2:
						var view = el.e;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 3:
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 4:
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 5:
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 6:
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 7:
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 8:
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 9:
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(view, plane, tickValues),
								chart_),
							after);
					case 10:
						var func = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							A2(func, plane, allItems));
					case 11:
						var els = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							els);
					case 12:
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					default:
						var view = el.a;
						return _Utils_Tuple3(
							($elm$core$List$length(chart_) > 0) ? A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								before) : before,
							chart_,
							($elm$core$List$length(chart_) > 0) ? after : A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								after));
				}
			});
		return A3(
			$elm$core$List$foldr,
			viewOne,
			_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$chart = F2(
	function (edits, unindexedElements) {
		var indexedElements = function () {
			var toIndexedEl = F2(
				function (el, _v4) {
					var acc = _v4.a;
					var index = _v4.b;
					switch (el.$) {
						case 0:
							var toElAndIndex = el.a;
							var _v6 = toElAndIndex(index);
							var newEl = _v6.a;
							var newIndex = _v6.b;
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[newEl])),
								newIndex);
						case 11:
							var els = el.a;
							return A3(
								$elm$core$List$foldl,
								toIndexedEl,
								_Utils_Tuple2(acc, index),
								els);
						default:
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[el])),
								index);
					}
				});
			return A3(
				$elm$core$List$foldl,
				toIndexedEl,
				_Utils_Tuple2(_List_Nil, 0),
				unindexedElements).a;
		}();
		var elements = function () {
			var isGrid = function (el) {
				if (el.$ === 9) {
					return true;
				} else {
					return false;
				}
			};
			return A2($elm$core$List$any, isGrid, indexedElements) ? indexedElements : A2(
				$elm$core$List$cons,
				$terezka$elm_charts$Chart$grid(_List_Nil),
				indexedElements);
		}();
		var legends_ = $terezka$elm_charts$Chart$getLegends(elements);
		var config = A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{
				ly: _List_fromArray(
					[
						$elm$svg$Svg$Attributes$style('overflow: visible;')
					]),
				i5: _List_Nil,
				rc: _List_Nil,
				mL: 300,
				hf: _List_Nil,
				dq: {iG: 0, jG: 0, kC: 0, k2: 0},
				n4: {iG: 0, jG: 0, kC: 0, k2: 0},
				kv: _List_Nil,
				hP: true,
				uE: 300
			});
		var plane = A2($terezka$elm_charts$Chart$definePlane, config, elements);
		var items = A2($terezka$elm_charts$Chart$getItems, plane, elements);
		var toEvent = function (_v2) {
			var event_ = _v2;
			var _v1 = event_.qV;
			var decoder = _v1;
			return A2(
				$terezka$elm_charts$Internal$Svg$Event,
				event_.bn,
				decoder(items));
		};
		var tickValues = A3($terezka$elm_charts$Chart$getTickValues, plane, items, elements);
		var _v0 = A6($terezka$elm_charts$Chart$viewElements, config, plane, tickValues, items, legends_, elements);
		var beforeEls = _v0.a;
		var chartEls = _v0.b;
		var afterEls = _v0.c;
		return A5(
			$terezka$elm_charts$Internal$Svg$container,
			plane,
			{
				ly: config.ly,
				rc: A2($elm$core$List$map, toEvent, config.rc),
				hf: config.hf,
				hP: config.hP
			},
			beforeEls,
			chartEls,
			afterEls);
	});
var $terezka$elm_charts$Chart$Attributes$domain = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{i5: v});
	};
};
var $terezka$elm_charts$Chart$Attributes$fontSize = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{
				mA: $elm$core$Maybe$Just(v)
			});
	};
};
var $terezka$elm_charts$Chart$Attributes$height = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{mL: v});
	};
};
var $terezka$elm_charts$Internal$Svg$Linear = 0;
var $terezka$elm_charts$Chart$Attributes$linear = function (config) {
	return _Utils_update(
		config,
		{
			r9: $elm$core$Maybe$Just(0)
		});
};
var $terezka$elm_charts$Chart$interpolated = F2(
	function (y, inter) {
		return A2(
			$terezka$elm_charts$Internal$Property$notStacked,
			A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
			_Utils_ap(
				_List_fromArray(
					[$terezka$elm_charts$Chart$Attributes$linear]),
				inter));
	});
var $terezka$elm_charts$Chart$HtmlElement = function (a) {
	return {$: 13, a: a};
};
var $terezka$elm_charts$Chart$none = $terezka$elm_charts$Chart$HtmlElement(
	F2(
		function (_v0, _v1) {
			return $elm$html$Html$text('');
		}));
var $terezka$elm_charts$Chart$Attributes$red = $terezka$elm_charts$Internal$Helpers$red;
var $jxxcarlson$elm_stat$Stat$covarianceHelp2 = F4(
	function (remaining, meanA, meanB, acc) {
		covarianceHelp2:
		while (true) {
			if (!remaining.b) {
				return acc;
			} else {
				var _v1 = remaining.a;
				var a = _v1.a;
				var b = _v1.b;
				var xs = remaining.b;
				var $temp$remaining = xs,
					$temp$meanA = meanA,
					$temp$meanB = meanB,
					$temp$acc = acc + ((a - meanA) * (b - meanB));
				remaining = $temp$remaining;
				meanA = $temp$meanA;
				meanB = $temp$meanB;
				acc = $temp$acc;
				continue covarianceHelp2;
			}
		}
	});
var $jxxcarlson$elm_stat$Stat$linearRegressionHelp = F5(
	function (remaining, squaredX, sumX, sumY, length) {
		linearRegressionHelp:
		while (true) {
			if (!remaining.b) {
				return {
					np: length,
					nH: sumX / length,
					nI: sumY / length,
					ps: (squaredX / length) - A2($elm$core$Basics$pow, sumX / length, 2)
				};
			} else {
				var _v1 = remaining.a;
				var a = _v1.a;
				var b = _v1.b;
				var xs = remaining.b;
				var $temp$remaining = xs,
					$temp$squaredX = squaredX + A2($elm$core$Basics$pow, a, 2),
					$temp$sumX = sumX + a,
					$temp$sumY = sumY + b,
					$temp$length = length + 1;
				remaining = $temp$remaining;
				squaredX = $temp$squaredX;
				sumX = $temp$sumX;
				sumY = $temp$sumY;
				length = $temp$length;
				continue linearRegressionHelp;
			}
		}
	});
var $jxxcarlson$elm_stat$Stat$linearRegression = function (tupleList) {
	if (tupleList.b && tupleList.b.b) {
		var _v1 = tupleList.a;
		var a = _v1.a;
		var b = _v1.b;
		var xs = tupleList.b;
		var _v2 = A5(
			$jxxcarlson$elm_stat$Stat$linearRegressionHelp,
			xs,
			A2($elm$core$Basics$pow, a, 2),
			a,
			b,
			1);
		var meanX = _v2.nH;
		var meanY = _v2.nI;
		var varX = _v2.ps;
		var length = _v2.np;
		var cov = A4($jxxcarlson$elm_stat$Stat$covarianceHelp2, xs, meanX, meanY, (a - meanX) * (b - meanY)) / length;
		return (!(!varX)) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(meanY - ((cov / varX) * meanX), cov / varX)) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$regressionLine = function (points) {
	var data = A2(
		$elm$core$List$map,
		function (_v2) {
			var x = _v2.be;
			var y = _v2.uL;
			return _Utils_Tuple2(x, y);
		},
		points);
	var _v0 = $jxxcarlson$elm_stat$Stat$linearRegression(data);
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var _v1 = _v0.a;
		var alpha = _v1.a;
		var beta = _v1.b;
		return $elm$core$Maybe$Just(
			function (x) {
				return alpha + (beta * x);
			});
	}
};
var $terezka$elm_charts$Chart$scatter = function (y) {
	return A2(
		$terezka$elm_charts$Internal$Property$notStacked,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$elm_charts$Chart$SeriesElement = F4(
	function (a, b, c, d) {
		return {$: 1, a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Legend$LineLegend = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $terezka$elm_charts$Internal$Svg$defaultInterpolation = {ly: _List_Nil, qF: $terezka$elm_charts$Internal$Helpers$pink, gU: _List_Nil, i1: $elm$core$Maybe$Nothing, r9: $elm$core$Maybe$Nothing, bO: 0, uE: 1};
var $terezka$elm_charts$Internal$Helpers$noChange = $elm$core$Basics$identity;
var $terezka$elm_charts$Chart$Attributes$opacity = function (v) {
	return function (config) {
		return _Utils_update(
			config,
			{bO: v});
	};
};
var $terezka$elm_charts$Internal$Legend$toDotLegends = F2(
	function (elIndex, properties) {
		var toInterConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultInterpolation);
		};
		var toDotLegend = F3(
			function (props, prop, colorIndex) {
				var defaultOpacity = ($elm$core$List$length(props) > 1) ? 0.4 : 0;
				var interAttr = _Utils_ap(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(
							$terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex)),
							$terezka$elm_charts$Chart$Attributes$opacity(defaultOpacity)
						]),
					prop.m4);
				var interConfig = toInterConfig(interAttr);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(interConfig.qF),
						$terezka$elm_charts$Chart$Attributes$border(interConfig.qF),
						_Utils_eq(interConfig.r9, $elm$core$Maybe$Nothing) ? $terezka$elm_charts$Chart$Attributes$circle : $terezka$elm_charts$Internal$Helpers$noChange
					]);
				var dotAttrs = _Utils_ap(defaultAttrs, prop.sQ);
				return A3(
					$terezka$elm_charts$Internal$Legend$LineLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.pd),
					interAttr,
					dotAttrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (propIndex, f) {
					return f(elIndex + propIndex);
				}),
			A2(
				$elm$core$List$concatMap,
				function (ps) {
					return A2(
						$elm$core$List$map,
						toDotLegend(ps),
						ps);
				},
				A2($elm$core$List$map, $terezka$elm_charts$Internal$Property$toConfigs, properties)));
	});
var $terezka$elm_charts$Internal$Item$Dot = function (a) {
	return {$: 0, a: a};
};
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $terezka$elm_charts$Internal$Interpolation$linear = $elm$core$List$map(
	$elm$core$List$map(
		function (_v0) {
			var x = _v0.be;
			var y = _v0.uL;
			return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
		}));
var $terezka$elm_charts$Internal$Interpolation$First = {$: 0};
var $terezka$elm_charts$Internal$Interpolation$Previous = function (a) {
	return {$: 1, a: a};
};
var $terezka$elm_charts$Internal$Interpolation$monotoneCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.be - point0.be) / 3;
		return A6($terezka$elm_charts$Internal$Commands$CubicBeziers, point0.be + dx, point0.uL + (dx * tangent0), point1.be - dx, point1.uL - (dx * tangent1), point1.be, point1.uL);
	});
var $terezka$elm_charts$Internal$Interpolation$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.be - point0.be;
		return (!(!h)) ? ((((3 * (point1.uL - point0.uL)) / h) - t) / 2) : t;
	});
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $terezka$elm_charts$Internal$Interpolation$sign = function (x) {
	return (x < 0) ? (-1) : 1;
};
var $terezka$elm_charts$Internal$Interpolation$toH = F2(
	function (h0, h1) {
		return (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;
	});
var $terezka$elm_charts$Internal$Interpolation$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.be - point1.be;
		var h0 = point1.be - point0.be;
		var s0h = A2($terezka$elm_charts$Internal$Interpolation$toH, h0, h1);
		var s0 = (point1.uL - point0.uL) / s0h;
		var s1h = A2($terezka$elm_charts$Internal$Interpolation$toH, h1, h0);
		var s1 = (point2.uL - point1.uL) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = ($terezka$elm_charts$Internal$Interpolation$sign(s0) + $terezka$elm_charts$Internal$Interpolation$sign(s1)) * A2(
			$elm$core$Basics$min,
			A2(
				$elm$core$Basics$min,
				$elm$core$Basics$abs(s0),
				$elm$core$Basics$abs(s1)),
			0.5 * $elm$core$Basics$abs(p));
		return $elm$core$Basics$isNaN(slope) ? 0 : slope;
	});
var $terezka$elm_charts$Internal$Interpolation$monotonePart = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var commands = _v0.b;
		var _v1 = _Utils_Tuple2(tangent, points);
		_v1$4:
		while (true) {
			if (!_v1.a.$) {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var _v2 = _v1.a;
						var _v3 = _v1.b;
						var p0 = _v3.a;
						var _v4 = _v3.b;
						var p1 = _v4.a;
						var _v5 = _v4.b;
						var p2 = _v5.a;
						var rest = _v5.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						var t0 = A3($terezka$elm_charts$Internal$Interpolation$slope2, p0, p1, t1);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var _v9 = _v1.a;
						var _v10 = _v1.b;
						var p0 = _v10.a;
						var _v11 = _v10.b;
						var p1 = _v11.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.be, p1.uL)
									])));
					}
				} else {
					break _v1$4;
				}
			} else {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var t0 = _v1.a.a;
						var _v6 = _v1.b;
						var p0 = _v6.a;
						var _v7 = _v6.b;
						var p1 = _v7.a;
						var _v8 = _v7.b;
						var p2 = _v8.a;
						var rest = _v8.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var t0 = _v1.a.a;
						var _v12 = _v1.b;
						var p0 = _v12.a;
						var _v13 = _v12.b;
						var p1 = _v13.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.be, p1.uL)
									])));
					}
				} else {
					break _v1$4;
				}
			}
		}
		return _Utils_Tuple2(tangent, commands);
	});
var $terezka$elm_charts$Internal$Interpolation$monotoneSection = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var acc = _v0.b;
		var _v1 = function () {
			if (points.b) {
				var p0 = points.a;
				var rest = points.b;
				return A2(
					$terezka$elm_charts$Internal$Interpolation$monotonePart,
					A2($elm$core$List$cons, p0, rest),
					_Utils_Tuple2(
						tangent,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, p0.be, p0.uL)
							])));
			} else {
				return _Utils_Tuple2(tangent, _List_Nil);
			}
		}();
		var t0 = _v1.a;
		var commands = _v1.b;
		return _Utils_Tuple2(
			t0,
			A2($elm$core$List$cons, commands, acc));
	});
var $terezka$elm_charts$Internal$Interpolation$monotone = function (sections) {
	return A3(
		$elm$core$List$foldr,
		$terezka$elm_charts$Internal$Interpolation$monotoneSection,
		_Utils_Tuple2($terezka$elm_charts$Internal$Interpolation$First, _List_Nil),
		sections).b;
};
var $terezka$elm_charts$Internal$Interpolation$Point = F2(
	function (x, y) {
		return {be: x, uL: y};
	});
var $terezka$elm_charts$Internal$Interpolation$after = F2(
	function (a, b) {
		return _List_fromArray(
			[
				a,
				A2($terezka$elm_charts$Internal$Interpolation$Point, b.be, a.uL),
				b
			]);
	});
var $terezka$elm_charts$Internal$Interpolation$stepped = function (sections) {
	var expand = F2(
		function (result, section) {
			expand:
			while (true) {
				if (section.b) {
					if (section.b.b) {
						var a = section.a;
						var _v1 = section.b;
						var b = _v1.a;
						var rest = _v1.b;
						var $temp$result = _Utils_ap(
							result,
							A2($terezka$elm_charts$Internal$Interpolation$after, a, b)),
							$temp$section = A2($elm$core$List$cons, b, rest);
						result = $temp$result;
						section = $temp$section;
						continue expand;
					} else {
						var last = section.a;
						return result;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			expand(_List_Nil),
			$elm$core$List$map(
				function (_v2) {
					var x = _v2.be;
					var y = _v2.uL;
					return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
				})),
		sections);
};
var $terezka$elm_charts$Internal$Svg$last = function (list) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$drop,
			$elm$core$List$length(list) - 1,
			list));
};
var $terezka$elm_charts$Internal$Svg$withBorder = F2(
	function (stuff, func) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return $elm$core$Maybe$Just(
				A2(
					func,
					first,
					A2(
						$elm$core$Maybe$withDefault,
						first,
						$terezka$elm_charts$Internal$Svg$last(rest))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$elm_charts$Internal$Svg$toCommands = F4(
	function (method, toX, toY, data) {
		var toSets = F2(
			function (ps, cmds) {
				return A2(
					$terezka$elm_charts$Internal$Svg$withBorder,
					ps,
					F2(
						function (first, last_) {
							return _Utils_Tuple3(first, cmds, last_);
						}));
			});
		var fold = F2(
			function (datum_, acc) {
				var _v1 = toY(datum_);
				if (!_v1.$) {
					var y_ = _v1.a;
					if (acc.b) {
						var latest = acc.a;
						var rest = acc.b;
						return A2(
							$elm$core$List$cons,
							_Utils_ap(
								latest,
								_List_fromArray(
									[
										{
										be: toX(datum_),
										uL: y_
									}
									])),
							rest);
					} else {
						return A2(
							$elm$core$List$cons,
							_List_fromArray(
								[
									{
									be: toX(datum_),
									uL: y_
								}
								]),
							acc);
					}
				} else {
					return A2($elm$core$List$cons, _List_Nil, acc);
				}
			});
		var points = $elm$core$List$reverse(
			A3($elm$core$List$foldl, fold, _List_Nil, data));
		var commands = function () {
			switch (method) {
				case 0:
					return $terezka$elm_charts$Internal$Interpolation$linear(points);
				case 1:
					return $terezka$elm_charts$Internal$Interpolation$monotone(points);
				default:
					return $terezka$elm_charts$Internal$Interpolation$stepped(points);
			}
		}();
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3($elm$core$List$map2, toSets, points, commands));
	});
var $terezka$elm_charts$Internal$Svg$area = F6(
	function (plane, toX, toY2M, toY, config, data) {
		var _v0 = function () {
			var _v1 = config.i1;
			if (_v1.$ === 1) {
				return _Utils_Tuple2(
					$elm$svg$Svg$text(''),
					config.qF);
			} else {
				var design = _v1.a;
				return A2($terezka$elm_charts$Internal$Svg$toPattern, config.qF, design);
			}
		}();
		var patternDefs = _v0.a;
		var fill = _v0.b;
		var view = function (cmds) {
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.ly,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__area-section'),
						$elm$svg$Svg$Attributes$fill(fill),
						$elm$svg$Svg$Attributes$fillOpacity(
						$elm$core$String$fromFloat(config.bO)),
						$elm$svg$Svg$Attributes$strokeWidth('0'),
						$elm$svg$Svg$Attributes$fillRule('evenodd'),
						$elm$svg$Svg$Attributes$d(
						A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var withUnder = F2(
			function (_v5, _v6) {
				var firstBottom = _v5.a;
				var cmdsBottom = _v5.b;
				var endBottom = _v5.c;
				var firstTop = _v6.a;
				var cmdsTop = _v6.b;
				var endTop = _v6.c;
				return view(
					_Utils_ap(
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.be, firstBottom.uL),
								A2($terezka$elm_charts$Internal$Commands$Line, firstTop.be, firstTop.uL)
							]),
						_Utils_ap(
							cmdsTop,
							_Utils_ap(
								_List_fromArray(
									[
										A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.be, firstBottom.uL)
									]),
								_Utils_ap(
									cmdsBottom,
									_List_fromArray(
										[
											A2($terezka$elm_charts$Internal$Commands$Line, endTop.be, endTop.uL)
										]))))));
			});
		var withoutUnder = function (_v4) {
			var first = _v4.a;
			var cmds = _v4.b;
			var end = _v4.c;
			return view(
				_Utils_ap(
					_List_fromArray(
						[
							A2($terezka$elm_charts$Internal$Commands$Move, first.be, 0),
							A2($terezka$elm_charts$Internal$Commands$Line, first.be, first.uL)
						]),
					_Utils_ap(
						cmds,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, end.be, 0)
							]))));
		};
		if (config.bO <= 0) {
			return $elm$svg$Svg$text('');
		} else {
			var _v2 = config.r9;
			if (_v2.$ === 1) {
				return $elm$svg$Svg$text('');
			} else {
				var method = _v2.a;
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__area-sections')
						]),
					function () {
						if (toY2M.$ === 1) {
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A2(
									$elm$core$List$map,
									withoutUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						} else {
							var toY2 = toY2M.a;
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A3(
									$elm$core$List$map2,
									withUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY2, data),
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						}
					}());
			}
		}
	});
var $terezka$elm_charts$Internal$Svg$interpolation = F5(
	function (plane, toX, toY, config, data) {
		var view = function (_v1) {
			var first = _v1.a;
			var cmds = _v1.b;
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.ly,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-section'),
						$elm$svg$Svg$Attributes$fill('transparent'),
						$elm$svg$Svg$Attributes$stroke(config.qF),
						$elm$svg$Svg$Attributes$strokeDasharray(
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, config.gU))),
						$elm$svg$Svg$Attributes$strokeWidth(
						$elm$core$String$fromFloat(config.uE)),
						$elm$svg$Svg$Attributes$d(
						A2(
							$terezka$elm_charts$Internal$Commands$description,
							plane,
							A2(
								$elm$core$List$cons,
								A2($terezka$elm_charts$Internal$Commands$Move, first.be, first.uL),
								cmds))),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var _v0 = config.r9;
		if (_v0.$ === 1) {
			return $elm$svg$Svg$text('');
		} else {
			var method = _v0.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-sections')
					]),
				A2(
					$elm$core$List$map,
					view,
					A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
		}
	});
var $terezka$elm_charts$Internal$Svg$toRadius = F2(
	function (size_, shape) {
		var area_ = (2 * $elm$core$Basics$pi) * size_;
		switch (shape) {
			case 0:
				return $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
			case 1:
				var side = $elm$core$Basics$sqrt(
					(area_ * 4) / $elm$core$Basics$sqrt(3));
				return $elm$core$Basics$sqrt(3) * side;
			case 2:
				return $elm$core$Basics$sqrt(area_) / 2;
			case 3:
				return $elm$core$Basics$sqrt(area_) / 2;
			case 4:
				return $elm$core$Basics$sqrt(area_ / 4);
			default:
				return $elm$core$Basics$sqrt(area_ / 4);
		}
	});
var $terezka$elm_charts$Internal$Produce$toDotSeries = F4(
	function (elementIndex, toX, properties, data) {
		var forEachDataPoint = F9(
			function (absoluteIndex, stackSeriesConfigIndex, lineSeriesConfigIndex, lineSeriesConfig, interpolationConfig, defaultColor, defaultOpacity, dataIndex, datum) {
				var y = A2(
					$elm$core$Maybe$withDefault,
					0,
					lineSeriesConfig.gh(datum));
				var x = toX(datum);
				var identification = {pJ: absoluteIndex, l1: dataIndex, q7: elementIndex, tp: lineSeriesConfigIndex, ty: stackSeriesConfigIndex};
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(interpolationConfig.qF),
						$terezka$elm_charts$Chart$Attributes$border(interpolationConfig.qF),
						_Utils_eq(interpolationConfig.r9, $elm$core$Maybe$Nothing) ? $terezka$elm_charts$Chart$Attributes$circle : $terezka$elm_charts$Internal$Helpers$noChange
					]);
				var dotAttrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						lineSeriesConfig.sQ,
						A2(lineSeriesConfig.pu, identification, datum)));
				var dotConfig = A2($terezka$elm_charts$Internal$Helpers$apply, dotAttrs, $terezka$elm_charts$Internal$Svg$defaultDot);
				var radius = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						$terezka$elm_charts$Internal$Svg$toRadius(dotConfig.eJ),
						dotConfig.eG));
				var tooltipTextColor = (dotConfig.qF === 'white') ? ((dotConfig.iF === 'white') ? interpolationConfig.qF : dotConfig.iF) : dotConfig.qF;
				return A2(
					$terezka$elm_charts$Internal$Item$Rendered,
					{
						qF: tooltipTextColor,
						l2: datum,
						rz: identification,
						rQ: !_Utils_eq(
							lineSeriesConfig.id(datum),
							$elm$core$Maybe$Nothing),
						bn: lineSeriesConfig.pd,
						sQ: dotConfig,
						uh: $terezka$elm_charts$Internal$Item$Dot,
						uq: lineSeriesConfig.uq(datum),
						uG: x,
						uH: x,
						uL: y
					},
					{
						at: {uG: x, uH: x, uM: y, uN: y},
						ot: F2(
							function (plane, _v5) {
								var _v6 = lineSeriesConfig.id(datum);
								if (_v6.$ === 1) {
									return $elm$svg$Svg$text('');
								} else {
									return A5(
										$terezka$elm_charts$Internal$Svg$dot,
										plane,
										function ($) {
											return $.be;
										},
										function ($) {
											return $.uL;
										},
										dotConfig,
										{be: x, uL: y});
								}
							}),
						ul: function (plane) {
							var radiusY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, radius);
							var radiusX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, radius);
							return {uG: x - radiusX, uH: x + radiusX, uM: y - radiusY, uN: y + radiusY};
						},
						up: function (_v7) {
							return _List_fromArray(
								[
									A3(
									$terezka$elm_charts$Internal$Produce$tooltipRow,
									tooltipTextColor,
									A2($terezka$elm_charts$Internal$Produce$toDefaultName, identification, lineSeriesConfig.pd),
									lineSeriesConfig.uq(datum))
								]);
						}
					});
			});
		var forEachLine = F5(
			function (isStacked, absoluteIndex, stackSeriesConfigIndex, lineSeriesConfigIndex, lineSeriesConfig) {
				var defaultOpacity = isStacked ? 0.4 : 0;
				var absoluteIndexNew = absoluteIndex + lineSeriesConfigIndex;
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(absoluteIndexNew);
				var interpolationAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$opacity(defaultOpacity)
					]);
				var interpolationConfig = A2(
					$terezka$elm_charts$Internal$Helpers$apply,
					_Utils_ap(interpolationAttrs, lineSeriesConfig.m4),
					$terezka$elm_charts$Internal$Svg$defaultInterpolation);
				var dotItems = A2(
					$elm$core$List$indexedMap,
					A7(forEachDataPoint, absoluteIndexNew, stackSeriesConfigIndex, lineSeriesConfigIndex, lineSeriesConfig, interpolationConfig, defaultColor, defaultOpacity),
					data);
				var viewSeries = function (plane) {
					var toBottom = function (datum) {
						return A3(
							$elm$core$Maybe$map2,
							F2(
								function (y, ySum) {
									return ySum - y;
								}),
							lineSeriesConfig.id(datum),
							lineSeriesConfig.gh(datum));
					};
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$class('elm-charts__series')
							]),
						_List_fromArray(
							[
								A6(
								$terezka$elm_charts$Internal$Svg$area,
								plane,
								toX,
								$elm$core$Maybe$Just(toBottom),
								lineSeriesConfig.gh,
								interpolationConfig,
								data),
								A5($terezka$elm_charts$Internal$Svg$interpolation, plane, toX, lineSeriesConfig.gh, interpolationConfig, data),
								A2(
								$elm$svg$Svg$g,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$class('elm-charts__dots')
									]),
								A2(
									$elm$core$List$map,
									$terezka$elm_charts$Internal$Item$render(plane),
									dotItems))
							]));
				};
				return A2(
					$terezka$elm_charts$Internal$Helpers$withFirst,
					dotItems,
					F2(
						function (first, rest) {
							return A2(
								$terezka$elm_charts$Internal$Item$Rendered,
								_Utils_Tuple2(first, rest),
								{
									at: A2($terezka$elm_charts$Internal$Coordinates$foldPosition, $terezka$elm_charts$Internal$Item$getLimits, dotItems),
									ot: F2(
										function (plane, _v3) {
											return viewSeries(plane);
										}),
									ul: function (plane) {
										return A2(
											$terezka$elm_charts$Internal$Coordinates$foldPosition,
											$terezka$elm_charts$Internal$Item$getPosition(plane),
											dotItems);
									},
									up: function (_v4) {
										return _List_fromArray(
											[
												A2(
												$elm$html$Html$table,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin', '0')
													]),
												A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Item$tooltip, dotItems))
											]);
									}
								});
						}));
			});
		var forEachStackSeriesConfig = F2(
			function (stackSeriesConfig, _v2) {
				var absoluteIndex = _v2.a;
				var stackSeriesConfigIndex = _v2.b;
				var items = _v2.c;
				var lineItems = function () {
					if (!stackSeriesConfig.$) {
						var lineSeriesConfig = stackSeriesConfig.a;
						return _List_fromArray(
							[
								A5(forEachLine, false, absoluteIndex, stackSeriesConfigIndex, 0, lineSeriesConfig)
							]);
					} else {
						var lineSeriesConfigs = stackSeriesConfig.a;
						return A2(
							$elm$core$List$indexedMap,
							A3(forEachLine, true, absoluteIndex, stackSeriesConfigIndex),
							lineSeriesConfigs);
					}
				}();
				return _Utils_Tuple3(
					absoluteIndex + $elm$core$List$length(lineItems),
					stackSeriesConfigIndex + 1,
					_Utils_ap(
						items,
						A2($elm$core$List$filterMap, $elm$core$Basics$identity, lineItems)));
			});
		return function (_v0) {
			var items = _v0.c;
			return items;
		}(
			A3(
				$elm$core$List$foldl,
				forEachStackSeriesConfig,
				_Utils_Tuple3(elementIndex, 0, _List_Nil),
				properties));
	});
var $terezka$elm_charts$Chart$seriesMap = F4(
	function (mapData, toX, properties, data) {
		return $terezka$elm_charts$Chart$Indexed(
			function (index) {
				var legends_ = A2($terezka$elm_charts$Internal$Legend$toDotLegends, index, properties);
				var items = A4($terezka$elm_charts$Internal$Produce$toDotSeries, index, toX, properties, data);
				var toLimits = A2($elm$core$List$map, $terezka$elm_charts$Internal$Item$getLimits, items);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$elm_charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Many$generalize, items));
				return _Utils_Tuple2(
					A4(
						$terezka$elm_charts$Chart$SeriesElement,
						toLimits,
						generalized,
						legends_,
						function (p) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__dot-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$elm_charts$Internal$Item$render(p),
										items)));
						}),
					index + $elm$core$List$length(items));
			});
	});
var $terezka$elm_charts$Chart$series = F3(
	function (toX, properties, data) {
		return A4($terezka$elm_charts$Chart$seriesMap, $elm$core$Basics$identity, toX, properties, data);
	});
var $terezka$elm_charts$Chart$Attributes$withGrid = function (config) {
	return _Utils_update(
		config,
		{rp: true});
};
var $terezka$elm_charts$Internal$Svg$Floats = {$: 0};
var $terezka$elm_charts$Chart$LabelsElement = F3(
	function (a, b, c) {
		return {$: 7, a: a, b: b, c: c};
	});
var $terezka$elm_charts$Internal$Svg$defaultLabel = {R: $elm$core$Maybe$Nothing, ly: _List_Nil, iF: 'white', lJ: 0, qF: '#808BAB', S: $elm$core$Maybe$Nothing, mA: $elm$core$Maybe$Nothing, T: false, W: 0, Y: false, M: 0, N: 0};
var $terezka$elm_charts$Internal$Svg$Generator = $elm$core$Basics$identity;
var $terezka$intervals$Intervals$Around = function (a) {
	return {$: 1, a: a};
};
var $terezka$intervals$Intervals$around = $terezka$intervals$Intervals$Around;
var $terezka$intervals$Intervals$ceilingTo = F2(
	function (prec, number) {
		return prec * $elm$core$Basics$ceiling(number / prec);
	});
var $terezka$intervals$Intervals$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			$elm$core$Basics$round(multiple)) ? min : A2($terezka$intervals$Intervals$ceilingTo, interval, min);
	});
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (c !== '0') && (c !== '.');
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (head === '9') {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 1) {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				'0',
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $elm$core$String$reverse = _String_reverse;
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3($elm$core$String$padRight, e + 1, '0', total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					'0',
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3($elm$core$String$padRight, s, '0', after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 1) {
				return false;
			} else {
				if ('5' === _v0.a.a) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $terezka$intervals$Intervals$correctFloat = function (prec) {
	return A2(
		$elm$core$Basics$composeR,
		$myrho$elm_round$Round$round(prec),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toFloat,
			$elm$core$Maybe$withDefault(0)));
};
var $terezka$intervals$Intervals$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			$elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					$elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var $terezka$intervals$Intervals$getPrecision = function (number) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(number));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var before = _v0.a;
		var _v1 = _v0.b;
		var after = _v1.a;
		return $elm$core$Basics$abs(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(after)));
	} else {
		var _v2 = A2(
			$elm$core$String$split,
			'.',
			$elm$core$String$fromFloat(number));
		if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
			var before = _v2.a;
			var _v3 = _v2.b;
			var after = _v3.a;
			return $elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var $elm$core$Basics$e = _Basics_e;
var $terezka$intervals$Intervals$toMagnitude = function (num) {
	return A2(
		$elm$core$Basics$pow,
		10,
		$elm$core$Basics$floor(
			A2($elm$core$Basics$logBase, $elm$core$Basics$e, num) / A2($elm$core$Basics$logBase, $elm$core$Basics$e, 10)));
};
var $terezka$intervals$Intervals$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = $terezka$intervals$Intervals$toMagnitude(intervalRaw);
		var multiples = A3($terezka$intervals$Intervals$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _v2 = multiples_.b;
						var m2 = _v2.a;
						var rest = _v2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2($elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = $terezka$intervals$Intervals$getPrecision(magnitude) + $terezka$intervals$Intervals$getPrecision(multiple);
		return A2($terezka$intervals$Intervals$correctFloat, precision, multiple * magnitude);
	});
var $terezka$intervals$Intervals$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var nextPosition = A2(
				$terezka$intervals$Intervals$correctFloat,
				$terezka$intervals$Intervals$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(nextPosition, range.jT) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[nextPosition]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var $terezka$intervals$Intervals$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.jT - range.jX) / amountRough;
		var interval = A3($terezka$intervals$Intervals$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2($terezka$intervals$Intervals$getBeginning, range.jX, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5($terezka$intervals$Intervals$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var $terezka$intervals$Intervals$floats = function (amount) {
	if (!amount.$) {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, true, number);
	} else {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, false, number);
	}
};
var $terezka$elm_charts$Internal$Svg$floats = F2(
	function (i, b) {
		return A2(
			$terezka$intervals$Intervals$floats,
			$terezka$intervals$Intervals$around(i),
			{jT: b.jT, jX: b.jX});
	});
var $terezka$elm_charts$Chart$Svg$floats = $terezka$elm_charts$Internal$Svg$floats;
var $ryan_haskell$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {ug: toAmPm, ui: toMonthAbbreviation, uj: toMonthName, eU: toOrdinalSuffix, um: toWeekdayAbbreviation, un: toWeekdayName};
	});
var $ryan_haskell$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryan_haskell$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month) {
		case 0:
			return 'January';
		case 1:
			return 'February';
		case 2:
			return 'March';
		case 3:
			return 'April';
		case 4:
			return 'May';
		case 5:
			return 'June';
		case 6:
			return 'July';
		case 7:
			return 'August';
		case 8:
			return 'September';
		case 9:
			return 'October';
		case 10:
			return 'November';
		default:
			return 'December';
	}
};
var $ryan_haskell$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryan_haskell$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday) {
		case 0:
			return 'Monday';
		case 1:
			return 'Tuesday';
		case 2:
			return 'Wednesday';
		case 3:
			return 'Thursday';
		case 4:
			return 'Friday';
		case 5:
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryan_haskell$date_format$DateFormat$Language$english = A6(
	$ryan_haskell$date_format$DateFormat$Language$Language,
	$ryan_haskell$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryan_haskell$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryan_haskell$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryan_haskell$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryan_haskell$date_format$DateFormat$Language$toEnglishAmPm,
	$ryan_haskell$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.tz, posixMinutes) < 0) {
					return posixMinutes + era.e;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryan_haskell$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.ug(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		l3: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		nN: month,
		pF: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).l3;
	});
var $ryan_haskell$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = 6;
var $elm$time$Time$Fri = 4;
var $elm$time$Time$Mon = 0;
var $elm$time$Time$Sat = 5;
var $elm$time$Time$Thu = 3;
var $elm$time$Time$Tue = 1;
var $elm$time$Time$Wed = 2;
var $ryan_haskell$date_format$DateFormat$days = _List_fromArray(
	[6, 0, 1, 2, 3, 4, 5]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return 3;
			case 1:
				return 4;
			case 2:
				return 5;
			case 3:
				return 6;
			case 4:
				return 0;
			case 5:
				return 1;
			default:
				return 2;
		}
	});
var $ryan_haskell$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, 6),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryan_haskell$date_format$DateFormat$days)))));
	});
var $ryan_haskell$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryan_haskell$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month) {
			case 0:
				return 31;
			case 1:
				return $ryan_haskell$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 2:
				return 31;
			case 3:
				return 30;
			case 4:
				return 31;
			case 5:
				return 30;
			case 6:
				return 31;
			case 7:
				return 31;
			case 8:
				return 30;
			case 9:
				return 31;
			case 10:
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = 0;
var $elm$time$Time$Apr = 3;
var $elm$time$Time$Aug = 7;
var $elm$time$Time$Dec = 11;
var $elm$time$Time$Feb = 1;
var $elm$time$Time$Jul = 6;
var $elm$time$Time$Jun = 5;
var $elm$time$Time$Mar = 2;
var $elm$time$Time$May = 4;
var $elm$time$Time$Nov = 10;
var $elm$time$Time$Oct = 9;
var $elm$time$Time$Sep = 8;
var $ryan_haskell$date_format$DateFormat$months = _List_fromArray(
	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).nN;
		switch (_v0) {
			case 1:
				return 0;
			case 2:
				return 1;
			case 3:
				return 2;
			case 4:
				return 3;
			case 5:
				return 4;
			case 6:
				return 5;
			case 7:
				return 6;
			case 8:
				return 7;
			case 9:
				return 8;
			case 10:
				return 9;
			case 11:
				return 10;
			default:
				return 11;
		}
	});
var $ryan_haskell$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, 0),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryan_haskell$date_format$DateFormat$months))));
	});
var $ryan_haskell$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryan_haskell$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).pF;
	});
var $ryan_haskell$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryan_haskell$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryan_haskell$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryan_haskell$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryan_haskell$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryan_haskell$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$core$String$toUpper = _String_toUpper;
var $ryan_haskell$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryan_haskell$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryan_haskell$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryan_haskell$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryan_haskell$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryan_haskell$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryan_haskell$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryan_haskell$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 0:
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix));
			case 1:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.eU(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix));
			case 2:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix));
			case 3:
				return language.ui(
					A2($elm$time$Time$toMonth, zone, posix));
			case 4:
				return language.uj(
					A2($elm$time$Time$toMonth, zone, posix));
			case 17:
				return $elm$core$String$fromInt(
					1 + A2($ryan_haskell$date_format$DateFormat$quarter, zone, posix));
			case 18:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.eU(num));
				}(
					1 + A2($ryan_haskell$date_format$DateFormat$quarter, zone, posix));
			case 5:
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix));
			case 6:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.eU(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix));
			case 7:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix));
			case 8:
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix));
			case 9:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.eU(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix));
			case 10:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					3,
					A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix));
			case 11:
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$dayOfWeek, zone, posix));
			case 12:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.eU(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$dayOfWeek, zone, posix));
			case 13:
				return language.um(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 14:
				return language.un(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 19:
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$weekOfYear, zone, posix));
			case 20:
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.eU(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$weekOfYear, zone, posix));
			case 21:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($ryan_haskell$date_format$DateFormat$weekOfYear, zone, posix));
			case 15:
				return A2(
					$elm$core$String$right,
					2,
					A2($ryan_haskell$date_format$DateFormat$year, zone, posix));
			case 16:
				return A2($ryan_haskell$date_format$DateFormat$year, zone, posix);
			case 22:
				return $elm$core$String$toUpper(
					A3($ryan_haskell$date_format$DateFormat$amPm, language, zone, posix));
			case 23:
				return $elm$core$String$toLower(
					A3($ryan_haskell$date_format$DateFormat$amPm, language, zone, posix));
			case 24:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 25:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 26:
				return $elm$core$String$fromInt(
					$ryan_haskell$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 27:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					$ryan_haskell$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 28:
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 29:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 30:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 31:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 32:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 33:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 34:
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 35:
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryan_haskell$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryan_haskell$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryan_haskell$date_format$DateFormat$format = $ryan_haskell$date_format$DateFormat$formatWithLanguage($ryan_haskell$date_format$DateFormat$Language$english);
var $ryan_haskell$date_format$DateFormat$HourMilitaryFixed = {$: 25};
var $ryan_haskell$date_format$DateFormat$hourMilitaryFixed = $ryan_haskell$date_format$DateFormat$HourMilitaryFixed;
var $ryan_haskell$date_format$DateFormat$MinuteFixed = {$: 31};
var $ryan_haskell$date_format$DateFormat$minuteFixed = $ryan_haskell$date_format$DateFormat$MinuteFixed;
var $ryan_haskell$date_format$DateFormat$Text = function (a) {
	return {$: 36, a: a};
};
var $ryan_haskell$date_format$DateFormat$text = $ryan_haskell$date_format$DateFormat$Text;
var $terezka$elm_charts$Internal$Svg$formatClock = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$hourMilitaryFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$minuteFixed
		]));
var $ryan_haskell$date_format$DateFormat$MillisecondFixed = {$: 35};
var $ryan_haskell$date_format$DateFormat$millisecondFixed = $ryan_haskell$date_format$DateFormat$MillisecondFixed;
var $ryan_haskell$date_format$DateFormat$SecondFixed = {$: 33};
var $ryan_haskell$date_format$DateFormat$secondFixed = $ryan_haskell$date_format$DateFormat$SecondFixed;
var $terezka$elm_charts$Internal$Svg$formatClockMillis = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$hourMilitaryFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$minuteFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$secondFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$millisecondFixed
		]));
var $terezka$elm_charts$Internal$Svg$formatClockSecond = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$hourMilitaryFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$minuteFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$secondFixed
		]));
var $ryan_haskell$date_format$DateFormat$DayOfMonthNumber = {$: 5};
var $ryan_haskell$date_format$DateFormat$dayOfMonthNumber = $ryan_haskell$date_format$DateFormat$DayOfMonthNumber;
var $ryan_haskell$date_format$DateFormat$MonthNumber = {$: 0};
var $ryan_haskell$date_format$DateFormat$monthNumber = $ryan_haskell$date_format$DateFormat$MonthNumber;
var $terezka$elm_charts$Internal$Svg$formatDate = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$monthNumber,
			$ryan_haskell$date_format$DateFormat$text('/'),
			$ryan_haskell$date_format$DateFormat$dayOfMonthNumber
		]));
var $ryan_haskell$date_format$DateFormat$MonthNameAbbreviated = {$: 3};
var $ryan_haskell$date_format$DateFormat$monthNameAbbreviated = $ryan_haskell$date_format$DateFormat$MonthNameAbbreviated;
var $terezka$elm_charts$Internal$Svg$formatMonth = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[$ryan_haskell$date_format$DateFormat$monthNameAbbreviated]));
var $ryan_haskell$date_format$DateFormat$DayOfWeekNameFull = {$: 14};
var $ryan_haskell$date_format$DateFormat$dayOfWeekNameFull = $ryan_haskell$date_format$DateFormat$DayOfWeekNameFull;
var $terezka$elm_charts$Internal$Svg$formatWeekday = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[$ryan_haskell$date_format$DateFormat$dayOfWeekNameFull]));
var $ryan_haskell$date_format$DateFormat$YearNumber = {$: 16};
var $ryan_haskell$date_format$DateFormat$yearNumber = $ryan_haskell$date_format$DateFormat$YearNumber;
var $terezka$elm_charts$Internal$Svg$formatYear = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[$ryan_haskell$date_format$DateFormat$yearNumber]));
var $terezka$elm_charts$Internal$Svg$formatTime = F2(
	function (zone, time) {
		var _v0 = A2($elm$core$Maybe$withDefault, time.uv, time.qv);
		switch (_v0) {
			case 0:
				return A2($terezka$elm_charts$Internal$Svg$formatClockMillis, zone, time.ud);
			case 1:
				return A2($terezka$elm_charts$Internal$Svg$formatClockSecond, zone, time.ud);
			case 2:
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.ud);
			case 3:
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.ud);
			case 4:
				return (time.sj === 7) ? A2($terezka$elm_charts$Internal$Svg$formatWeekday, zone, time.ud) : A2($terezka$elm_charts$Internal$Svg$formatDate, zone, time.ud);
			case 5:
				return A2($terezka$elm_charts$Internal$Svg$formatMonth, zone, time.ud);
			default:
				return A2($terezka$elm_charts$Internal$Svg$formatYear, zone, time.ud);
		}
	});
var $terezka$elm_charts$Chart$Svg$formatTime = $terezka$elm_charts$Internal$Svg$formatTime;
var $terezka$elm_charts$Internal$Svg$generate = F3(
	function (amount, _v0, limits) {
		var func = _v0;
		return A2(func, amount, limits);
	});
var $terezka$elm_charts$Chart$Svg$generate = $terezka$elm_charts$Internal$Svg$generate;
var $terezka$intervals$Intervals$ints = F2(
	function (amount, range) {
		return A2(
			$elm$core$List$map,
			$elm$core$Basics$round,
			function () {
				if (!amount.$) {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, true, number, range);
				} else {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, false, number, range);
				}
			}());
	});
var $terezka$elm_charts$Internal$Svg$ints = F2(
	function (i, b) {
		return A2(
			$terezka$intervals$Intervals$ints,
			$terezka$intervals$Intervals$around(i),
			{jT: b.jT, jX: b.jX});
	});
var $terezka$elm_charts$Chart$Svg$ints = $terezka$elm_charts$Internal$Svg$ints;
var $terezka$intervals$Intervals$Day = 4;
var $terezka$intervals$Intervals$Hour = 3;
var $terezka$intervals$Intervals$Millisecond = 0;
var $terezka$intervals$Intervals$Minute = 2;
var $terezka$intervals$Intervals$Month = 5;
var $terezka$intervals$Intervals$Second = 1;
var $terezka$intervals$Intervals$Year = 6;
var $justinmimbs$time_extra$Time$Extra$Day = 11;
var $justinmimbs$date$Date$Days = 3;
var $justinmimbs$time_extra$Time$Extra$Millisecond = 15;
var $justinmimbs$time_extra$Time$Extra$Month = 2;
var $justinmimbs$date$Date$Months = 1;
var $justinmimbs$date$Date$RD = $elm$core$Basics$identity;
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m) {
			case 0:
				return 0;
			case 1:
				return 31;
			case 2:
				return 59 + leapDays;
			case 3:
				return 90 + leapDays;
			case 4:
				return 120 + leapDays;
			case 5:
				return 151 + leapDays;
			case 6:
				return 181 + leapDays;
			case 7:
				return 212 + leapDays;
			case 8:
				return 243 + leapDays;
			case 9:
				return 273 + leapDays;
			case 10:
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m) {
			case 0:
				return 31;
			case 1:
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 2:
				return 31;
			case 3:
				return 30;
			case 4:
				return 31;
			case 5:
				return 30;
			case 6:
				return 31;
			case 7:
				return 31;
			case 8:
				return 30;
			case 9:
				return 31;
			case 10:
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 6:
			return 7;
		case 7:
			return 8;
		case 8:
			return 9;
		case 9:
			return 10;
		case 10:
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		case 6:
			return 5;
		case 7:
			return 6;
		case 8:
			return 7;
		case 9:
			return 8;
		case 10:
			return 9;
		case 11:
			return 10;
		default:
			return 11;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {l3: d, nN: m, pF: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0;
	var y = $justinmimbs$date$Date$year(rd);
	return {
		kb: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		pF: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0;
	var date = $justinmimbs$date$Date$toOrdinalDate(rd);
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.pF, 0, date.kb);
};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0;
		switch (unit) {
			case 0:
				return A3($justinmimbs$date$Date$add, 1, 12 * n, rd);
			case 1:
				var date = $justinmimbs$date$Date$toCalendarDate(rd);
				var wholeMonths = ((12 * (date.pF - 1)) + ($justinmimbs$date$Date$monthToNumber(date.nN) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return ($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
					$elm$core$Basics$min,
					date.l3,
					A2($justinmimbs$date$Date$daysInMonth, y, m));
			case 2:
				return rd + (7 * n);
			default:
				return rd + n;
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return ($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
			$elm$core$Basics$clamp,
			1,
			A2($justinmimbs$date$Date$daysInMonth, y, m),
			d);
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0;
	return rd;
};
var $justinmimbs$time_extra$Time$Extra$dateToMillis = function (date) {
	var daysSinceEpoch = $justinmimbs$date$Date$toRataDie(date) - 719163;
	return daysSinceEpoch * 86400000;
};
var $justinmimbs$time_extra$Time$Extra$timeFromClock = F4(
	function (hour, minute, second, millisecond) {
		return (((hour * 3600000) + (minute * 60000)) + (second * 1000)) + millisecond;
	});
var $justinmimbs$time_extra$Time$Extra$timeFromPosix = F2(
	function (zone, posix) {
		return A4(
			$justinmimbs$time_extra$Time$Extra$timeFromClock,
			A2($elm$time$Time$toHour, zone, posix),
			A2($elm$time$Time$toMinute, zone, posix),
			A2($elm$time$Time$toSecond, zone, posix),
			A2($elm$time$Time$toMillis, zone, posix));
	});
var $justinmimbs$time_extra$Time$Extra$toOffset = F2(
	function (zone, posix) {
		var millis = $elm$time$Time$posixToMillis(posix);
		var localMillis = $justinmimbs$time_extra$Time$Extra$dateToMillis(
			A2($justinmimbs$date$Date$fromPosix, zone, posix)) + A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix);
		return ((localMillis - millis) / 60000) | 0;
	});
var $justinmimbs$time_extra$Time$Extra$posixFromDateTime = F3(
	function (zone, date, time) {
		var millis = $justinmimbs$time_extra$Time$Extra$dateToMillis(date) + time;
		var offset0 = A2(
			$justinmimbs$time_extra$Time$Extra$toOffset,
			zone,
			$elm$time$Time$millisToPosix(millis));
		var posix1 = $elm$time$Time$millisToPosix(millis - (offset0 * 60000));
		var offset1 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix1);
		if (_Utils_eq(offset0, offset1)) {
			return posix1;
		} else {
			var posix2 = $elm$time$Time$millisToPosix(millis - (offset1 * 60000));
			var offset2 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix2);
			return _Utils_eq(offset1, offset2) ? posix2 : posix1;
		}
	});
var $justinmimbs$time_extra$Time$Extra$add = F4(
	function (interval, n, zone, posix) {
		add:
		while (true) {
			switch (interval) {
				case 15:
					return $elm$time$Time$millisToPosix(
						$elm$time$Time$posixToMillis(posix) + n);
				case 14:
					var $temp$interval = 15,
						$temp$n = n * 1000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 13:
					var $temp$interval = 15,
						$temp$n = n * 60000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 12:
					var $temp$interval = 15,
						$temp$n = n * 3600000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 11:
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							3,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 2:
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							1,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 0:
					var $temp$interval = 2,
						$temp$n = n * 12,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 1:
					var $temp$interval = 2,
						$temp$n = n * 3,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 3:
					var $temp$interval = 11,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				default:
					var weekday = interval;
					var $temp$interval = 11,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
			}
		}
	});
var $justinmimbs$time_extra$Time$Extra$Week = 3;
var $justinmimbs$date$Date$Day = 11;
var $justinmimbs$date$Date$Friday = 8;
var $justinmimbs$date$Date$Monday = 4;
var $justinmimbs$date$Date$Month = 2;
var $justinmimbs$date$Date$Quarter = 1;
var $justinmimbs$date$Date$Saturday = 9;
var $justinmimbs$date$Date$Sunday = 10;
var $justinmimbs$date$Date$Thursday = 7;
var $justinmimbs$date$Date$Tuesday = 5;
var $justinmimbs$date$Date$Wednesday = 6;
var $justinmimbs$date$Date$Week = 3;
var $justinmimbs$date$Date$Year = 0;
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return ($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1;
	});
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$daysBeforeYear(y) + 1;
};
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.nN;
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date;
		switch (interval) {
			case 0:
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 1:
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 2:
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 3:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 0, date);
			case 4:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 0, date);
			case 5:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 1, date);
			case 6:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 2, date);
			case 7:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 3, date);
			case 8:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 4, date);
			case 9:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 5, date);
			case 10:
				return rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, 6, date);
			default:
				return date;
		}
	});
var $justinmimbs$time_extra$Time$Extra$floorDate = F3(
	function (dateInterval, zone, posix) {
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A2(
				$justinmimbs$date$Date$floor,
				dateInterval,
				A2($justinmimbs$date$Date$fromPosix, zone, posix)),
			0);
	});
var $justinmimbs$time_extra$Time$Extra$floor = F3(
	function (interval, zone, posix) {
		switch (interval) {
			case 15:
				return posix;
			case 14:
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						A2($elm$time$Time$toSecond, zone, posix),
						0));
			case 13:
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						0,
						0));
			case 12:
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						0,
						0,
						0));
			case 11:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 11, zone, posix);
			case 2:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 2, zone, posix);
			case 0:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 0, zone, posix);
			case 1:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 1, zone, posix);
			case 3:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 3, zone, posix);
			case 4:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 4, zone, posix);
			case 5:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 5, zone, posix);
			case 6:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 6, zone, posix);
			case 7:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 7, zone, posix);
			case 8:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 8, zone, posix);
			case 9:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 9, zone, posix);
			default:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, 10, zone, posix);
		}
	});
var $justinmimbs$time_extra$Time$Extra$ceiling = F3(
	function (interval, zone, posix) {
		var floored = A3($justinmimbs$time_extra$Time$Extra$floor, interval, zone, posix);
		return _Utils_eq(floored, posix) ? posix : A4($justinmimbs$time_extra$Time$Extra$add, interval, 1, zone, floored);
	});
var $terezka$intervals$Intervals$Time$ceilingDay = F3(
	function (zone, mult, stamp) {
		return (mult === 7) ? A3($justinmimbs$time_extra$Time$Extra$ceiling, 3, zone, stamp) : A3($justinmimbs$time_extra$Time$Extra$ceiling, 11, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Hour = 12;
var $justinmimbs$time_extra$Time$Extra$partsToPosix = F2(
	function (zone, _v0) {
		var year = _v0.pF;
		var month = _v0.nN;
		var day = _v0.l3;
		var hour = _v0.jq;
		var minute = _v0.jZ;
		var second = _v0.oD;
		var millisecond = _v0.jW;
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A3($justinmimbs$date$Date$fromCalendarDate, year, month, day),
			A4(
				$justinmimbs$time_extra$Time$Extra$timeFromClock,
				A3($elm$core$Basics$clamp, 0, 23, hour),
				A3($elm$core$Basics$clamp, 0, 59, minute),
				A3($elm$core$Basics$clamp, 0, 59, second),
				A3($elm$core$Basics$clamp, 0, 999, millisecond)));
	});
var $justinmimbs$time_extra$Time$Extra$posixToParts = F2(
	function (zone, posix) {
		return {
			l3: A2($elm$time$Time$toDay, zone, posix),
			jq: A2($elm$time$Time$toHour, zone, posix),
			jW: A2($elm$time$Time$toMillis, zone, posix),
			jZ: A2($elm$time$Time$toMinute, zone, posix),
			nN: A2($elm$time$Time$toMonth, zone, posix),
			oD: A2($elm$time$Time$toSecond, zone, posix),
			pF: A2($elm$time$Time$toYear, zone, posix)
		};
	});
var $terezka$intervals$Intervals$Time$ceilingHour = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 12, zone, stamp));
		var rem = parts.jq % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, 12, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Minute = 13;
var $terezka$intervals$Intervals$Time$ceilingMinute = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 13, zone, stamp));
		var rem = parts.jZ % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, 13, mult - rem, zone, _new);
	});
var $terezka$intervals$Intervals$Time$intAsMonth = function (_int) {
	switch (_int) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		case 6:
			return 5;
		case 7:
			return 6;
		case 8:
			return 7;
		case 9:
			return 8;
		case 10:
			return 9;
		case 11:
			return 10;
		case 12:
			return 11;
		default:
			return 11;
	}
};
var $terezka$intervals$Intervals$Time$monthAsInt = function (month) {
	switch (month) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 6:
			return 7;
		case 7:
			return 8;
		case 8:
			return 9;
		case 9:
			return 10;
		case 10:
			return 11;
		default:
			return 12;
	}
};
var $terezka$intervals$Intervals$Time$ceilingMonth = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 2, zone, stamp));
		var monthInt = $terezka$intervals$Intervals$Time$monthAsInt(parts.nN);
		var rem = (monthInt - 1) % mult;
		var newMonth = (!rem) ? monthInt : ((monthInt - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			(newMonth > 12) ? _Utils_update(
				parts,
				{
					nN: $terezka$intervals$Intervals$Time$intAsMonth(newMonth - 12),
					pF: parts.pF + 1
				}) : _Utils_update(
				parts,
				{
					nN: $terezka$intervals$Intervals$Time$intAsMonth(newMonth)
				}));
	});
var $terezka$intervals$Intervals$Time$ceilingMs = F3(
	function (zone, mult, stamp) {
		var parts = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, stamp);
		var rem = parts.jW % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, 15, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Second = 14;
var $terezka$intervals$Intervals$Time$ceilingSecond = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 14, zone, stamp));
		var rem = parts.oD % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, 14, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Year = 0;
var $terezka$intervals$Intervals$Time$ceilingYear = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, 0, zone, stamp));
		var rem = parts.pF % mult;
		var newYear = (!rem) ? parts.pF : ((parts.pF - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			_Utils_update(
				parts,
				{pF: newYear}));
	});
var $terezka$intervals$Intervals$Time$ceilingUnit = F3(
	function (zone, unit, mult) {
		switch (unit) {
			case 0:
				return A2($terezka$intervals$Intervals$Time$ceilingMs, zone, mult);
			case 1:
				return A2($terezka$intervals$Intervals$Time$ceilingSecond, zone, mult);
			case 2:
				return A2($terezka$intervals$Intervals$Time$ceilingMinute, zone, mult);
			case 3:
				return A2($terezka$intervals$Intervals$Time$ceilingHour, zone, mult);
			case 4:
				return A2($terezka$intervals$Intervals$Time$ceilingDay, zone, mult);
			case 5:
				return A2($terezka$intervals$Intervals$Time$ceilingMonth, zone, mult);
			default:
				return A2($terezka$intervals$Intervals$Time$ceilingYear, zone, mult);
		}
	});
var $terezka$intervals$Intervals$Time$Day = 4;
var $terezka$intervals$Intervals$Time$Hour = 3;
var $terezka$intervals$Intervals$Time$Millisecond = 0;
var $terezka$intervals$Intervals$Time$Minute = 2;
var $terezka$intervals$Intervals$Time$Month = 5;
var $terezka$intervals$Intervals$Time$Second = 1;
var $terezka$intervals$Intervals$Time$Year = 6;
var $terezka$intervals$Intervals$Time$getChange = F3(
	function (zone, a, b) {
		var bP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b);
		var aP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a);
		return (!_Utils_eq(aP.pF, bP.pF)) ? 6 : ((!_Utils_eq(aP.nN, bP.nN)) ? 5 : ((!_Utils_eq(aP.l3, bP.l3)) ? 4 : ((!_Utils_eq(aP.jq, bP.jq)) ? 3 : ((!_Utils_eq(aP.jZ, bP.jZ)) ? 2 : ((!_Utils_eq(aP.oD, bP.oD)) ? 1 : 0)))));
	});
var $danhandrea$elm_time_extra$Util$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 400, year)) || ((!(!A2($elm$core$Basics$modBy, 100, year))) && (!A2($elm$core$Basics$modBy, 4, year)));
};
var $danhandrea$elm_time_extra$Month$days = F2(
	function (year, month) {
		switch (month) {
			case 0:
				return 31;
			case 1:
				return $danhandrea$elm_time_extra$Util$isLeapYear(year) ? 29 : 28;
			case 2:
				return 31;
			case 3:
				return 30;
			case 4:
				return 31;
			case 5:
				return 30;
			case 6:
				return 31;
			case 7:
				return 31;
			case 8:
				return 30;
			case 9:
				return 31;
			case 10:
				return 30;
			default:
				return 31;
		}
	});
var $danhandrea$elm_time_extra$TimeExtra$daysInMonth = $danhandrea$elm_time_extra$Month$days;
var $terezka$intervals$Intervals$Time$toMs = $elm$time$Time$posixToMillis;
var $terezka$intervals$Intervals$Time$getDiff = F3(
	function (zone, a, b) {
		var _v0 = (_Utils_cmp(
			$terezka$intervals$Intervals$Time$toMs(a),
			$terezka$intervals$Intervals$Time$toMs(b)) < 0) ? _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b)) : _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a));
		var aP = _v0.a;
		var bP = _v0.b;
		var dMsX = bP.jW - aP.jW;
		var dMs = (dMsX < 0) ? (1000 + dMsX) : dMsX;
		var dSecondX = (bP.oD - aP.oD) + ((dMsX < 0) ? (-1) : 0);
		var dMinuteX = (bP.jZ - aP.jZ) + ((dSecondX < 0) ? (-1) : 0);
		var dHourX = (bP.jq - aP.jq) + ((dMinuteX < 0) ? (-1) : 0);
		var dDayX = (bP.l3 - aP.l3) + ((dHourX < 0) ? (-1) : 0);
		var dDay = (dDayX < 0) ? (A2($danhandrea$elm_time_extra$TimeExtra$daysInMonth, bP.pF, bP.nN) + dDayX) : dDayX;
		var dMonthX = ($terezka$intervals$Intervals$Time$monthAsInt(bP.nN) - $terezka$intervals$Intervals$Time$monthAsInt(aP.nN)) + ((dDayX < 0) ? (-1) : 0);
		var dMonth = (dMonthX < 0) ? (12 + dMonthX) : dMonthX;
		var dHour = (dHourX < 0) ? (24 + dHourX) : dHourX;
		var dMinute = (dMinuteX < 0) ? (60 + dMinuteX) : dMinuteX;
		var dSecond = (dSecondX < 0) ? (60 + dSecondX) : dSecondX;
		var dYearX = (bP.pF - aP.pF) + ((dMonthX < 0) ? (-1) : 0);
		var dYear = (dYearX < 0) ? ($terezka$intervals$Intervals$Time$monthAsInt(bP.nN) + dYearX) : dYearX;
		return {l3: dDay, jq: dHour, jW: dMs, jZ: dMinute, nN: dMonth, oD: dSecond, pF: dYear};
	});
var $terezka$intervals$Intervals$Time$oneSecond = 1000;
var $terezka$intervals$Intervals$Time$oneMinute = $terezka$intervals$Intervals$Time$oneSecond * 60;
var $terezka$intervals$Intervals$Time$oneHour = $terezka$intervals$Intervals$Time$oneMinute * 60;
var $terezka$intervals$Intervals$Time$oneDay = $terezka$intervals$Intervals$Time$oneHour * 24;
var $terezka$intervals$Intervals$Time$oneMs = 1;
var $terezka$intervals$Intervals$Time$getNumOfTicks = F5(
	function (zone, unit, mult, a, b) {
		var div = F2(
			function (n1, n2) {
				return $elm$core$Basics$floor(n1 / n2);
			});
		var timeDiff = function (ms) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				A2(
					div,
					$terezka$intervals$Intervals$Time$toMs(b) - $terezka$intervals$Intervals$Time$toMs(ceiled),
					ms),
				mult);
		};
		var diff = function (property) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				property(
					A3($terezka$intervals$Intervals$Time$getDiff, zone, ceiled, b)),
				mult);
		};
		switch (unit) {
			case 0:
				return timeDiff($terezka$intervals$Intervals$Time$oneMs) + 1;
			case 1:
				return timeDiff($terezka$intervals$Intervals$Time$oneSecond) + 1;
			case 2:
				return timeDiff($terezka$intervals$Intervals$Time$oneMinute) + 1;
			case 3:
				return timeDiff($terezka$intervals$Intervals$Time$oneHour) + 1;
			case 4:
				return timeDiff($terezka$intervals$Intervals$Time$oneDay) + 1;
			case 5:
				return diff(
					function (d) {
						return d.nN + (d.pF * 12);
					}) + 1;
			default:
				return diff(
					function ($) {
						return $.pF;
					}) + 1;
		}
	});
var $terezka$intervals$Intervals$Time$largerUnit = function (unit) {
	switch (unit) {
		case 0:
			return $elm$core$Maybe$Just(1);
		case 1:
			return $elm$core$Maybe$Just(2);
		case 2:
			return $elm$core$Maybe$Just(3);
		case 3:
			return $elm$core$Maybe$Just(4);
		case 4:
			return $elm$core$Maybe$Just(5);
		case 5:
			return $elm$core$Maybe$Just(6);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $terezka$intervals$Intervals$Time$niceMultiples = function (unit) {
	switch (unit) {
		case 0:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500]);
		case 1:
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 2:
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 3:
			return _List_fromArray(
				[1, 2, 3, 4, 6, 8, 12]);
		case 4:
			return _List_fromArray(
				[1, 2, 3, 7, 14]);
		case 5:
			return _List_fromArray(
				[1, 2, 3, 4, 6]);
		default:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 10000, 1000000, 10000000]);
	}
};
var $terezka$intervals$Intervals$Time$toBestUnit = F4(
	function (zone, amount, min, max) {
		var toNice = function (unit) {
			toNice:
			while (true) {
				var niceNums = $terezka$intervals$Intervals$Time$niceMultiples(unit);
				var maybeNiceNum = A2(
					$elm$core$List$filter,
					function (n) {
						return _Utils_cmp(
							A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, n, min, max),
							amount) < 1;
					},
					niceNums);
				var div = F2(
					function (n1, n2) {
						return $elm$core$Basics$ceiling(n1 / n2);
					});
				var _v0 = $elm$core$List$head(maybeNiceNum);
				if (!_v0.$) {
					var niceNum = _v0.a;
					return _Utils_Tuple2(unit, niceNum);
				} else {
					var _v1 = $terezka$intervals$Intervals$Time$largerUnit(unit);
					if (!_v1.$) {
						var larger = _v1.a;
						var $temp$unit = larger;
						unit = $temp$unit;
						continue toNice;
					} else {
						return _Utils_Tuple2(6, 100000000);
					}
				}
			}
		};
		return toNice(0);
	});
var $terezka$intervals$Intervals$Time$toExtraUnit = function (unit) {
	switch (unit) {
		case 0:
			return 15;
		case 1:
			return 14;
		case 2:
			return 13;
		case 3:
			return 12;
		case 4:
			return 11;
		case 5:
			return 2;
		default:
			return 0;
	}
};
var $terezka$intervals$Intervals$Time$unitToInt = function (unit) {
	switch (unit) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		default:
			return 6;
	}
};
var $terezka$intervals$Intervals$Time$values = F4(
	function (zone, maxMmount, min, max) {
		var _v0 = A4($terezka$intervals$Intervals$Time$toBestUnit, zone, maxMmount, min, max);
		var unit = _v0.a;
		var mult = _v0.b;
		var amount = A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, mult, min, max);
		var initial = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, min);
		var tUnit = $terezka$intervals$Intervals$Time$toExtraUnit(unit);
		var toTick = F3(
			function (x, timestamp, change) {
				return {
					qv: (_Utils_cmp(
						$terezka$intervals$Intervals$Time$unitToInt(change),
						$terezka$intervals$Intervals$Time$unitToInt(unit)) > 0) ? $elm$core$Maybe$Just(change) : $elm$core$Maybe$Nothing,
					jC: !x,
					sj: mult,
					ud: timestamp,
					uv: unit,
					lk: zone
				};
			});
		var toTicks = F2(
			function (xs, acc) {
				toTicks:
				while (true) {
					if (xs.b) {
						var x = xs.a;
						var rest = xs.b;
						var prev = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, (x - 1) * mult, zone, initial);
						var curr = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, x * mult, zone, initial);
						var change = A3($terezka$intervals$Intervals$Time$getChange, zone, prev, curr);
						var $temp$xs = rest,
							$temp$acc = A2(
							$elm$core$List$cons,
							A3(toTick, x, curr, change),
							acc);
						xs = $temp$xs;
						acc = $temp$acc;
						continue toTicks;
					} else {
						return acc;
					}
				}
			});
		return $elm$core$List$reverse(
			A2(
				toTicks,
				A2($elm$core$List$range, 0, amount - 1),
				_List_Nil));
	});
var $terezka$intervals$Intervals$times = F3(
	function (zone, amount, range) {
		var toUnit = function (unit) {
			switch (unit) {
				case 0:
					return 0;
				case 1:
					return 1;
				case 2:
					return 2;
				case 3:
					return 3;
				case 4:
					return 4;
				case 5:
					return 5;
				default:
					return 6;
			}
		};
		var translateUnit = function (time) {
			return {
				qv: A2($elm$core$Maybe$map, toUnit, time.qv),
				jC: time.jC,
				sj: time.sj,
				ud: time.ud,
				uv: toUnit(time.uv),
				lk: time.lk
			};
		};
		var fromMs = function (ts) {
			return $elm$time$Time$millisToPosix(
				$elm$core$Basics$round(ts));
		};
		return A2(
			$elm$core$List$map,
			translateUnit,
			A4(
				$terezka$intervals$Intervals$Time$values,
				zone,
				amount,
				fromMs(range.jX),
				fromMs(range.jT)));
	});
var $terezka$elm_charts$Internal$Svg$times = function (zone) {
	return F2(
		function (i, b) {
			return A3(
				$terezka$intervals$Intervals$times,
				zone,
				i,
				{jT: b.jT, jX: b.jX});
		});
};
var $terezka$elm_charts$Chart$Svg$times = $terezka$elm_charts$Internal$Svg$times;
var $terezka$elm_charts$Chart$generateValues = F4(
	function (amount, tick, maybeFormat, axis) {
		var toTickValues = F2(
			function (toValue, toString) {
				return $elm$core$List$map(
					function (i) {
						return {
							fI: function () {
								if (!maybeFormat.$) {
									var formatter = maybeFormat.a;
									return formatter(
										toValue(i));
								} else {
									return toString(i);
								}
							}(),
							pn: toValue(i)
						};
					});
			});
		switch (tick.$) {
			case 0:
				return A3(
					toTickValues,
					$elm$core$Basics$identity,
					$elm$core$String$fromFloat,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$floats, axis));
			case 1:
				return A3(
					toTickValues,
					$elm$core$Basics$toFloat,
					$elm$core$String$fromInt,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$ints, axis));
			default:
				var zone = tick.a;
				return A3(
					toTickValues,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Basics$toFloat, $elm$time$Time$posixToMillis),
						function ($) {
							return $.ud;
						}),
					$terezka$elm_charts$Chart$Svg$formatTime(zone),
					A3(
						$terezka$elm_charts$Chart$Svg$generate,
						amount,
						$terezka$elm_charts$Chart$Svg$times(zone),
						axis));
		}
	});
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $terezka$elm_charts$Internal$Svg$position = F6(
	function (plane, rotation, x_, y_, xOff_, yOff_) {
		return $elm$svg$Svg$Attributes$transform(
			'translate(' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x_) + xOff_) + (',' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y_) + yOff_) + (') rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))))));
	});
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$tspan = $elm$svg$Svg$trustedNode('tspan');
var $terezka$elm_charts$Internal$Svg$label = F4(
	function (plane, config, inner, point) {
		var _v0 = config.S;
		if (_v0.$ === 1) {
			var withOverflowWrap = function (el) {
				return config.T ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.Y ? 'text-transform: uppercase;' : '';
			var fontStyle = function () {
				var _v5 = config.mA;
				if (!_v5.$) {
					var size_ = _v5.a;
					return 'font-size: ' + ($elm$core$String$fromInt(size_) + 'px;');
				} else {
					return '';
				}
			}();
			var anchorStyle = function () {
				var _v1 = config.R;
				if (_v1.$ === 1) {
					return 'text-anchor: middle;';
				} else {
					switch (_v1.a) {
						case 0:
							var _v2 = _v1.a;
							return 'text-anchor: end;';
						case 1:
							var _v3 = _v1.a;
							return 'text-anchor: start;';
						default:
							var _v4 = _v1.a;
							return 'text-anchor: middle;';
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.ly,
					$elm$svg$Svg$text_,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$stroke(config.iF),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(config.lJ)),
							$elm$svg$Svg$Attributes$fill(config.qF),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.W, point.be, point.uL, config.M, config.N),
							$elm$svg$Svg$Attributes$style(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['pointer-events: none;', fontStyle, anchorStyle, uppercaseStyle])))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$tspan, _List_Nil, inner)
						])));
		} else {
			var ellipsis = _v0.a;
			var xOffWithAnchor = function () {
				var _v11 = config.R;
				if (_v11.$ === 1) {
					return config.M - (ellipsis.uE / 2);
				} else {
					switch (_v11.a) {
						case 0:
							var _v12 = _v11.a;
							return config.M - ellipsis.uE;
						case 1:
							var _v13 = _v11.a;
							return config.M;
						default:
							var _v14 = _v11.a;
							return config.M - (ellipsis.uE / 2);
					}
				}
			}();
			var withOverflowWrap = function (el) {
				return config.T ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.Y ? A2($elm$html$Html$Attributes$style, 'text-transform', 'uppercase') : A2($elm$html$Html$Attributes$style, '', '');
			var fontStyle = function () {
				var _v10 = config.mA;
				if (!_v10.$) {
					var size_ = _v10.a;
					return A2(
						$elm$html$Html$Attributes$style,
						'font-size',
						$elm$core$String$fromInt(size_) + 'px');
				} else {
					return A2($elm$html$Html$Attributes$style, '', '');
				}
			}();
			var anchorStyle = function () {
				var _v6 = config.R;
				if (_v6.$ === 1) {
					return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
				} else {
					switch (_v6.a) {
						case 0:
							var _v7 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'right');
						case 1:
							var _v8 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'left');
						default:
							var _v9 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.ly,
					$elm$svg$Svg$foreignObject,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$class('elm-charts__html-label'),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromFloat(ellipsis.uE)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromFloat(ellipsis.mL)),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.W, point.be, point.uL, xOffWithAnchor, config.N - 10)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/1999/xhtml'),
									A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
									A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
									A2($elm$html$Html$Attributes$style, 'text-overflow', 'ellipsis'),
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
									A2($elm$html$Html$Attributes$style, 'color', config.qF),
									fontStyle,
									uppercaseStyle,
									anchorStyle
								]),
							inner)
						])));
		}
	});
var $terezka$elm_charts$Chart$Attributes$zero = function (b) {
	return A3($elm$core$Basics$clamp, b.jX, b.jT, 0);
};
var $terezka$elm_charts$Chart$xLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.bu,
				config.bD,
				config.aR,
				A2($terezka$elm_charts$Internal$Helpers$apply, config.at, p.be));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.rp) ? ts : _Utils_update(
				ts,
				{
					aZ: _Utils_ap(
						ts.aZ,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.pn;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{bu: 5, R: $elm$core$Maybe$Nothing, ly: _List_Nil, qF: '#808BAB', S: $elm$core$Maybe$Nothing, G: false, mA: $elm$core$Maybe$Nothing, aR: $elm$core$Maybe$Nothing, bD: $terezka$elm_charts$Internal$Svg$Floats, rp: false, T: false, at: _List_Nil, V: $terezka$elm_charts$Chart$Attributes$zero, W: 0, Y: false, M: 0, N: 18});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								R: config.R,
								ly: config.ly,
								qF: config.qF,
								S: config.S,
								mA: config.mA,
								T: config.T,
								W: config.W,
								Y: config.Y,
								M: config.M,
								N: config.G ? ((-config.N) + 10) : config.N
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.fI)
							]),
						{
							be: item.pn,
							uL: config.V(p.uL)
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__x-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $terezka$elm_charts$Internal$Svg$End = 0;
var $terezka$elm_charts$Internal$Svg$Start = 1;
var $terezka$elm_charts$Chart$yLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.bu,
				config.bD,
				config.aR,
				A2($terezka$elm_charts$Internal$Helpers$apply, config.at, p.uL));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.rp) ? ts : _Utils_update(
				ts,
				{
					dM: _Utils_ap(
						ts.dM,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.pn;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{bu: 5, R: $elm$core$Maybe$Nothing, ly: _List_Nil, qF: '#808BAB', S: $elm$core$Maybe$Nothing, G: false, mA: $elm$core$Maybe$Nothing, aR: $elm$core$Maybe$Nothing, bD: $terezka$elm_charts$Internal$Svg$Floats, rp: false, T: false, at: _List_Nil, V: $terezka$elm_charts$Chart$Attributes$zero, W: 0, Y: false, M: -10, N: 3});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								R: function () {
									var _v0 = config.R;
									if (_v0.$ === 1) {
										return $elm$core$Maybe$Just(
											config.G ? 1 : 0);
									} else {
										var anchor = _v0.a;
										return $elm$core$Maybe$Just(anchor);
									}
								}(),
								ly: config.ly,
								qF: config.qF,
								S: config.S,
								mA: config.mA,
								T: config.T,
								W: config.W,
								Y: config.Y,
								M: config.G ? (-config.M) : config.M,
								N: config.N
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.fI)
							]),
						{
							be: config.V(p.be),
							uL: item.pn
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__y-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $author$project$Render$ChartV2$rawLineChart2D = F2(
	function (options, data) {
		return $mdgriffith$elm_ui$Element$html(
			A2(
				$terezka$elm_charts$Chart$chart,
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$height(200),
						$terezka$elm_charts$Chart$Attributes$width(options.uE),
						function () {
						var _v0 = options.ep;
						if (_v0.$ === 1) {
							return $terezka$elm_charts$Chart$Attributes$domain(_List_Nil);
						} else {
							var lowest = _v0.a;
							return $terezka$elm_charts$Chart$Attributes$domain(
								_List_fromArray(
									[
										A2($terezka$elm_charts$Chart$Attributes$lowest, lowest, $terezka$elm_charts$Chart$Attributes$orLower)
									]));
						}
					}()
					]),
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$xLabels(
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$fontSize(10)
							])),
						$terezka$elm_charts$Chart$yLabels(
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$withGrid,
								$terezka$elm_charts$Chart$Attributes$fontSize(10)
							])),
						function () {
						var _v1 = options.hK;
						if (_v1.$ === 1) {
							return $terezka$elm_charts$Chart$none;
						} else {
							var f_ = $author$project$Render$ChartV2$regressionLine(data);
							if (f_.$ === 1) {
								return $terezka$elm_charts$Chart$none;
							} else {
								var f = f_.a;
								var regressionData = A2(
									$elm$core$List$map,
									function (_v3) {
										var x = _v3.be;
										var y = _v3.uL;
										return {
											be: x,
											uL: f(x)
										};
									},
									data);
								return A3(
									$terezka$elm_charts$Chart$series,
									function ($) {
										return $.be;
									},
									_List_fromArray(
										[
											A3(
											$terezka$elm_charts$Chart$interpolated,
											function ($) {
												return $.uL;
											},
											_List_fromArray(
												[
													$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$blue)
												]),
											_List_Nil)
										]),
									regressionData);
							}
						}
					}(),
						function () {
						var _v4 = options.fH;
						_v4$3:
						while (true) {
							if (!_v4.$) {
								switch (_v4.a) {
									case 'line':
										return A3(
											$terezka$elm_charts$Chart$series,
											function ($) {
												return $.be;
											},
											_List_fromArray(
												[
													A3(
													$terezka$elm_charts$Chart$interpolated,
													function ($) {
														return $.uL;
													},
													_List_fromArray(
														[
															$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
														]),
													_List_Nil)
												]),
											data);
									case 'scatter':
										return A3(
											$terezka$elm_charts$Chart$series,
											function ($) {
												return $.be;
											},
											_List_fromArray(
												[
													A2(
													$terezka$elm_charts$Chart$scatter,
													function ($) {
														return $.uL;
													},
													_List_Nil)
												]),
											data);
									case 'bar':
										return A3(
											$terezka$elm_charts$Chart$bars,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$terezka$elm_charts$Chart$bar,
													function ($) {
														return $.uL;
													},
													_List_Nil)
												]),
											data);
									default:
										break _v4$3;
								}
							} else {
								break _v4$3;
							}
						}
						return A3(
							$terezka$elm_charts$Chart$series,
							function ($) {
								return $.be;
							},
							_List_fromArray(
								[
									A3(
									$terezka$elm_charts$Chart$interpolated,
									function ($) {
										return $.uL;
									},
									_List_fromArray(
										[
											$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$blue)
										]),
									_List_Nil)
								]),
							data);
					}()
					])));
	});
var $terezka$elm_charts$Internal$Helpers$darkBlue = '#7345f6';
var $terezka$elm_charts$Chart$Attributes$darkBlue = $terezka$elm_charts$Internal$Helpers$darkBlue;
var $author$project$Render$ChartV2$rawLineChart3D = function (data) {
	return $mdgriffith$elm_ui$Element$html(
		A2(
			$terezka$elm_charts$Chart$chart,
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$height(200),
					$terezka$elm_charts$Chart$Attributes$width(400)
				]),
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$xLabels(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$fontSize(10)
						])),
					$terezka$elm_charts$Chart$yLabels(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$withGrid,
							$terezka$elm_charts$Chart$Attributes$fontSize(10)
						])),
					A3(
					$terezka$elm_charts$Chart$series,
					function ($) {
						return $.be;
					},
					_List_fromArray(
						[
							A3(
							$terezka$elm_charts$Chart$interpolated,
							function ($) {
								return $.uL;
							},
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
								]),
							_List_Nil),
							A3(
							$terezka$elm_charts$Chart$interpolated,
							function ($) {
								return $.pH;
							},
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$darkBlue)
								]),
							_List_Nil)
						]),
					data)
				])));
};
var $author$project$Render$ChartV2$red = A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0);
var $author$project$Render$ChartV2$rawLineChart = F2(
	function (options, mChartData) {
		if (mChartData.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$ChartV2$red)
					]),
				$mdgriffith$elm_ui$Element$text('Line chart: Error parsing data'));
		} else {
			switch (mChartData.a.$) {
				case 0:
					var data = mChartData.a.a;
					return A2($author$project$Render$ChartV2$rawLineChart2D, options, data);
				case 1:
					var data = mChartData.a.a;
					return $author$project$Render$ChartV2$rawLineChart3D(data);
				default:
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$ChartV2$red)
							]),
						$mdgriffith$elm_ui$Element$text('Line chart: Error, can only handle 2D data'));
			}
		}
	});
var $author$project$Render$ChartV2$toBool = function (maybeString) {
	_v0$2:
	while (true) {
		if (!maybeString.$) {
			switch (maybeString.a) {
				case 'yes':
					return $elm$core$Maybe$Just(true);
				case 'no':
					return $elm$core$Maybe$Just(false);
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $author$project$Render$ChartV2$twoListToIntPair = function (list) {
	if ((list.b && list.b.b) && (!list.b.b.b)) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		return _Utils_Tuple2(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(x)),
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(y)));
	} else {
		return _Utils_Tuple2(0, 0);
	}
};
var $author$project$Render$ChartV2$chart_ = F3(
	function (kind, properties_, data_) {
		var properties = A3($elm$core$Dict$insert, 'kind', kind, properties_);
		var options = {
			fb: A2($elm$core$Dict$get, 'caption', properties),
			fc: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$split(','),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map($elm$core$String$trim),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map($elm$core$String$toInt),
							A2(
								$elm$core$Basics$composeR,
								$elm_community$maybe_extra$Maybe$Extra$values,
								$elm$core$List$map(
									function (x) {
										return x - 1;
									}))))),
				A2($elm$core$Dict$get, 'columns', properties)),
			iZ: A2(
				$elm$core$Maybe$withDefault,
				false,
				$author$project$Render$ChartV2$toBool(
					A2($elm$core$Dict$get, 'dark', properties))),
			i3: A2($elm$core$Dict$get, 'direction', properties),
			i5: A2(
				$elm$core$Maybe$andThen,
				$author$project$Render$ChartV2$getRange,
				A2($elm$core$Dict$get, 'domain', properties)),
			g3: A2($elm$core$Dict$get, 'filter', properties),
			he: A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toInt,
				A2($elm$core$Dict$get, 'header', properties)),
			fH: A2($elm$core$Dict$get, 'kind', properties),
			fI: A2($elm$core$Dict$get, 'figure', properties),
			ep: A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toFloat,
				A2($elm$core$Dict$get, 'lowest', properties)),
			kv: A2(
				$elm$core$Maybe$andThen,
				$author$project$Render$ChartV2$getRange,
				A2($elm$core$Dict$get, 'range', properties)),
			hK: A2($elm$core$Dict$get, 'regression', properties),
			eD: A2(
				$elm$core$Maybe$withDefault,
				false,
				$author$project$Render$ChartV2$toBool(
					A2($elm$core$Dict$get, 'reverse', properties))),
			hS: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$split(','),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map($elm$core$String$trim),
						$author$project$Render$ChartV2$twoListToIntPair)),
				A2($elm$core$Dict$get, 'rows', properties)),
			hZ: A2($elm$core$Dict$get, 'separator', properties),
			uE: A2(
				$elm$core$Maybe$withDefault,
				300,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$String$toInt,
					A2($elm$core$Dict$get, 'width', properties)))
		};
		var data = A2(
			$author$project$Render$ChartV2$csvToChartData,
			options,
			A2(
				$elm$core$String$split,
				'\n',
				$elm$core$String$trim(data_)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(options.uE - $author$project$Render$ChartV2$deltaWidth)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 36, jG: 48, kC: 0, k2: 36}),
					$mdgriffith$elm_ui$Element$spacing(24)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(options.uE - $author$project$Render$ChartV2$deltaWidth))
						]),
					A2($author$project$Render$ChartV2$rawLineChart, options, data)),
					function () {
					var _v0 = _Utils_Tuple2(options.fI, options.fb);
					if (_v0.a.$ === 1) {
						if (_v0.b.$ === 1) {
							var _v1 = _v0.a;
							var _v2 = _v0.b;
							return $mdgriffith$elm_ui$Element$none;
						} else {
							var _v4 = _v0.a;
							var captionText = _v0.b.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{iG: 0, jG: 0, kC: 0, k2: 24})
									]),
								$mdgriffith$elm_ui$Element$text(captionText));
						}
					} else {
						if (_v0.b.$ === 1) {
							var labelText = _v0.a.a;
							var _v3 = _v0.b;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{iG: 0, jG: 0, kC: 0, k2: 24})
									]),
								$mdgriffith$elm_ui$Element$text('Figure ' + labelText));
						} else {
							var labelText = _v0.a.a;
							var captionText = _v0.b.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{iG: 0, jG: 0, kC: 0, k2: 24})
									]),
								$mdgriffith$elm_ui$Element$text('Figure ' + (labelText + ('. ' + captionText))));
						}
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = 1;
var $mdgriffith$elm_ui$Internal$Model$Layout = 0;
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Lazy$embed = function (x) {
	switch (x.$) {
		case 0:
			var html = x.a;
			return html;
		case 1:
			var styled = x.a;
			return styled.ry(
				A2(
					$mdgriffith$elm_ui$Internal$Model$OnlyDynamic,
					{
						H: {p6: $elm$core$Maybe$Nothing, qj: $elm$core$Maybe$Nothing, tq: $elm$core$Maybe$Nothing},
						rw: 1,
						fP: 0
					},
					styled.oY));
		case 2:
			var text = x.a;
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(text));
		default:
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(''));
	}
};
var $mdgriffith$elm_ui$Element$Lazy$apply3 = F4(
	function (fn, a, b, c) {
		return $mdgriffith$elm_ui$Element$Lazy$embed(
			A3(fn, a, b, c));
	});
var $elm$virtual_dom$VirtualDom$lazy5 = _VirtualDom_lazy5;
var $mdgriffith$elm_ui$Element$Lazy$lazy3 = F4(
	function (fn, a, b, c) {
		return $mdgriffith$elm_ui$Internal$Model$Unstyled(
			A5($elm$virtual_dom$VirtualDom$lazy5, $mdgriffith$elm_ui$Element$Lazy$apply3, fn, a, b, c));
	});
var $author$project$Render$ChartV2$chart = F3(
	function (kind, properties_, data_) {
		return A4($mdgriffith$elm_ui$Element$Lazy$lazy3, $author$project$Render$ChartV2$chart_, kind, properties_, data_);
	});
var $author$project$Render$ChartV2$dWidth = 80;
var $author$project$Tools$KV$makePair = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			var rest = _v1.b;
			return _Utils_Tuple2(
				a,
				A2(
					$elm$core$String$join,
					':',
					A2($elm$core$List$cons, b, rest)));
		} else {
			var a = strs.a;
			return _Utils_Tuple2(a, '');
		}
	} else {
		return _Utils_Tuple2('', '');
	}
};
var $author$project$Tools$KV$preparePairs = function (strs) {
	return A2(
		$elm$core$List$filter,
		function (_v0) {
			var k = _v0.a;
			return k !== '';
		},
		A2(
			$elm$core$List$map,
			$author$project$Tools$KV$makePair,
			$author$project$Tools$KV$explode(strs)));
};
var $author$project$Tools$KV$makeDict = function (str) {
	return $elm$core$Dict$fromList(
		$author$project$Tools$KV$preparePairs(
			A2(
				$elm$core$List$filter,
				function (s) {
					return s !== '';
				},
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					$elm$core$String$lines(str)))));
};
var $author$project$Render$ChartV2$render = F5(
	function (count, acc, settings, attr, block) {
		var _v0 = block.qh;
		if (_v0.$ === 1) {
			return $mdgriffith$elm_ui$Element$text('Oops, Error!');
		} else {
			var str = _v0.a;
			var _v1 = A2($elm$core$String$split, '====', str);
			if ((_v1.b && _v1.b.b) && (!_v1.b.b.b)) {
				var argString = _v1.a;
				var _v2 = _v1.b;
				var data_ = _v2.a;
				var properties_ = $author$project$Tools$KV$makeDict(argString);
				var properties = A3(
					$elm$core$Dict$insert,
					'width',
					$elm$core$String$fromInt(settings.uE + $author$project$Render$ChartV2$dWidth),
					properties_);
				var kind = $elm$core$String$trim(
					A2(
						$elm$core$Maybe$withDefault,
						'line',
						$elm$core$List$head(block.lv)));
				var data = function () {
					if (data_ === '') {
						var _v4 = A2($elm$core$Dict$get, 'source', properties);
						if (!_v4.$) {
							var tag = _v4.a;
							var _v5 = A2($elm$core$Dict$get, tag, settings.qR);
							if (!_v5.$) {
								var data__ = _v5.a;
								return data__;
							} else {
								return '';
							}
						} else {
							return '';
						}
					} else {
						return data_;
					}
				}();
				var backgroundColor = function () {
					var _v3 = A2($elm$core$Dict$get, 'dark', properties);
					_v3$2:
					while (true) {
						if (!_v3.$) {
							switch (_v3.a) {
								case 'yes':
									return A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.1);
								case 'no':
									return A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
								default:
									break _v3$2;
							}
						} else {
							break _v3$2;
						}
					}
					return A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
				}();
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(backgroundColor),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE + $author$project$Render$ChartV2$dWidth))
						]),
					_List_fromArray(
						[
							A3($author$project$Render$ChartV2$chart, kind, properties, data)
						]));
			} else {
				return $mdgriffith$elm_ui$Element$text('Oops, Error! (2)');
			}
		}
	});
var $author$project$Render$Utility$getVerbatimContent = function (_v0) {
	var body = _v0.qh;
	if (!body.$) {
		var str = body.a;
		return str;
	} else {
		return '';
	}
};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $author$project$Render$PUtility$itemParser = function (item) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							F3(
								function (start, end, src) {
									return A3($elm$core$String$slice, start, end, src);
								})),
						$elm$parser$Parser$chompUntil(item + '=')),
					$elm$parser$Parser$symbol(item + '=\"')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('\"'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Render$PUtility$parseItem = F2(
	function (item, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Render$PUtility$itemParser(item),
			str);
		if (!_v0.$) {
			var output = _v0.a;
			return $elm$core$Maybe$Just(output);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Render$IFrame$allowedIFrameSrcList = _List_fromArray(
	['https://www.desmos.com/calculator/', 'https://openprocessing.org/', 'https://codepen.io/', 'https://q.uiver.app/', 'https://www.youtube.com/embed/', 'https://www.geogebra.org/']);
var $Chadtech$elm_bool_extra$Bool$Extra$any = $elm$core$List$any($elm$core$Basics$identity);
var $author$project$Render$IFrame$validSrc = function (src) {
	return $Chadtech$elm_bool_extra$Bool$Extra$any(
		A2(
			$elm$core$List$map,
			function (src_) {
				return A2($elm$core$String$contains, src_, src);
			},
			$author$project$Render$IFrame$allowedIFrameSrcList));
};
var $author$project$Render$IFrame$parseIFrame = function (str) {
	var width_ = A2($author$project$Render$PUtility$parseItem, 'width', str);
	var src_ = A2($author$project$Render$PUtility$parseItem, 'src', str);
	var height_ = A2($author$project$Render$PUtility$parseItem, 'height', str);
	var _v0 = _Utils_Tuple3(src_, width_, height_);
	if (((!_v0.a.$) && (!_v0.b.$)) && (!_v0.c.$)) {
		var src = _v0.a.a;
		var width = _v0.b.a;
		var height = _v0.c.a;
		return $author$project$Render$IFrame$validSrc(src) ? $elm$core$Maybe$Just(
			{mL: height, oV: src, uE: width}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$IFrame$render = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = $author$project$Render$IFrame$parseIFrame(
			$author$project$Render$Utility$getVerbatimContent(block));
		if (_v0.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('Error parsing iframe or unregistered src'));
		} else {
			var iframeProperties = _v0.a;
			var w = A2(
				$elm$core$Maybe$withDefault,
				400,
				$elm$core$String$toInt(iframeProperties.uE));
			var label_ = A2($elm$core$Dict$get, 'figure', block.sS);
			var caption_ = A2($elm$core$Dict$get, 'caption', block.sS);
			var figureLabel = function () {
				var _v1 = _Utils_Tuple2(label_, caption_);
				if (!_v1.a.$) {
					if (!_v1.b.$) {
						var label = _v1.a.a;
						var caption = _v1.b.a;
						return 'Figure ' + (label + ('. ' + caption));
					} else {
						var label = _v1.a.a;
						var _v2 = _v1.b;
						return 'Figure ' + label;
					}
				} else {
					if (!_v1.b.$) {
						var _v3 = _v1.a;
						var caption = _v1.b.a;
						return caption;
					} else {
						var _v4 = _v1.a;
						var _v5 = _v1.b;
						return '';
					}
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE)),
					A2($author$project$Render$Sync$attributes, settings, block)),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(w)),
									$mdgriffith$elm_ui$Element$centerX
								]),
							attrs),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2(
									$elm$html$Html$iframe,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$src(iframeProperties.oV),
											A2($elm$html$Html$Attributes$style, 'border', 'none'),
											A2($elm$html$Html$Attributes$style, 'width', iframeProperties.uE + 'px'),
											A2($elm$html$Html$Attributes$style, 'height', iframeProperties.mL + 'px')
										]),
									_List_Nil)),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										A2($mdgriffith$elm_ui$Element$paddingXY, 0, 12)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(figureLabel)
									]))
							]))
					]));
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.ti);
var $author$project$Render$Constants$syncHighlightColor = A3($mdgriffith$elm_ui$Element$rgb, 0.955, 0.95, 0.95);
var $author$project$Render$VerbatimBlock$darkTheme = '.elmsh {color: #e7eaec;background: #4c5054;line-height: 1.5;}.elmsh-hl {background: #5c5f63;}.elmsh-add {background: #5cba73;}.elmsh-del{background: #e16e77;}.elmsh-comm {color: #8c9399;}.elmsh1 {color: #a1cdff;}.elmsh2 {color: #ffbf8a;}.elmsh3 {color: #fb9fa7;}.elmsh4 {color:#a1cdff;}.elmsh5 {color: #a5f0b8;}.elmsh6 {color: #a1cdff;}.elmsh7 {color: #cbb0f6;}';
var $author$project$Render$VerbatimBlock$darkCSS2 = $mdgriffith$elm_ui$Element$html(
	A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text($author$project$Render$VerbatimBlock$darkTheme)
			])));
var $author$project$Render$VerbatimBlock$ghTheme3 = '.elmsh {color: #1f2328;background: #d5d8e1;line-height: 1.5;}.elmsh-hl {background: #c0c5d1;}.elmsh-add {background: #bfdbc3;}.elmsh-del{background: #dcc7ca;}.elmsh-comm {color: #5f6770;}.elmsh1 {color: #0049a5;}.elmsh2 {color: #bc4000;}.elmsh3 {color: #b6293b;}.elmsh4 {color:#006d92;}.elmsh5 {color: #50854a;}.elmsh6 {color: #0049a5;}.elmsh7 {color: #644b88;}';
var $author$project$Render$VerbatimBlock$lightCSS2 = $mdgriffith$elm_ui$Element$html(
	A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text($author$project$Render$VerbatimBlock$ghTheme3)
			])));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode = $elm$core$Basics$identity;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1 = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2 = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3 = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4 = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5 = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6 = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(3, 'elm-s');
		case 1:
			return _Utils_Tuple2(4, 'elm-bs');
		case 2:
			return _Utils_Tuple2(5, 'elm-gs');
		case 3:
			return _Utils_Tuple2(7, 'elm-c');
		case 4:
			return _Utils_Tuple2(4, 'elm-k');
		case 5:
			return _Utils_Tuple2(6, 'elm-f');
		case 6:
			return _Utils_Tuple2(5, 'elm-ts');
		default:
			return _Utils_Tuple2(2, 'elm-n');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine = function (fragments) {
	return {rm: fragments, eb: $elm$core$Maybe$Nothing};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak = {$: 2};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment = F2(
	function (toStyle, _v0) {
		var syntax = _v0.a;
		var text = _v0.b;
		switch (syntax.$) {
			case 0:
				return {pL: '', s1: 0, o5: text};
			case 1:
				return {pL: '', s1: 1, o5: text};
			case 2:
				return {pL: '', s1: 0, o5: text};
			default:
				var c = syntax.a;
				var _v2 = toStyle(c);
				var requiredStyle = _v2.a;
				var additionalClass = _v2.b;
				return {pL: additionalClass, s1: requiredStyle, o5: text};
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp = F3(
	function (toStyle, _v0, _v1) {
		var syntax = _v0.a;
		var text = _v0.b;
		var lines = _v1.a;
		var fragments = _v1.b;
		var maybeLastSyntax = _v1.c;
		if (_Utils_eq(syntax, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak)) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(fragments),
					lines),
				_List_fromArray(
					[
						A2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
						toStyle,
						_Utils_Tuple2(syntax, text))
					]),
				$elm$core$Maybe$Nothing);
		} else {
			if (_Utils_eq(
				$elm$core$Maybe$Just(syntax),
				maybeLastSyntax)) {
				if (fragments.b) {
					var headFrag = fragments.a;
					var tailFrags = fragments.b;
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							_Utils_update(
								headFrag,
								{
									o5: _Utils_ap(text, headFrag.o5)
								}),
							tailFrags),
						maybeLastSyntax);
				} else {
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
								toStyle,
								_Utils_Tuple2(syntax, text)),
							fragments),
						maybeLastSyntax);
				}
			} else {
				return _Utils_Tuple3(
					lines,
					A2(
						$elm$core$List$cons,
						A2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
							toStyle,
							_Utils_Tuple2(syntax, text)),
						fragments),
					$elm$core$Maybe$Just(syntax));
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines = F2(
	function (toStyle, revTokens) {
		return function (_v0) {
			var lines = _v0.a;
			var frags = _v0.b;
			return A2(
				$elm$core$List$cons,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(frags),
				lines);
		}(
			A3(
				$elm$core$List$foldl,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp(toStyle),
				_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
				revTokens));
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment = {$: 1};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak = function (c) {
	return c === '\n';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile = F2(
	function (isNotRelevant, previousParser) {
		return A2(
			$elm$parser$Parser$ignorer,
			previousParser,
			$elm$parser$Parser$chompWhile(isNotRelevant));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('--'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen = F3(
	function (f, list, plist) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					_Utils_ap(n, list));
			},
			plist);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen = F3(
	function (f, list, pn) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					A2($elm$core$List$cons, n, list));
			},
			pn);
	});
var $elm$parser$Parser$ExpectingEnd = {$: 10};
var $elm$parser$Parser$Advanced$end = function (x) {
	return function (s) {
		return _Utils_eq(
			$elm$core$String$length(s.oV),
			s.e) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable = F2(
	function (options, revAList) {
		var defaultMap = options.l6;
		var isNotRelevant = options.m9;
		var end = options.rb;
		var innerParsers = options.m1;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							defaultMap(end),
							revAList)),
					$elm$parser$Parser$symbol(end)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable = F3(
	function (nestLevel, options, revAList) {
		var defaultMap = options.l6;
		var isNotRelevant = options.m9;
		var start = options.tz;
		var end = options.rb;
		var innerParsers = options.m1;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return (nestLevel === 1) ? $elm$parser$Parser$succeed(n) : A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel - 1, options, n);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								defaultMap(end),
								revAList)),
						$elm$parser$Parser$symbol(end))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel + 1, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$symbol(start))))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return function (s) {
		return A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp = F2(
	function (options, revAList) {
		var start = options.tz;
		var end = options.rb;
		var isNotRelevant = options.m9;
		var _v0 = _Utils_Tuple2(
			$elm$core$String$uncons(options.tz),
			$elm$core$String$uncons(options.rb));
		if (_v0.a.$ === 1) {
			var _v1 = _v0.a;
			return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the start token cannot be an empty string!');
		} else {
			if (_v0.b.$ === 1) {
				var _v2 = _v0.b;
				return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the end token cannot be an empty string!');
			} else {
				var _v3 = _v0.a.a;
				var startChar = _v3.a;
				var _v4 = _v0.b.a;
				var endChar = _v4.a;
				return options.m8 ? A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable,
					1,
					_Utils_update(
						options,
						{
							m9: function (c) {
								return isNotRelevant(c) && ((!_Utils_eq(c, startChar)) && (!_Utils_eq(c, endChar)));
							}
						}),
					revAList) : A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable,
					_Utils_update(
						options,
						{
							m9: function (c) {
								return isNotRelevant(c) && (!_Utils_eq(c, endChar));
							}
						}),
					revAList);
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited = function (options) {
	var start = options.tz;
	var isNotRelevant = options.m9;
	var defaultMap = options.l6;
	return A2(
		$elm$parser$Parser$andThen,
		function (n) {
			return A2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp,
				options,
				_List_fromArray(
					[n]));
		},
		A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				defaultMap(start)),
			$elm$parser$Parser$symbol(start)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		l6: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		rb: '-}',
		m1: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList]),
		m8: true,
		m9: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		tz: '{-'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C = function (a) {
	return {$: 3, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal = {$: 0};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile = function (isNotRelevant) {
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(0),
			$elm$parser$Parser$chompIf(isNotRelevant)),
		$elm$parser$Parser$chompWhile(isNotRelevant));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		['|', '.', '=', '\\', '/', '(', ')', '-', '>', '<', ':', '+', '!', '$', '%', '&', '*']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[',', '[', ']', '{', '}']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar = function (c) {
	return (c === '\"') || (c === '\'');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace = function (c) {
	return (c === ' ') || (c === '\t');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isUpper)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '/', '*', '=', '.', '$', '<', '>', ':', '&', '|', '^', '?', '%', '#', '@', '~', '!', ',']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
			b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$backtrackable(
						$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$backtrackable(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar))),
			$elm$parser$Parser$backtrackable(
				$elm$parser$Parser$symbol(')')))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['as', 'where', 'let', 'in', 'if', 'else', 'then', 'case', 'of', 'type', 'alias']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber = function (c) {
	return $elm$core$Char$isDigit(c) || (c === '.');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber)),
	$elm$parser$Parser$chompWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('-'))),
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isLower)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
					b);
			},
			$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number)),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					'()')),
			$elm$parser$Parser$symbol('()')),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized),
			A2(
			$elm$parser$Parser$map,
			function (n) {
				return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n) : _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, n);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText)
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet = $elm$core$Set$fromList(
	_List_fromArray(
		['\'', '\"', '\\', 'n', 'r', 't', 'b', 'f', 'v']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('\\'))),
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable = function (c) {
	return c === '\\';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter = {
	l6: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	rb: '\"',
	m1: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable]),
	m8: false,
	m9: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	tz: '\"'
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{rb: '\'', tz: '\''}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{rb: '\"\"\"', tz: '\"\"\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return A2($elm$core$List$cons, n, revTokens);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ((c === '(') || ((c === ')') || ((c === '-') || (c === ',')))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					'()')),
			$elm$parser$Parser$symbol('()')),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
					'->')),
			$elm$parser$Parser$symbol('->')),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
					function (c) {
						return (c === '(') || ((c === ')') || ((c === '-') || (c === ',')));
					}))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					b);
			},
			$elm$parser$Parser$getChompedString(
				A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant,
					$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant)))
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					function (ns) {
						return A2($elm$parser$Parser$loop, ns, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
									':'),
								revTokens)),
						$elm$parser$Parser$symbol(':')))),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar = function (c) {
	return (c === '-') || (c === '{');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar = $elm$parser$Parser$getChompedString(
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 9, a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.e, s.ta, s.lW, s.oV);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return (_Utils_eq(newOffset, -1) || (0 <= A3(
			$elm$parser$Parser$Advanced$isSubChar,
			function (c) {
				return $elm$core$Char$isAlphaNum(c) || (c === '_');
			},
			newOffset,
			s.oV))) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{lW: newCol, n: s.n, hh: s.hh, e: newOffset, ta: newRow, oV: s.oV});
	};
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (c === '(')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || ((c === '(') || ((c === ')') || ((c === ',') || (c === '.'))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || ((c === '(') || (c === ')')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested = function (_v1) {
	var nestLevel = _v1.a;
	var revTokens = _v1.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return _Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens));
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							_Utils_ap(n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel + 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens)),
					$elm$parser$Parser$symbol('('))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return (!nestLevel) ? $elm$parser$Parser$Done(ns) : $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel - 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (s) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar))))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									function (c) {
										return (c === ',') || (c === '.');
									}))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
									b);
							},
							$elm$parser$Parser$getChompedString(
								A2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant,
									$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
									b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant)))
						]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_Tuple2(0, n),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2($elm$parser$Parser$loop, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
									'exposing')),
							$elm$parser$Parser$keyword('exposing')),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
									'as')),
							$elm$parser$Parser$keyword('as')),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant)))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp = F2(
	function (revTokens, str) {
		return (str === 'module') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable = F2(
	function (revTokens, n) {
		return ((n === 'module') || (n === 'import')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : ((n === 'port') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature)));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_ap(s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							A2($elm$core$List$cons, s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7 = 8;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(2, 'js-n');
		case 1:
			return _Utils_Tuple2(3, 'js-s');
		case 2:
			return _Utils_Tuple2(4, 'js-k');
		case 3:
			return _Utils_Tuple2(5, 'js-dk');
		case 4:
			return _Utils_Tuple2(5, 'js-fe');
		case 5:
			return _Utils_Tuple2(6, 'js-f');
		case 6:
			return _Utils_Tuple2(7, 'js-lk');
		case 7:
			return _Utils_Tuple2(8, 'js-p');
		default:
			return _Utils_Tuple2(6, 'js-ce');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet = $elm$core$Set$fromList(
	_List_fromArray(
		['{', '}', '(', ')', '[', ']', ',', ';']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isGroupChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isGroupChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar = function (c) {
	return c === '/';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '*', '/', '=', '!', '<', '>', '&', '|', '?', '^', ':', '~', '%', '.']));
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$union, dict1, dict2);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$punctuactorSet = A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isPunctuaction = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$punctuactorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isStringLiteralChar = function (c) {
	return (c === '\"') || ((c === '\'') || (c === '`'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isPunctuaction(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isStringLiteralChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$DeclarationKeyword = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Function = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$LiteralKeyword = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Param = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$ClassExtends = 8;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('//'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		l6: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		rb: '*/',
		m1: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList]),
		m8: false,
		m9: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		tz: '/*'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classExtendsLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(8),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$andThen,
				function (n) {
					return (n === 'extends') ? A2(
						$elm$parser$Parser$map,
						$elm$parser$Parser$Loop,
						A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
									n),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classExtendsLoop)) : $elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
									n),
								revTokens)));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$argLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ((c === ',') || (c === ')'))));
						}))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (c === '/') || (c === ',');
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				A2(
				$elm$parser$Parser$map,
				function (_v0) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
								'*'),
							revTokens));
				},
				$elm$parser$Parser$symbol('*')),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v1) {
						return A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$argLoop);
					},
					$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$FunctionEval = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionEvalLoop = F3(
	function (identifier, revTokens, thisRevToken) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(thisRevToken),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							_Utils_ap(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
									thisRevToken),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
										identifier),
									revTokens)));
					},
					$elm$parser$Parser$symbol('(')),
					$elm$parser$Parser$succeed(
					$elm$parser$Parser$Done(
						_Utils_ap(
							thisRevToken,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, identifier),
								revTokens))))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$declarationKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['var', 'const', 'let']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isDeclarationKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$declarationKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['break', 'do', 'instanceof', 'typeof', 'case', 'else', 'new', 'catch', 'finally', 'return', 'void', 'continue', 'for', 'switch', 'while', 'debugger', 'this', 'with', 'default', 'if', 'throw', 'delete', 'in', 'try', 'enum', 'extends', 'export', 'import', 'implements', 'private', 'public', 'yield', 'interface', 'package', 'protected']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$literalKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['true', 'false', 'null', 'undefined', 'NaN', 'Infinity']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isLiteralKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$literalKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordParser = F2(
	function (revTokens, n) {
		return ((n === 'function') || (n === 'static')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop) : ((n === 'class') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classDeclarationLoop) : (((n === 'this') || (n === 'super')) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
					n),
				revTokens)) : ((n === 'constructor') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isDeclarationKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isLiteralKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					n),
				revTokens)) : A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionEvalLoop, n, revTokens))))))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Number = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isOperatorChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$String = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter = {
	l6: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
			b);
	},
	rb: '\'',
	m1: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable]),
	m8: false,
	m9: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	tz: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter,
		{rb: '\"', tz: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$templateString = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter,
		{
			rb: '`',
			m1: _List_fromArray(
				[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable]),
			m9: function (c) {
				return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
			},
			tz: '`'
		}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$templateString]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$number]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle = function (syntax) {
	return _Utils_Tuple2(0, 'nolang');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$whitespace = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$space, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$lineBreak]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$always(true)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(2, 'py-n');
		case 1:
			return _Utils_Tuple2(3, 'py-s');
		case 2:
			return _Utils_Tuple2(4, 'py-k');
		case 3:
			return _Utils_Tuple2(5, 'py-dk');
		case 5:
			return _Utils_Tuple2(6, 'py-f');
		case 6:
			return _Utils_Tuple2(7, 'py-lk');
		case 7:
			return _Utils_Tuple2(8, 'py-p');
		default:
			return _Utils_Tuple2(0, 'py-fe');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet = $elm$core$Set$fromList(
	_List_fromArray(
		['{', '}', '(', ')', '[', ']', ',', ';']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isGroupChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isGroupChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar = function (c) {
	return c === '#';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '*', '/', '=', '!', '<', '>', '&', '|', '?', '^', ':', '~', '%', '.']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$punctuationSet = A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isPunctuation = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$punctuationSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isStringLiteralChar = function (c) {
	return (c === '\"') || (c === '\'');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isPunctuation(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isStringLiteralChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$DeclarationKeyword = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$FunctionEval = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Keyword = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$LiteralKeyword = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Function = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('#'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		l6: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		rb: '\'\'\'',
		m1: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak]),
		m8: false,
		m9: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		tz: '\'\'\''
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$classDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Param = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$argLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ((c === ',') || (c === ')'))));
						}))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (c === '/') || (c === ',');
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v0) {
						return A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$argLoop);
					},
					$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionEvalLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (_v0) {
					return $elm$parser$Parser$Done(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens));
				},
				$elm$parser$Parser$symbol('(')),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['finally', 'is', 'return', 'continue', 'for', 'lambda', 'try', 'from', 'nonlocal', 'while', 'and', 'del', 'global', 'not', 'with', 'as', 'elif', 'if', 'or', 'yield', 'assert', 'else', 'import', 'pass', 'break', 'except', 'in', 'raise']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$literalKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['True', 'False', 'None']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isLiteralKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$literalKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordParser = F2(
	function (revTokens, n) {
		return (n === 'def') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionDeclarationLoop) : ((n === 'class') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$classDeclarationLoop) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isLiteralKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					n),
				revTokens)) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionEvalLoop))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Number = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isOperatorChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$String = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter = {
	l6: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
			b);
	},
	rb: '\'',
	m1: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak]),
	m8: false,
	m9: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	tz: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter,
		{rb: '\"', tz: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$doubleQuote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$number]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $elm$html$Html$code = _VirtualDom_node('code');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal = 0;
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString = function (required) {
	return 'elmsh' + function () {
		switch (required) {
			case 0:
				return '0';
			case 1:
				return '-comm';
			case 2:
				return '1';
			case 3:
				return '2';
			case 4:
				return '3';
			case 5:
				return '4';
			case 6:
				return '5';
			case 7:
				return '6';
			default:
				return '7';
		}
	}();
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView = function (_v0) {
	var text = _v0.o5;
	var requiredStyle = _v0.s1;
	var additionalClass = _v0.pL;
	return ((!requiredStyle) && $elm$core$String$isEmpty(additionalClass)) ? $elm$html$Html$text(text) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString(requiredStyle),
						!(!requiredStyle)),
						_Utils_Tuple2('elmsh-' + additionalClass, additionalClass !== '')
					]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(text)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView = F3(
	function (start, index, _v0) {
		var fragments = _v0.rm;
		var highlight = _v0.eb;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('elmsh-line', true),
							_Utils_Tuple2(
							'elmsh-hl',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just(0))),
							_Utils_Tuple2(
							'elmsh-add',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just(1))),
							_Utils_Tuple2(
							'elmsh-del',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just(2)))
						])),
					A2(
					$elm$html$Html$Attributes$attribute,
					'data-elmsh-lc',
					$elm$core$String$fromInt(start + index))
				]),
			A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments));
	});
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml = function (lines) {
	return A2(
		$elm$html$Html$code,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elmsh')
			]),
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var highlight = _v0.eb;
					var fragments = _v0.rm;
					return _Utils_eq(highlight, $elm$core$Maybe$Nothing) ? A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments) : _List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$classList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'elmsh-hl',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just(0))),
											_Utils_Tuple2(
											'elmsh-add',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just(1))),
											_Utils_Tuple2(
											'elmsh-del',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just(2)))
										]))
								]),
							A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments))
						]);
				},
				lines)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml = F2(
	function (maybeStart, lines) {
		if (maybeStart.$ === 1) {
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				_List_fromArray(
					[
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml(lines)
					]));
		} else {
			var start = maybeStart.a;
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				$elm$core$List$singleton(
					A2(
						$elm$html$Html$code,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView(start),
							lines))));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml = F2(
	function (maybeStart, _v0) {
		var lines = _v0;
		return A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml, maybeStart, lines);
	});
var $author$project$Render$VerbatimBlock$viewCodeWithHighlight_ = F2(
	function (language, code_) {
		var lines_ = $elm$core$String$lines(code_);
		var code = function () {
			var _v1 = $elm$core$List$head(lines_);
			if (!_v1.$) {
				var firstLine = _v1.a;
				return (A2($elm$core$String$left, 2, firstLine) === '  ') ? A2(
					$elm$core$String$join,
					'\n',
					A2(
						$elm$core$List$map,
						function (line) {
							return A2($elm$core$String$dropLeft, 2, line);
						},
						lines_)) : code_;
			} else {
				return code_;
			}
		}();
		switch (language) {
			case 'python':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python(code)));
			case 'javascript':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript(code)));
			case 'elm':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm(code)));
			case 'noLang':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm(code)));
			default:
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang(code)));
		}
	});
var $author$project$Render$VerbatimBlock$viewCodeWithHighlight = F3(
	function (settings, language, code) {
		return _List_fromArray(
			[
				function () {
				var _v0 = settings.h7;
				if (_v0 === 1) {
					return $author$project$Render$VerbatimBlock$darkCSS2;
				} else {
					return $author$project$Render$VerbatimBlock$lightCSS2;
				}
			}(),
				$mdgriffith$elm_ui$Element$html(
				A2($author$project$Render$VerbatimBlock$viewCodeWithHighlight_, language, code))
			]);
	});
var $author$project$Render$VerbatimBlock$renderCode = F5(
	function (count, acc, settings, attr, block) {
		var language = function () {
			var _v1 = $elm$core$List$head(block.lv);
			if (!_v1.$) {
				var arg = _v1.a;
				return (arg === 'numbered') ? 'python' : arg;
			} else {
				return 'plain';
			}
		}();
		var bgColor = function () {
			var _v0 = settings.h7;
			if (_v0 === 1) {
				return $author$project$Render$Settings$toElementColor($author$project$Render$Settings$darkTheme.lV);
			} else {
				return $author$project$Render$Settings$toElementColor($author$project$Render$Settings$lightTheme.lV);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Constants$syncHighlightColor),
						A2($mdgriffith$elm_ui$Element$paddingXY, 18, 12),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE)),
						$mdgriffith$elm_ui$Element$scrollbarX,
						$mdgriffith$elm_ui$Element$Font$size(13)
					]),
				_Utils_ap(
					A2($author$project$Render$Sync$attributes, settings, block),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(bgColor)
						]))),
			A3(
				$author$project$Render$VerbatimBlock$viewCodeWithHighlight,
				settings,
				language,
				$author$project$Render$Utility$getVerbatimContent(block)));
	});
var $author$project$ScriptaV2$Msg$LoadFile = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Active = 2;
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 1:
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						ry: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.ry, add, context));
							}),
						oY: styled.oY
					});
			case 0:
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 2:
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 4:
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 10:
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			2,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $author$project$Render$VerbatimBlock$renderLoad = F5(
	function (_v0, _v1, _v2, _v3, block) {
		var _v4 = block.qh;
		if (!_v4.$) {
			var url = _v4.a;
			var tag = A2(
				$elm$core$Maybe$withDefault,
				'default',
				$elm$core$List$head(block.lv));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					fI: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$rounded(12),
								$mdgriffith$elm_ui$Element$mouseDown(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0.2, 0.9))
									])),
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$padding(12)
							]),
						$mdgriffith$elm_ui$Element$text('load ' + (url + (' into ' + tag)))),
					ka: $elm$core$Maybe$Just(
						A2($author$project$ScriptaV2$Msg$LoadFile, tag, url))
				});
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Helper$renderNothing = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$VerbatimBlock$renderVerbatimLine = F2(
	function (lang, str) {
		var spacer = function (s) {
			var n = $elm$core$String$length(s) - $elm$core$String$length(
				$elm$core$String$trimLeft(s));
			return $mdgriffith$elm_ui$Element$paddingEach(
				{iG: 0, jG: n * 8, kC: 0, k2: 0});
		};
		return ($elm$core$String$trim(str) === '') ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					spacer(str),
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(11)),
							$mdgriffith$elm_ui$Element$Font$size(13)
						]),
					$mdgriffith$elm_ui$Element$text(''))
				])) : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					spacer(str),
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(22)),
							$mdgriffith$elm_ui$Element$Font$size(13)
						]),
					$mdgriffith$elm_ui$Element$text(str))
				]));
	});
var $author$project$Render$VerbatimBlock$renderVerbatim = F5(
	function (_v0, _v1, settings, attrs, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$family(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
								$mdgriffith$elm_ui$Element$Font$monospace
							])),
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Constants$syncHighlightColor),
						$mdgriffith$elm_ui$Element$paddingEach(
						{iG: 0, jG: 24, kC: 0, k2: 0}),
						$mdgriffith$elm_ui$Element$Font$size(13)
					]),
				_Utils_ap(
					attrs,
					A2($author$project$Render$Sync$attributes, settings, block))),
			A2(
				$elm$core$List$map,
				$author$project$Render$VerbatimBlock$renderVerbatimLine('none'),
				$elm$core$String$lines(
					$elm$core$String$trim(
						$author$project$Render$Utility$getVerbatimContent(block)))));
	});
var $author$project$Render$Helper$leftPadding = function (k) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{iG: 0, jG: k, kC: 0, k2: 0});
};
var $author$project$Render$VerbatimBlock$verbatimBlockAttributes = F3(
	function (lineNumber, numberOfLines, attrs) {
		return _Utils_ap(
			_List_fromArray(
				[
					A2($author$project$Render$Sync$rightToLeftSyncHelper, lineNumber, numberOfLines),
					$author$project$Render$Utility$idAttributeFromInt(lineNumber)
				]),
			attrs);
	});
var $author$project$Render$VerbatimBlock$renderVerse = F5(
	function (_v0, _v1, settings, attrs, block) {
		var lines_ = $elm$core$String$lines(
			$author$project$Render$Utility$getVerbatimContent(block));
		var lines = function () {
			var _v2 = $elm$core$List$head(lines_);
			if (!_v2.$) {
				var firstLine = _v2.a;
				return (A2($elm$core$String$left, 2, firstLine) === '  ') ? A2(
					$elm$core$List$map,
					function (line) {
						return A2($elm$core$String$dropLeft, 2, line);
					},
					lines_) : lines_;
			} else {
				return lines_;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2($author$project$Render$Sync$attributes, settings, block)),
			_List_fromArray(
				[
					A3(
					$author$project$Render$Helper$noteFromPropertyKey,
					'title',
					_List_fromArray(
						[
							$author$project$Render$Helper$leftPadding(12),
							$mdgriffith$elm_ui$Element$Font$bold
						]),
					block),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						A3(
							$author$project$Render$VerbatimBlock$verbatimBlockAttributes,
							block.nJ.jR,
							block.nJ.n_,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$paddingEach(
									{iG: 0, jG: 12, kC: 0, k2: 0})
								])),
						attrs),
					A2(
						$elm$core$List$map,
						$author$project$Render$VerbatimBlock$renderVerbatimLine('plain'),
						lines)),
					A3(
					$author$project$Render$Helper$noteFromPropertyKey,
					'source',
					_List_fromArray(
						[
							$author$project$Render$Helper$leftPadding(12)
						]),
					block)
				]));
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$virtual_dom$VirtualDom$nodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_nodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $elm$svg$Svg$node = $elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var $elm$virtual_dom$VirtualDom$attributeNS = F3(
	function (namespace, key, value) {
		return A3(
			_VirtualDom_attributeNS,
			namespace,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $Garados007$elm_svg_parser$SvgParser$toAttribute = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return A2($elm$core$String$startsWith, 'xlink:', name) ? A3($elm$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', name, value) : (A2($elm$core$String$startsWith, 'xml:', name) ? A3($elm$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', name, value) : A2($elm$virtual_dom$VirtualDom$attribute, name, value));
};
var $Garados007$elm_svg_parser$SvgParser$elementToSvg = function (element) {
	return A3(
		$elm$svg$Svg$node,
		element.bn,
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.iz),
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.qw));
};
var $Garados007$elm_svg_parser$SvgParser$nodeToSvg = function (svgNode) {
	switch (svgNode.$) {
		case 0:
			var element = svgNode.a;
			return $Garados007$elm_svg_parser$SvgParser$elementToSvg(element);
		case 1:
			var content = svgNode.a;
			return $elm$svg$Svg$text(content);
		default:
			var content = svgNode.a;
			return $elm$svg$Svg$text('');
	}
};
var $andre_dietrich$parser_combinators$Combine$Parser = $elm$core$Basics$identity;
var $andre_dietrich$parser_combinators$Combine$app = function (_v0) {
	var inner = _v0;
	return inner;
};
var $andre_dietrich$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return A3(
						$andre_dietrich$parser_combinators$Combine$app,
						f(res),
						rstate,
						rstream);
				} else {
					var estate = _v0.a;
					var estream = _v0.b;
					var ms = _v0.c.a;
					return _Utils_Tuple3(
						estate,
						estream,
						$elm$core$Result$Err(ms));
				}
			});
	});
var $pilatch$flip$Flip$flip = F3(
	function (_function, argB, argA) {
		return A2(_function, argA, argB);
	});
var $andre_dietrich$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return _Utils_Tuple3(
						rstate,
						rstream,
						$elm$core$Result$Ok(
							fok(res)));
				} else {
					var estate = _v0.a;
					var estream = _v0.b;
					var ms = _v0.c.a;
					return _Utils_Tuple3(
						estate,
						estream,
						$elm$core$Result$Err(
							ferr(ms)));
				}
			});
	});
var $andre_dietrich$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3($andre_dietrich$parser_combinators$Combine$bimap, f, $elm$core$Basics$identity, p);
	});
var $andre_dietrich$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			A2($pilatch$flip$Flip$flip, $andre_dietrich$parser_combinators$Combine$map, rp),
			lp);
	});
var $Garados007$elm_svg_parser$SvgParser$flip = F3(
	function (func, b, a) {
		return A2(func, a, b);
	});
var $Garados007$elm_svg_parser$SvgParser$andMapRight = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
				lp));
	});
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $andre_dietrich$parser_combinators$Combine$regexer = F5(
	function (input, output, pat, state, stream) {
		var pattern = A2($elm$core$String$startsWith, '^', pat) ? pat : ('^' + pat);
		var _v0 = A3(
			$elm$regex$Regex$findAtMost,
			1,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				input(pattern)),
			stream.cb);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			var len = $elm$core$String$length(match.nB);
			var pos = stream.sO + len;
			var rem = A2($elm$core$String$dropLeft, len, stream.cb);
			return _Utils_Tuple3(
				state,
				_Utils_update(
					stream,
					{cb: rem, sO: pos}),
				$elm$core$Result$Ok(
					output(match)));
		} else {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(
					_List_fromArray(
						['expected input matching Regexp /' + (pattern + '/')])));
		}
	});
var $andre_dietrich$parser_combinators$Combine$regex = A2(
	$elm$core$Basics$composeR,
	A2(
		$andre_dietrich$parser_combinators$Combine$regexer,
		$elm$regex$Regex$fromString,
		function ($) {
			return $.nB;
		}),
	$elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$mapError = $andre_dietrich$parser_combinators$Combine$bimap($elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$onerror = F2(
	function (m, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$mapError,
			$elm$core$Basics$always(
				_List_fromArray(
					[m])),
			p);
	});
var $andre_dietrich$parser_combinators$Combine$whitespace = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'optional whitespace',
	$andre_dietrich$parser_combinators$Combine$regex('\\s*'));
var $Garados007$elm_svg_parser$SvgParser$doctypeDeclarationParser = A2(
	$Garados007$elm_svg_parser$SvgParser$andMapRight,
	$andre_dietrich$parser_combinators$Combine$whitespace,
	$andre_dietrich$parser_combinators$Combine$regex('<!DOCTYPE(?:\"(?:\\\\.|[^\"])*\"|\'(?:\\\\.|[^\'])*\'|[^>])*>'));
var $andre_dietrich$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					if (_Utils_eq(stream, rstream)) {
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$List$reverse(acc));
					} else {
						var $temp$acc = A2($elm$core$List$cons, res, acc),
							$temp$state = rstate,
							$temp$stream = rstream;
						acc = $temp$acc;
						state = $temp$state;
						stream = $temp$stream;
						continue accumulate;
					}
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$List$reverse(acc));
				}
			}
		});
	return F2(
		function (state, stream) {
			var _v1 = A3(accumulate, _List_Nil, state, stream);
			var rstate = _v1.a;
			var rstream = _v1.b;
			var res = _v1.c;
			return _Utils_Tuple3(
				rstate,
				rstream,
				$elm$core$Result$Ok(res));
		});
};
var $Garados007$elm_svg_parser$SvgParser$SvgElement = function (a) {
	return {$: 0, a: a};
};
var $Garados007$elm_svg_parser$SvgParser$andMapLeft = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$always, lp));
	});
var $andre_dietrich$parser_combinators$Combine$emptyErr = F2(
	function (state, stream) {
		return _Utils_Tuple3(
			state,
			stream,
			$elm$core$Result$Err(_List_Nil));
	});
var $andre_dietrich$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
				if (!_v0.c.$) {
					var res = _v0;
					return res;
				} else {
					var lms = _v0.c.a;
					var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
					if (!_v1.c.$) {
						var res = _v1;
						return res;
					} else {
						var rms = _v1.c.a;
						return _Utils_Tuple3(
							state,
							stream,
							$elm$core$Result$Err(
								_Utils_ap(lms, rms)));
					}
				}
			});
	});
var $andre_dietrich$parser_combinators$Combine$choice = function (xs) {
	return A3($elm$core$List$foldr, $andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$emptyErr, xs);
};
var $Garados007$elm_svg_parser$SvgParser$SvgComment = function (a) {
	return {$: 2, a: a};
};
var $andre_dietrich$parser_combinators$Combine$primitive = $elm$core$Basics$identity;
var $andre_dietrich$parser_combinators$Combine$Char$satisfy = function (pred) {
	return $andre_dietrich$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _v0 = $elm$core$String$uncons(stream.cb);
				if (!_v0.$) {
					var _v1 = _v0.a;
					var h = _v1.a;
					var rest = _v1.b;
					return pred(h) ? _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{cb: rest, sO: stream.sO + 1}),
						$elm$core$Result$Ok(h)) : _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				}
			}));
};
var $andre_dietrich$parser_combinators$Combine$Char$anyChar = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected any character',
	$andre_dietrich$parser_combinators$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $andre_dietrich$parser_combinators$Combine$succeed = function (res) {
	return F2(
		function (state, stream) {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Ok(res));
		});
};
var $andre_dietrich$parser_combinators$Combine$lazy = function (t) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		t,
		$andre_dietrich$parser_combinators$Combine$succeed(0));
};
var $andre_dietrich$parser_combinators$Combine$manyTill = F2(
	function (p, end_) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
					if (!_v0.c.$) {
						var rstate = _v0.a;
						var rstream = _v0.b;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								$elm$core$List$reverse(acc)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
						if (!_v1.c.$) {
							var rstate = _v1.a;
							var rstream = _v1.b;
							var res = _v1.c.a;
							var $temp$acc = A2($elm$core$List$cons, res, acc),
								$temp$state = rstate,
								$temp$stream = rstream;
							acc = $temp$acc;
							state = $temp$state;
							stream = $temp$stream;
							continue accumulate;
						} else {
							return _Utils_Tuple3(
								estate,
								estream,
								$elm$core$Result$Err(ms));
						}
					}
				}
			});
		return accumulate(_List_Nil);
	});
var $andre_dietrich$parser_combinators$Combine$string = function (s) {
	return F2(
		function (state, stream) {
			if (A2($elm$core$String$startsWith, s, stream.cb)) {
				var len = $elm$core$String$length(s);
				var pos = stream.sO + len;
				var rem = A2($elm$core$String$dropLeft, len, stream.cb);
				return _Utils_Tuple3(
					state,
					_Utils_update(
						stream,
						{cb: rem, sO: pos}),
					$elm$core$Result$Ok(s));
			} else {
				return _Utils_Tuple3(
					state,
					stream,
					$elm$core$Result$Err(
						_List_fromArray(
							['expected \"' + (s + '\"')])));
			}
		});
};
var $Garados007$elm_svg_parser$SvgParser$commentParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2($elm$core$Basics$composeL, $Garados007$elm_svg_parser$SvgParser$SvgComment, $elm$core$String$fromList),
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					$andre_dietrich$parser_combinators$Combine$string('<!--')),
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					$andre_dietrich$parser_combinators$Combine$Char$anyChar,
					$andre_dietrich$parser_combinators$Combine$string('-->'))));
	});
var $Garados007$elm_svg_parser$SvgParser$Element = F3(
	function (name, attributes, children) {
		return {iz: attributes, qw: children, bn: name};
	});
var $andre_dietrich$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			p,
			$andre_dietrich$parser_combinators$Combine$succeed(res));
	});
var $Garados007$elm_svg_parser$SvgParser$attributeParser = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		'',
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$string('=\"'),
				$andre_dietrich$parser_combinators$Combine$regex('[^\"]*')),
			$andre_dietrich$parser_combinators$Combine$string('\"'))),
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$Tuple$pair,
		$andre_dietrich$parser_combinators$Combine$regex('[^=>/]+')));
var $andre_dietrich$parser_combinators$Combine$keep = F2(
	function (p1, p2) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$pilatch$flip$Flip$flip($elm$core$Basics$always),
				p2));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$many(
				A2($andre_dietrich$parser_combinators$Combine$keep, p, sep)),
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p),
			$andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var $Garados007$elm_svg_parser$SvgParser$openingParser = A3(
	$Garados007$elm_svg_parser$SvgParser$flip,
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$regex('[^/>\\s]+'),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			F3(
				function (_v0, tagName, attributes) {
					return A3($Garados007$elm_svg_parser$SvgParser$Element, tagName, attributes, _List_Nil);
				}),
			$andre_dietrich$parser_combinators$Combine$string('<'))),
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapLeft,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$whitespace, $Garados007$elm_svg_parser$SvgParser$attributeParser)),
		$andre_dietrich$parser_combinators$Combine$whitespace));
var $Garados007$elm_svg_parser$SvgParser$SvgText = function (a) {
	return {$: 1, a: a};
};
var $Garados007$elm_svg_parser$SvgParser$textParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$Garados007$elm_svg_parser$SvgParser$SvgText,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$whitespace,
				$andre_dietrich$parser_combinators$Combine$regex('[^<]+')));
	});
var $Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser = function (element) {
	var childrenParser = A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (children) {
			return _Utils_update(
				element,
				{qw: children});
		},
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapLeft,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						$andre_dietrich$parser_combinators$Combine$whitespace,
						$andre_dietrich$parser_combinators$Combine$string('>')),
					$andre_dietrich$parser_combinators$Combine$many(
						$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser())),
				$andre_dietrich$parser_combinators$Combine$whitespace),
			$andre_dietrich$parser_combinators$Combine$string('</' + (element.bn + '>'))));
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v2) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						A2(
							$Garados007$elm_svg_parser$SvgParser$andMapRight,
							$andre_dietrich$parser_combinators$Combine$whitespace,
							$andre_dietrich$parser_combinators$Combine$string('/>')),
						$andre_dietrich$parser_combinators$Combine$succeed(element)),
						childrenParser
					]));
		});
};
function $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v1) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$SvgElement,
				A2(
					$andre_dietrich$parser_combinators$Combine$andThen,
					$Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser,
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$Garados007$elm_svg_parser$SvgParser$openingParser,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
							$andre_dietrich$parser_combinators$Combine$whitespace))));
		});
}
function $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v0) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						$Garados007$elm_svg_parser$SvgParser$textParser,
						$Garados007$elm_svg_parser$SvgParser$commentParser,
						$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser()
					]));
		});
}
var $Garados007$elm_svg_parser$SvgParser$elementParser = $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser();
$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser = function () {
	return $Garados007$elm_svg_parser$SvgParser$elementParser;
};
var $Garados007$elm_svg_parser$SvgParser$nodeParser = $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser();
$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser = function () {
	return $Garados007$elm_svg_parser$SvgParser$nodeParser;
};
var $andre_dietrich$parser_combinators$Combine$InputStream = F3(
	function (data, input, position) {
		return {qR: data, cb: input, sO: position};
	});
var $andre_dietrich$parser_combinators$Combine$initStream = function (s) {
	return A3($andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
};
var $andre_dietrich$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$app,
			p,
			st,
			$andre_dietrich$parser_combinators$Combine$initStream(s));
		if (!_v0.c.$) {
			var state = _v0.a;
			var stream = _v0.b;
			var res = _v0.c.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple3(state, stream, res));
		} else {
			var state = _v0.a;
			var stream = _v0.b;
			var ms = _v0.c.a;
			return $elm$core$Result$Err(
				_Utils_Tuple3(state, stream, ms));
		}
	});
var $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$fromList,
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapRight,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			$andre_dietrich$parser_combinators$Combine$string('<?xml')),
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			$andre_dietrich$parser_combinators$Combine$Char$anyChar,
			$andre_dietrich$parser_combinators$Combine$string('?>'))));
var $Garados007$elm_svg_parser$SvgParser$parseToNodes = function (input) {
	var _v0 = A3(
		$andre_dietrich$parser_combinators$Combine$runParser,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			A2($andre_dietrich$parser_combinators$Combine$optional, '', $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser),
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				A2($andre_dietrich$parser_combinators$Combine$optional, '', $Garados007$elm_svg_parser$SvgParser$doctypeDeclarationParser),
				$andre_dietrich$parser_combinators$Combine$many($Garados007$elm_svg_parser$SvgParser$nodeParser))),
		_List_Nil,
		input);
	if (!_v0.$) {
		var _v1 = _v0.a;
		var svgNodes = _v1.c;
		return $elm$core$Result$Ok(svgNodes);
	} else {
		var _v2 = _v0.a;
		var errors = _v2.c;
		return $elm$core$Result$Err(
			A2($elm$core$String$join, ' or ', errors));
	}
};
var $Garados007$elm_svg_parser$SvgParser$parse = function (input) {
	var toHtml = function (svgNodes) {
		toHtml:
		while (true) {
			if (svgNodes.b) {
				if (!svgNodes.a.$) {
					var element = svgNodes.a.a;
					var tl = svgNodes.b;
					if (element.bn === 'svg') {
						return $elm$core$Result$Ok(
							A2(
								$elm$svg$Svg$svg,
								A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.iz),
								A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.qw)));
					} else {
						var $temp$svgNodes = tl;
						svgNodes = $temp$svgNodes;
						continue toHtml;
					}
				} else {
					var tl = svgNodes.b;
					var $temp$svgNodes = tl;
					svgNodes = $temp$svgNodes;
					continue toHtml;
				}
			} else {
				return $elm$core$Result$Err('No svg found');
			}
		}
	};
	return A2(
		$elm$core$Result$andThen,
		toHtml,
		$Garados007$elm_svg_parser$SvgParser$parseToNodes(input));
};
var $author$project$Render$Graphics$svg = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = $Garados007$elm_svg_parser$SvgParser$parse(
			$author$project$Render$Graphics$getVerbatimContent(block));
		if (!_v0.$) {
			var html_ = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 0, jG: 0, kC: 0, k2: 24}),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE))
						]),
					_Utils_ap(
						attrs,
						A2($author$project$Render$Sync$attributes, settings, block))),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(html_)
							]))
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('SVG parse error'));
		}
	});
var $author$project$Render$Math$textarray = F5(
	function (count, acc, settings, attrs, block) {
		var str = function () {
			var _v1 = block.qh;
			if (!_v1.$) {
				var str_ = _v1.a;
				return str_;
			} else {
				return '';
			}
		}();
		var fixrow = function (str_) {
			return A2(
				$elm$core$String$join,
				' & ',
				A2(
					$elm$core$List$map,
					function (s) {
						return '\\text{' + (s + '}');
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2($elm$core$String$split, '&', str_))));
		};
		var filteredLines = A2(
			$elm$core$List$map,
			fixrow,
			A2(
				$elm$core$List$filter,
				function (line) {
					return (!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === ''));
				},
				$elm$core$String$lines(str)));
		var mNumberOfColumns = A2(
			$elm$core$Maybe$map,
			$elm$core$List$length,
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$split('&'),
				$elm$core$List$head(filteredLines)));
		var deleteTrailingSlashes = function (inputString) {
			var str_ = $elm$core$String$trim(inputString);
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var defaultFormat = function () {
			if (mNumberOfColumns.$ === 1) {
				return '';
			} else {
				var n = mNumberOfColumns.a;
				return A2(
					$elm$core$String$join,
					'',
					A2($elm$core$List$repeat, n, 'c'));
			}
		}();
		var format = A2(
			$elm$core$Maybe$withDefault,
			defaultFormat,
			A2($elm_community$list_extra$List$Extra$getAt, 1, block.lv));
		var adjustedLines_ = A2(
			$elm$core$List$filter,
			function (line) {
				return line !== '';
			},
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					deleteTrailingSlashes,
					$author$project$ETeX$Transform$evalStr(acc.jS)),
				filteredLines));
		var innerContent = A2($elm$core$String$join, '\\\\\n', adjustedLines_);
		var content = '\\begin{array}{' + (format + ('}\n' + (innerContent + '\n\\end{array}')));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.uE))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE)),
						A2($author$project$Render$Sync$attributes, settings, block)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Render$Sync$attributes, settings, block)),
							A6(
								$author$project$Render$Math$mathText,
								$author$project$Render$ThemeHelpers$themeAsStringFromSettings(settings),
								count,
								str,
								block.nJ.hg,
								1,
								content))
						]))
				]));
	});
var $author$project$Render$Graphics$tikz = F5(
	function (count, acc, settings, attrs, block) {
		var maybePair_ = function () {
			var _v2 = A2(
				$elm$core$String$split,
				'---',
				$author$project$Render$Graphics$getVerbatimContent(block));
			if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
				var a = _v2.a;
				var _v3 = _v2.b;
				var b = _v3.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (maybePair_.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Graphics$red)
					]),
				$mdgriffith$elm_ui$Element$text('Something is wrong'));
		} else {
			var _v1 = maybePair_.a;
			var imageData = _v1.a;
			var params = A2(
				$author$project$Render$Graphics$imageParameters,
				settings,
				$elm$core$String$words(imageData));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE)),
							params.fW,
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 18)
						]),
					_Utils_ap(
						attrs,
						A2($author$project$Render$Sync$attributes, settings, block))),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(params.uE),
								params.fW
							]),
						{q$: params.q$, oV: params.uz}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[params.fW]),
						params.fb)
					]));
		}
	});
var $author$project$Render$VerbatimBlock$verbatimDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('math', $author$project$Render$Math$displayedMath),
			_Utils_Tuple2('chem', $author$project$Render$Math$chem),
			_Utils_Tuple2('equation', $author$project$Render$Math$equation),
			_Utils_Tuple2('aligned', $author$project$Render$Math$aligned),
			_Utils_Tuple2('array', $author$project$Render$Math$array),
			_Utils_Tuple2('textarray', $author$project$Render$Math$textarray),
			_Utils_Tuple2('table', $author$project$Render$Math$textarray),
			_Utils_Tuple2('code', $author$project$Render$VerbatimBlock$renderCode),
			_Utils_Tuple2('verse', $author$project$Render$VerbatimBlock$renderVerse),
			_Utils_Tuple2('verbatim', $author$project$Render$VerbatimBlock$renderVerbatim),
			_Utils_Tuple2('load', $author$project$Render$VerbatimBlock$renderLoad),
			_Utils_Tuple2('load-data', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('hide', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('texComment', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('docinfo', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('mathmacros', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('textmacros', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('csvtable', $author$project$Render$CSVTable$render),
			_Utils_Tuple2('chart', $author$project$Render$ChartV2$render),
			_Utils_Tuple2('svg', $author$project$Render$Graphics$svg),
			_Utils_Tuple2('quiver', $author$project$Render$Graphics$quiver),
			_Utils_Tuple2('image', $author$project$Render$Graphics$image2),
			_Utils_Tuple2('tikz', $author$project$Render$Graphics$tikz),
			_Utils_Tuple2('load-files', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('include', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('setup', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('iframe', $author$project$Render$IFrame$render)
		]));
var $author$project$Render$VerbatimBlock$render = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.qh;
		if (_v0.$ === 1) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var str = _v0.a;
			var _v1 = block.fC;
			if (_v1.$ === 2) {
				var functionName_ = _v1.a;
				var functionName = (functionName_ === 'table') ? 'textarray' : functionName_;
				var _v2 = A2($elm$core$Dict$get, functionName, $author$project$Render$VerbatimBlock$verbatimDict);
				if (_v2.$ === 1) {
					return A2($author$project$Render$Helper$noSuchVerbatimBlock, functionName, str);
				} else {
					var f = _v2.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							_List_fromArray(
								[
									A2($author$project$Render$Helper$selectedColor, block.nJ.hg, settings),
									$author$project$Render$Helper$htmlId(block.nJ.hg)
								]),
							attrs),
						A5(f, count, acc, settings, attrs, block));
				}
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}
	});
var $author$project$Render$Block$renderParagraphBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.qh;
		if (_v0.$ === 1) {
			var exprs = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				A2(
					$elm$core$List$cons,
					$author$project$Render$Helper$htmlId(block.nJ.hg),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE)),
						attrs)),
				A2(
					$elm$core$List$map,
					A4($author$project$Render$Expression$render, count, acc, settings, attrs),
					exprs));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Helper$showError = F2(
	function (maybeError, x) {
		if (maybeError.$ === 1) {
			return x;
		} else {
			var error = maybeError.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						x,
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
							]),
						$mdgriffith$elm_ui$Element$text(error))
					]));
		}
	});
var $author$project$Render$Block$renderBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.fC;
		switch (_v0.$) {
			case 0:
				return $elm$core$List$singleton(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_Nil,
						_List_fromArray(
							[
								A5($author$project$Render$Block$renderParagraphBody, count, acc, settings, attrs, block)
							])));
			case 1:
				return _List_fromArray(
					[
						A5($author$project$Render$OrdinaryBlock$render, count, acc, settings, attrs, block)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$author$project$Render$Helper$showError,
						block.nJ.mo,
						A5($author$project$Render$VerbatimBlock$render, count, acc, settings, attrs, block))
					]);
		}
	});
var $author$project$Render$Color$boxBackground = function (theme) {
	return A2(
		$author$project$Render$Settings$getThemedElementColor,
		function ($) {
			return $.sx;
		},
		theme);
};
var $author$project$Render$Attributes$standardLeftPadding = 12;
var $author$project$Render$Attributes$standardSpacing = 11;
var $author$project$Render$Attributes$getBoxAttributes = function (theme) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$spacing($author$project$Render$Attributes$standardSpacing),
			A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Render$Attributes$standardLeftPadding, $author$project$Render$Attributes$standardLeftPadding),
			$mdgriffith$elm_ui$Element$Background$color(
			$author$project$Render$Color$boxBackground(theme))
		]);
};
var $author$project$Render$Attributes$getIndentAttributes = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$spacing($author$project$Render$Attributes$standardSpacing),
		$mdgriffith$elm_ui$Element$paddingEach(
		{iG: 0, jG: $author$project$Render$Attributes$standardLeftPadding, kC: 0, k2: 0})
	]);
var $author$project$Render$Attributes$getItalicAttributes = _List_fromArray(
	[$mdgriffith$elm_ui$Element$Font$italic]);
var $author$project$Render$Attributes$getQuotationAttributes = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$paddingEach(
		{iG: 0, jG: $author$project$Render$Attributes$standardLeftPadding, kC: 0, k2: 0})
	]);
var $author$project$Render$Attributes$italicBlockNames = _List_fromArray(
	['aside', 'note', 'warning', 'exercise', 'problem', 'theorem', 'proof', 'definition', 'principle', 'construction', 'axiom', 'lemma', 'corollary', 'proposition', 'example', 'remark', 'question', 'answer']);
var $author$project$Render$Color$redText = A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0);
var $author$project$Render$BlockType$toString = function (blockType) {
	switch (blockType.$) {
		case 0:
			switch (blockType.a) {
				case 0:
					var _v1 = blockType.a;
					return 'indent';
				case 1:
					var _v2 = blockType.a;
					return 'center';
				case 2:
					var _v3 = blockType.a;
					return 'quotation';
				case 3:
					var _v4 = blockType.a;
					return 'identity';
				case 4:
					var _v5 = blockType.a;
					return 'compact';
				case 5:
					var _v6 = blockType.a;
					return 'red';
				case 6:
					var _v7 = blockType.a;
					return 'red2';
				default:
					var _v8 = blockType.a;
					return 'blue';
			}
		case 1:
			switch (blockType.a) {
				case 0:
					var _v9 = blockType.a;
					return 'box';
				case 1:
					var _v10 = blockType.a;
					return 'env';
				case 2:
					var _v11 = blockType.a;
					return 'comment';
				case 3:
					var _v12 = blockType.a;
					return 'collection';
				default:
					var _v13 = blockType.a;
					return 'bibitem';
			}
		case 2:
			switch (blockType.a) {
				case 0:
					var _v14 = blockType.a;
					return 'title';
				case 1:
					var _v15 = blockType.a;
					return 'subtitle';
				case 2:
					var _v16 = blockType.a;
					return 'author';
				case 3:
					var _v17 = blockType.a;
					return 'date';
				case 4:
					var _v18 = blockType.a;
					return 'section';
				case 5:
					var _v19 = blockType.a;
					return 'section*';
				case 6:
					var _v20 = blockType.a;
					return 'subheading';
				case 7:
					var _v21 = blockType.a;
					return 'contents';
				case 8:
					var _v22 = blockType.a;
					return 'banner';
				case 9:
					var _v23 = blockType.a;
					return 'visibleBanner';
				case 10:
					var _v24 = blockType.a;
					return 'runninghead_';
				case 11:
					var _v25 = blockType.a;
					return 'document';
				case 12:
					var _v26 = blockType.a;
					return 'tags';
				default:
					var _v27 = blockType.a;
					return 'type';
			}
		case 3:
			switch (blockType.a) {
				case 0:
					var _v28 = blockType.a;
					return 'q';
				case 1:
					var _v29 = blockType.a;
					return 'a';
				default:
					var _v30 = blockType.a;
					return 'reveal';
			}
		case 4:
			switch (blockType.a) {
				case 0:
					var _v31 = blockType.a;
					return 'item';
				case 1:
					var _v32 = blockType.a;
					return 'numbered';
				default:
					var _v33 = blockType.a;
					return 'desc';
			}
		default:
			var str = blockType.a;
			return str;
	}
};
var $author$project$Render$Attributes$getTypeSpecificAttributes = F2(
	function (theme, blockType) {
		switch (blockType.$) {
			case 0:
				var textType = blockType.a;
				switch (textType) {
					case 0:
						return $author$project$Render$Attributes$getIndentAttributes;
					case 2:
						return $author$project$Render$Attributes$getQuotationAttributes;
					case 5:
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$redText)
							]);
					case 6:
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$redText)
							]);
					case 7:
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue)
							]);
					default:
						return _List_Nil;
				}
			case 1:
				var containerType = blockType.a;
				if (!containerType) {
					return $author$project$Render$Attributes$getBoxAttributes(theme);
				} else {
					return _List_Nil;
				}
			default:
				return A2(
					$elm$core$List$member,
					$author$project$Render$BlockType$toString(blockType),
					$author$project$Render$Attributes$italicBlockNames) ? $author$project$Render$Attributes$getItalicAttributes : _List_Nil;
		}
	});
var $author$project$Render$Attributes$getBlockAttributes = F2(
	function (block, settings) {
		var standardAttrs = _List_fromArray(
			[
				$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR)
			]);
		var blockName = A2(
			$elm$core$Maybe$withDefault,
			'',
			$author$project$Generic$BlockUtilities$getExpressionBlockName(block));
		var blockType = $author$project$Render$BlockType$fromString(blockName);
		return _Utils_ap(
			standardAttrs,
			A2($author$project$Render$Attributes$getTypeSpecificAttributes, settings.h7, blockType));
	});
var $author$project$Render$Tree$getBlockAttributes = F2(
	function (block, settings) {
		return A2($author$project$Render$Attributes$getBlockAttributes, block, settings);
	});
var $author$project$Render$Tree$getBlockType = function (block) {
	var _v0 = block.fC;
	if (_v0.$ === 1) {
		var name = _v0.a;
		return $author$project$Render$BlockType$fromString(name);
	} else {
		return $author$project$Render$BlockType$MiscBlock('');
	}
};
var $mdgriffith$elm_ui$Internal$Model$Focus = 0;
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			0,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $author$project$Render$OrdinaryBlock$getAttributes = F2(
	function (theme, name) {
		var blockType = $author$project$Render$BlockType$fromString(name);
		if ((blockType.$ === 1) && (!blockType.a)) {
			var _v1 = blockType.a;
			return _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					$author$project$Render$Color$boxBackground(theme))
				]);
		} else {
			return A2($elm$core$List$member, name, $author$project$Render$Attributes$italicBlockNames) ? _List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic]) : _List_Nil;
		}
	});
var $author$project$Render$TreeSupport$syncAttributes = F2(
	function (settings, block) {
		return _Utils_ap(
			_List_fromArray(
				[
					$author$project$Render$Utility$idAttributeFromInt(block.nJ.jR),
					A2($author$project$Render$Sync$rightToLeftSyncHelper, block.nJ.jR, block.nJ.n_)
				]),
			A3($author$project$Render$Sync$highlightIfIdIsSelected, block.nJ.jR, block.nJ.n_, settings));
	});
var $author$project$Render$TreeSupport$renderAttributes = F2(
	function (settings, block) {
		var _v0 = block.fC;
		switch (_v0.$) {
			case 0:
				return A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$focused(_List_Nil),
					A2($author$project$Render$TreeSupport$syncAttributes, settings, block));
			case 1:
				var name = _v0.a;
				return _Utils_ap(
					A2($author$project$Render$TreeSupport$syncAttributes, settings, block),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$focused(_List_Nil),
						A2($author$project$Render$OrdinaryBlock$getAttributes, settings.h7, name)));
			default:
				return A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$focused(_List_Nil),
					A2($author$project$Render$TreeSupport$syncAttributes, settings, block));
		}
	});
var $author$project$Render$TreeSupport$clickableParagraph = F4(
	function (lineNumber, numberOfLines, color, elements) {
		var id = $elm$core$String$fromInt(lineNumber);
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					color,
					A2($author$project$Render$Sync$rightToLeftSyncHelper, lineNumber, numberOfLines),
					$author$project$Render$Helper$htmlId(id)
				]),
			elements);
	});
var $author$project$Render$Indentation$indentParagraph = F2(
	function (indent, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 0, kC: 0, k2: $author$project$Render$Indentation$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$TreeSupport$indentParagraph = F2(
	function (indent, x) {
		return A2($author$project$Render$Indentation$indentParagraph, indent, x);
	});
var $author$project$Render$TreeSupport$renderParagraphBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.qh;
		if (_v0.$ === 1) {
			var exprs = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				A2(
					$elm$core$List$cons,
					$author$project$Render$Helper$htmlId(block.nJ.hg),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.uE)),
						attrs)),
				_List_fromArray(
					[
						A2(
						$author$project$Render$TreeSupport$indentParagraph,
						block.hh,
						A4(
							$author$project$Render$TreeSupport$clickableParagraph,
							block.nJ.jR,
							block.nJ.n_,
							A2($author$project$Render$Helper$selectedColor, block.nJ.hg, settings),
							A2(
								$elm$core$List$map,
								A4($author$project$Render$Expression$render, count, acc, settings, attrs),
								exprs)))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Settings$unrollTheme = function (theme) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color(
			A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.e6;
				},
				theme)),
			$mdgriffith$elm_ui$Element$Font$color(
			A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.o5;
				},
				theme))
		]);
};
var $author$project$Render$TreeSupport$renderBody = F6(
	function (theme, count, acc, settings, _v0, block) {
		var _v1 = block.fC;
		switch (_v1.$) {
			case 0:
				return _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						A2($author$project$Render$Sync$attributes, settings, block),
						_List_fromArray(
							[
								A5(
								$author$project$Render$TreeSupport$renderParagraphBody,
								count,
								acc,
								settings,
								$author$project$Render$Settings$unrollTheme(theme),
								block)
							]))
					]);
			case 1:
				return _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						A2($author$project$Render$Sync$attributes, settings, block),
						_List_fromArray(
							[
								A5(
								$author$project$Render$OrdinaryBlock$render,
								count,
								acc,
								settings,
								$author$project$Render$Settings$unrollTheme(theme),
								block)
							]))
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						A2($author$project$Render$Sync$attributes, settings, block),
						_List_fromArray(
							[
								A2(
								$author$project$Render$Helper$showError,
								block.nJ.mo,
								A5(
									$author$project$Render$VerbatimBlock$render,
									count,
									acc,
									settings,
									$author$project$Render$Settings$unrollTheme(theme),
									block))
							]))
					]);
		}
	});
var $author$project$Render$Tree$renderLeafNode = F6(
	function (theme, count, accumulator, settings, attrs_, root) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				A2($author$project$Render$TreeSupport$renderAttributes, settings, root),
				_Utils_ap(
					A2($author$project$Render$Tree$getBlockAttributes, root, settings),
					$author$project$Render$Settings$unrollTheme(theme))),
			A6($author$project$Render$TreeSupport$renderBody, theme, count, accumulator, settings, attrs_, root));
	});
var $author$project$Render$Tree$renderBoxBranch = F8(
	function (theme, count, accumulator, settings, attrs_, blockAttrs, root, children) {
		var settings_ = _Utils_update(
			settings,
			{
				p6: A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.sx;
					},
					theme),
				uE: settings.uE - 100
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 0, jG: 18, kC: 18, k2: 0})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						A2($author$project$Render$TreeSupport$renderAttributes, settings_, root),
						A2($author$project$Render$Tree$getBlockAttributes, root, settings)),
					_Utils_ap(
						A6($author$project$Render$TreeSupport$renderBody, theme, count, accumulator, settings_, attrs_, root),
						A2(
							$elm$core$List$map,
							A5(
								$author$project$Render$Tree$renderTree_,
								theme,
								count,
								accumulator,
								settings_,
								_Utils_ap(attrs_, blockAttrs)),
							children)))
				]));
	});
var $author$project$Render$Tree$renderBranchNode = F9(
	function (theme, count, accumulator, settings, attrs_, blockAttrs, root, children, tree) {
		var _v1 = $author$project$Render$Tree$getBlockType(root);
		if ((_v1.$ === 1) && (!_v1.a)) {
			var _v2 = _v1.a;
			return A8($author$project$Render$Tree$renderBoxBranch, theme, count, accumulator, settings, attrs_, blockAttrs, root, children);
		} else {
			return A8($author$project$Render$Tree$renderStandardBranch, theme, count, accumulator, settings, _List_Nil, _List_Nil, root, children);
		}
	});
var $author$project$Render$Tree$renderStandardBranch = F8(
	function (theme, count, accumulator, settings, attrs_, blockAttrs, root, children) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$spacing(12),
				A2($author$project$Render$Tree$getBlockAttributes, root, settings)),
			_Utils_ap(
				A6($author$project$Render$TreeSupport$renderBody, theme, count, accumulator, settings, _List_Nil, root),
				A2(
					$elm$core$List$map,
					A5(
						$author$project$Render$Tree$renderTree_,
						theme,
						count,
						accumulator,
						settings,
						_Utils_ap(
							attrs_,
							_Utils_ap(
								A2($author$project$Render$Tree$getBlockAttributes, root, settings),
								blockAttrs))),
					children)));
	});
var $author$project$Render$Tree$renderTree_ = F6(
	function (theme, count, accumulator, settings, attrs_, tree) {
		var root = $maca$elm_rose_tree$RoseTree$Tree$value(tree);
		var _v0 = $maca$elm_rose_tree$RoseTree$Tree$children(tree);
		if (!_v0.b) {
			return A6($author$project$Render$Tree$renderLeafNode, theme, count, accumulator, settings, attrs_, root);
		} else {
			var children = _v0;
			return A9($author$project$Render$Tree$renderBranchNode, theme, count, accumulator, settings, _List_Nil, _List_Nil, root, children, tree);
		}
	});
var $author$project$Render$Tree$renderTree = F6(
	function (theme, count, accumulator, settings, attrs_, tree) {
		var width2 = $mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(settings.uE - 60));
		var root = $maca$elm_rose_tree$RoseTree$Tree$value(tree);
		var style = function () {
			var _v2 = A2($elm$core$Dict$get, 'style', root.sS);
			if ((!_v2.$) && (_v2.a === 'italic')) {
				return $mdgriffith$elm_ui$Element$Font$italic;
			} else {
				return $mdgriffith$elm_ui$Element$Font$unitalicized;
			}
		}();
		var isBoxLike = function (block) {
			var _v1 = $author$project$Generic$Language$getName(block);
			if (_v1.$ === 1) {
				return false;
			} else {
				var name = _v1.a;
				return name === 'box';
			}
		};
		var borderColor = function () {
			if (!theme) {
				return A4($mdgriffith$elm_ui$Element$rgba, 0.7, 0.8, 0.9, 1);
			} else {
				return A4($mdgriffith$elm_ui$Element$rgba, 0.6, 0.6, 0.6, 0.5);
			}
		}();
		var bgColorAttr = A2(
			$author$project$Render$Settings$getThemedElementColor,
			function ($) {
				return $.sx;
			},
			settings.h7);
		var blockAttrs = A2(
			$elm$core$List$cons,
			style,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.uE - 0)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Background$color(bgColorAttr),
					_List_Nil)));
		var backgroundColor = A2(
			$author$project$Render$Settings$getThemedElementColor,
			function ($) {
				return $.sx;
			},
			settings.h7);
		return isBoxLike(root) ? A2(
			$mdgriffith$elm_ui$Element$column,
			blockAttrs,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 18, jG: 0, kC: 0, k2: 0}),
							$mdgriffith$elm_ui$Element$Border$color(borderColor),
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$centerX,
							width2
						]),
					_List_fromArray(
						[
							A6(
							$author$project$Render$Tree$renderTree_,
							theme,
							count,
							accumulator,
							_Utils_update(
								settings,
								{p6: backgroundColor, uE: settings.uE - 24}),
							_List_Nil,
							tree)
						]))
				])) : A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[style]),
			_List_fromArray(
				[
					A6(
					$author$project$Render$Tree$renderTree_,
					theme,
					count,
					accumulator,
					settings,
					_List_fromArray(
						[style]),
					tree)
				]));
	});
var $author$project$ScriptaV2$Compiler$renderForest = F5(
	function (theme, count, renderSettings, accumulator, forest) {
		return A2(
			$elm$core$List$map,
			A5($author$project$Render$Tree$renderTree, theme, count, accumulator, renderSettings, _List_Nil),
			forest);
	});
var $author$project$Render$Settings$DefaultDisplay = 0;
var $author$project$Render$Settings$makeSettings = F7(
	function (displaySettings, theme, selectedId, selectedSlug, scale, windowWidth, data) {
		var titleSize = 32;
		return {
			p6: A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.e6;
				},
				theme),
			lV: A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.lV;
				},
				theme),
			qD: A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.gK;
				},
				theme),
			qR: data,
			q2: 0,
			eb: A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.eb;
				},
				theme),
			na: false,
			nn: 0,
			no: 18,
			rX: 18,
			bH: A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.hr;
				},
				theme),
			r0: 1 * windowWidth,
			nD: titleSize * 0.72,
			n5: 0,
			n6: 0,
			sK: 28,
			sS: $elm$core$Dict$empty,
			sY: A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0),
			kL: selectedId,
			tm: selectedSlug,
			oL: false,
			oM: true,
			o6: A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.o5;
				},
				theme),
			h7: theme,
			k1: '',
			pb: titleSize,
			us: 6,
			pB: 54,
			uE: $elm$core$Basics$round(scale * windowWidth),
			pE: 0.3
		};
	});
var $author$project$ScriptaV2$Settings$renderSettingsFromDisplaySettings = F3(
	function (displaySettings, theme, ds) {
		return A7($author$project$Render$Settings$makeSettings, displaySettings, theme, ds.kL, ds.tm, ds.tc, ds.gt, ds.qR);
	});
var $author$project$Generic$ASTTools$getValue = F2(
	function (key, ast) {
		var _v0 = A2($author$project$Generic$ASTTools$getBlockByName, key, ast);
		if (_v0.$ === 1) {
			return '(' + (key + ')');
		} else {
			var block = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2(
						$elm$core$List$map,
						$author$project$Generic$ASTTools$getText,
						$author$project$Generic$Language$getExpressionContent(block))));
		}
	});
var $author$project$Generic$ASTTools$title = function (ast) {
	return A2($author$project$Generic$ASTTools$getValue, 'title', ast);
};
var $author$project$Library$Tree$lev = function (_v0) {
	var block = _v0.qf;
	var _v1 = A2($elm$core$Dict$get, 'level', block.sS);
	if (!_v1.$) {
		var level = _v1.a;
		return function (x) {
			return x - 1;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				1,
				$elm$core$String$toInt(level)));
	} else {
		return 0;
	}
};
var $author$project$Render$TOCTree$tocLevel = function (block) {
	var _v0 = A2($elm$core$Dict$get, 'level', block.sS);
	if (!_v0.$) {
		var level = _v0.a;
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$String$toInt(level));
	} else {
		return 0;
	}
};
var $author$project$Render$TOCTree$makeNodeValue = F2(
	function (idsOfOpenNodes, block) {
		var newBlock = A2(
			$author$project$Generic$Language$updateMetaInBlock,
			function (m) {
				return _Utils_update(
					m,
					{hg: 'xy' + m.hg});
			},
			block);
		var level = $author$project$Render$TOCTree$tocLevel(block);
		var visible = (level <= 1) || A2($elm$core$List$member, block.nJ.hg, idsOfOpenNodes);
		return {qf: newBlock, la: true};
	});
var $author$project$Generic$ASTTools$tableOfContents = F2(
	function (maximumLevel, ast) {
		return A2(
			$author$project$Generic$ASTTools$filterBlocksOnName,
			'section',
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Library$Tree$flatten, ast)));
	});
var $author$project$Render$TOCTree$style_ = function (theme_) {
	if (theme_ === 1) {
		return _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.e6;
					},
					theme_)),
				$mdgriffith$elm_ui$Element$Font$color(
				A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.o5;
					},
					theme_))
			]);
	} else {
		return _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.e6;
					},
					theme_)),
				$mdgriffith$elm_ui$Element$Font$color(
				A2(
					$author$project$Render$Settings$getThemedElementColor,
					function ($) {
						return $.o5;
					},
					theme_))
			]);
	}
};
var $author$project$ScriptaV2$Msg$ToggleTOCNodeID = function (a) {
	return {$: 3, a: a};
};
var $author$project$Generic$Language$composeTextElement = F2(
	function (text, meta) {
		return A2($author$project$Generic$Language$Text, text, meta);
	});
var $author$project$Generic$Language$extractText = function (expr) {
	if (!expr.$) {
		var text = expr.a;
		var meta = expr.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(text, meta));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$string_extra$String$Extra$softBreakRegexp = function (width) {
	return $elm_community$string_extra$String$Extra$regexFromString(
		'.{1,' + ($elm$core$String$fromInt(width) + '}(\\s+|$)|\\S+?(\\s+|$)'));
};
var $elm_community$string_extra$String$Extra$softBreak = F2(
	function (width, string) {
		return (width <= 0) ? _List_Nil : A2(
			$elm$core$List$map,
			function ($) {
				return $.nB;
			},
			A2(
				$elm$regex$Regex$find,
				$elm_community$string_extra$String$Extra$softBreakRegexp(width),
				string));
	});
var $elm_community$string_extra$String$Extra$softWrapWith = F3(
	function (width, separator, string) {
		return A2(
			$elm$core$String$join,
			separator,
			A2($elm_community$string_extra$String$Extra$softBreak, width, string));
	});
var $author$project$Render$TOCTree$tocIndentAux = function (args) {
	var _v0 = $elm$core$List$head(args);
	if (_v0.$ === 1) {
		return 0;
	} else {
		var str = _v0.a;
		return function (x) {
			return 12 * (x - 1);
		}(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str)));
	}
};
var $author$project$Render$TOCTree$tocIndent = function (args) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{
			iG: 0,
			jG: $author$project$Render$TOCTree$tocIndentAux(args),
			kC: 0,
			k2: 0
		});
};
var $author$project$Render$TOCTree$viewTocItem_ = F5(
	function (theme, viewParameters, acc, hasChildren, block) {
		var args = block.lv;
		var body = block.qh;
		var properties = block.sS;
		var maximumNumberedTocLevel = 1;
		if (!body.$) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var exprs = body.a;
			var sectionNumber = function () {
				var nosectionNumeber = A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{iG: 0, jG: 8, kC: 0, k2: 0})
						]),
					$mdgriffith$elm_ui$Element$text('-'));
				var _v3 = A2(
					$elm$core$Maybe$andThen,
					$elm$core$String$toInt,
					A2($elm$core$Dict$get, 'number-to-level', properties));
				if (_v3.$ === 1) {
					return nosectionNumeber;
				} else {
					var level = _v3.a;
					if (_Utils_cmp(level, maximumNumberedTocLevel) < 1) {
						var _v4 = A2($elm$core$Dict$get, 'label', properties);
						if (_v4.$ === 1) {
							return nosectionNumeber;
						} else {
							var label = _v4.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(label + '.'));
						}
					} else {
						return nosectionNumeber;
					}
				}
			}();
			var nodeId = block.nJ.hg;
			var id = $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(block.nJ.jR) + '.0');
			var exprs2 = function () {
				var _v1 = A2(
					$elm$core$Maybe$andThen,
					$author$project$Generic$Language$extractText,
					$elm$core$List$head(exprs));
				if (_v1.$ === 1) {
					return exprs;
				} else {
					var _v2 = _v1.a;
					var text = _v2.a;
					var meta = _v2.b;
					return _List_fromArray(
						[
							A2(
							$author$project$Generic$Language$composeTextElement,
							A3(
								$elm_community$string_extra$String$Extra$softWrapWith,
								22,
								'...',
								$elm$core$String$trim(text)),
							meta)
						]);
				}
			}();
			var content = A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$author$project$Render$TOCTree$tocIndent(args),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(180)),
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					$author$project$Render$TOCTree$style_(theme)),
				A2(
					$elm$core$List$cons,
					sectionNumber,
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Expression$render, viewParameters.qM, acc, viewParameters.oI, viewParameters.lw),
						exprs2)));
			var color = _Utils_eq(id, viewParameters.kL) ? A2(
				$author$project$Render$Settings$getThemedElementColor,
				function ($) {
					return $.o5;
				},
				theme) : A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
			var clickHandlers = hasChildren ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$ToggleTOCNodeID(nodeId)),
					$mdgriffith$elm_ui$Element$Font$size(14)
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id)),
					$mdgriffith$elm_ui$Element$Font$size(14)
				]);
			return A2(
				$mdgriffith$elm_ui$Element$el,
				clickHandlers,
				A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(color)
						]),
					{
						fI: content,
						uz: $author$project$Render$Utility$internalLink(id)
					}));
		}
	});
var $author$project$Render$TOCTree$viewNodeWithChildren = F6(
	function (theme, viewParameters, acc, indentation, node, hasChildren) {
		return A5($author$project$Render$TOCTree$viewTocItem_, theme, viewParameters, acc, hasChildren, node.qf);
	});
var $author$project$Render$TOCTree$viewTOCTree = F7(
	function (theme, viewParameters, acc, depth, indentation, maybeFoundIds, tocTree) {
		var val = $maca$elm_rose_tree$RoseTree$Tree$value(tocTree);
		var style = $author$project$Render$TOCTree$style_(theme);
		var actualChildren = $maca$elm_rose_tree$RoseTree$Tree$children(tocTree);
		var children = A2($elm$core$List$member, val.qf.nJ.hg, viewParameters.rA) ? actualChildren : _List_Nil;
		var hasChildren = !$elm$core$List$isEmpty(actualChildren);
		return ((depth < 0) || (!val.la)) ? $mdgriffith$elm_ui$Element$none : ($elm$core$List$isEmpty(children) ? A2(
			$mdgriffith$elm_ui$Element$el,
			style,
			A6($author$project$Render$TOCTree$viewNodeWithChildren, theme, viewParameters, acc, indentation, val, hasChildren)) : A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$cons,
				A2(
					$mdgriffith$elm_ui$Element$el,
					style,
					A6($author$project$Render$TOCTree$viewNodeWithChildren, theme, viewParameters, acc, indentation, val, hasChildren)),
				A2(
					$elm$core$List$map,
					A6($author$project$Render$TOCTree$viewTOCTree, theme, viewParameters, acc, depth - 1, indentation + 1, maybeFoundIds),
					children))));
	});
var $author$project$Render$TOCTree$view = F4(
	function (theme, viewParameters, acc, documentAst) {
		var vee = function (t) {
			return {
				np: A3($elm$core$Basics$composeR, $maca$elm_rose_tree$RoseTree$Tree$children, $elm$core$List$length, t),
				uC: A7($author$project$Render$TOCTree$viewTOCTree, theme, viewParameters, acc, 4, 0, $elm$core$Maybe$Nothing, t)
			};
		};
		var vee2 = function (t) {
			var data = vee(t);
			var format = (data.np > 0) ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$Font$color(
					A2(
						$author$project$Render$Settings$getThemedElementColor,
						function ($) {
							return $.o5;
						},
						theme))
				]) : _List_Nil;
			return A2($mdgriffith$elm_ui$Element$el, format, data.uC);
		};
		var tocAST = A2($author$project$Generic$ASTTools$tableOfContents, 8, documentAst);
		var nodes = A2(
			$elm$core$List$map,
			$author$project$Render$TOCTree$makeNodeValue(viewParameters.rA),
			tocAST);
		var forest = A2($author$project$Library$Forest$makeForest, $author$project$Library$Tree$lev, nodes);
		return A2($elm$core$List$map, vee2, forest);
	});
var $author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput = F4(
	function (theme, filter, displaySettings, editRecord) {
		var titleData = A2($author$project$Generic$ASTTools$getBlockByName, 'title', editRecord.k7);
		var title = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{iG: 36, jG: 0, kC: 0, k2: 0})
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					$author$project$Generic$ASTTools$title(editRecord.k7))
				]));
		var renderSettings = A3($author$project$ScriptaV2$Settings$renderSettingsFromDisplaySettings, displaySettings, theme, displaySettings);
		var viewParameters = {lw: _List_Nil, qM: displaySettings.qM, rA: displaySettings.rA, kL: displaySettings.kL, oI: renderSettings};
		var toc = A4($author$project$Render$TOCTree$view, theme, viewParameters, editRecord.io, editRecord.k7);
		var properties = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Dict$empty,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.sS;
				},
				titleData));
		var banner = A2(
			$elm$core$Maybe$map,
			$mdgriffith$elm_ui$Element$row(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40))
					])),
			A2(
				$elm$core$Maybe$map,
				A4(
					$author$project$Render$Block$renderBody,
					displaySettings.qM,
					editRecord.io,
					renderSettings,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 1, 0, 0))
						])),
				$author$project$Generic$ASTTools$banner(editRecord.k7)));
		return {
			p9: banner,
			qh: A5(
				$author$project$ScriptaV2$Compiler$renderForest,
				theme,
				displaySettings.qM,
				_Utils_update(
					renderSettings,
					{sS: properties}),
				editRecord.io,
				$author$project$ScriptaV2$Compiler$filterForest2(editRecord.k7)),
			ic: title,
			uo: toc
		};
	});
var $author$project$Generic$ASTTools$expressionNames = function (forest) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$author$project$Generic$Language$getFunctionName,
					$elm$core$List$concat(
						A2(
							$elm$core$List$map,
							$author$project$Generic$Language$getExpressionContent,
							$elm$core$List$concat(
								A2($elm$core$List$map, $author$project$Library$Tree$flatten, forest))))))));
};
var $author$project$Generic$ASTTools$handleEmptyDocInfo = function (strings) {
	return _Utils_eq(
		strings,
		_List_fromArray(
			['(docinfo)'])) ? _List_fromArray(
		['date:']) : strings;
};
var $author$project$Generic$ASTTools$loop = F2(
	function (s, nextState_) {
		loop:
		while (true) {
			var _v0 = nextState_(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$nextState_ = nextState_;
				s = $temp$s;
				nextState_ = $temp$nextState_;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Generic$ASTTools$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Generic$ASTTools$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Generic$ASTTools$nextStepFix = function (state) {
	var _v0 = $elm$core$List$head(state.cb);
	if (_v0.$ === 1) {
		return $author$project$Generic$ASTTools$Done(state.dt);
	} else {
		var line = _v0.a;
		return (line === '') ? $author$project$Generic$ASTTools$Loop(
			_Utils_update(
				state,
				{
					cb: A2($elm$core$List$drop, 1, state.cb)
				})) : ((A2($elm$core$String$left, 7, line) === 'author:') ? $author$project$Generic$ASTTools$Loop(
			_Utils_update(
				state,
				{
					l$: state.l$ + 1,
					cb: A2($elm$core$List$drop, 1, state.cb),
					dt: A2(
						$elm$core$List$cons,
						A3(
							$elm$core$String$replace,
							'author:',
							'author' + ($elm$core$String$fromInt(state.l$) + ':'),
							line),
						state.dt)
				})) : $author$project$Generic$ASTTools$Loop(
			_Utils_update(
				state,
				{
					cb: A2($elm$core$List$drop, 1, state.cb),
					dt: A2($elm$core$List$cons, line, state.dt)
				})));
	}
};
var $author$project$Generic$ASTTools$fixFrontMatterList = function (strings) {
	return $author$project$Generic$ASTTools$handleEmptyDocInfo(
		$elm$core$List$reverse(
			A2(
				$author$project$Generic$ASTTools$loop,
				{l$: 1, cb: strings, dt: _List_Nil},
				$author$project$Generic$ASTTools$nextStepFix)));
};
var $author$project$Generic$ASTTools$getVerbatimBlockValue = F2(
	function (key, ast) {
		var _v0 = A2($author$project$Generic$ASTTools$getBlockByName, key, ast);
		if (_v0.$ === 1) {
			return '(' + (key + ')');
		} else {
			var block = _v0.a;
			var _v1 = $author$project$Generic$Language$getVerbatimContent(block);
			if (!_v1.$) {
				var str = _v1.a;
				return str;
			} else {
				return '(' + (key + ')');
			}
		}
	});
var $author$project$Generic$ASTTools$pairFromList = function (strings) {
	if ((strings.b && strings.b.b) && (!strings.b.b.b)) {
		var x = strings.a;
		var _v1 = strings.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$ASTTools$keyValueDict = function (strings_) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Generic$ASTTools$pairFromList,
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $author$project$Generic$ASTTools$frontMatterDict = function (ast) {
	return $author$project$Generic$ASTTools$keyValueDict(
		$author$project$Generic$ASTTools$fixFrontMatterList(
			A2(
				$elm$core$String$split,
				'\n',
				A2($author$project$Generic$ASTTools$getVerbatimBlockValue, 'docinfo', ast))));
};
var $author$project$Render$Export$LaTeX$frontMatter = F2(
	function (currentTime, ast) {
		var title = function (title_) {
			return '\\title{' + (title_ + '}');
		}(
			$author$project$Generic$ASTTools$title(ast));
		var dict = $author$project$Generic$ASTTools$frontMatterDict(ast);
		var date = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (date_) {
					return '\\date{' + (date_ + '}');
				},
				A2($elm$core$Dict$get, 'date', dict)));
		var author4 = A2($elm$core$Dict$get, 'author4', dict);
		var author3 = A2($elm$core$Dict$get, 'author3', dict);
		var author2 = A2($elm$core$Dict$get, 'author2', dict);
		var author1 = A2($elm$core$Dict$get, 'author1', dict);
		var authors = function () {
			var authorList = A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[author1, author2, author3, author4]));
			if (!authorList.b) {
				return '\\author{}';
			} else {
				return function (s) {
					return '\\author{\n' + (s + '\n}');
				}(
					A2($elm$core$String$join, '\n\\and\n', authorList));
			}
		}();
		return A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$cons,
				'\\begin{document}',
				A2(
					$elm$core$List$cons,
					title,
					A2(
						$elm$core$List$cons,
						date,
						A2(
							$elm$core$List$cons,
							authors,
							A2($elm$core$List$cons, '\\maketitle', _List_Nil))))));
	});
var $author$project$Generic$TextMacro$functionNames_ = function (expr) {
	switch (expr.$) {
		case 1:
			var name = expr.a;
			var body = expr.b;
			return A2(
				$elm$core$List$cons,
				name,
				$elm$core$List$concat(
					A2($elm$core$List$map, $author$project$Generic$TextMacro$functionNames_, body)));
		case 0:
			return _List_Nil;
		case 2:
			return _List_Nil;
		default:
			return _List_Nil;
	}
};
var $author$project$Generic$TextMacro$functionNames = function (exprs) {
	return $elm$core$List$concat(
		A2($elm$core$List$map, $author$project$Generic$TextMacro$functionNames_, exprs));
};
var $author$project$Generic$TextMacro$getTextMacroFunctionNames = function (str) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm$core$List$concat(
				A2(
					$elm$core$List$map,
					$author$project$Generic$TextMacro$functionNames,
					A2(
						$elm$core$List$map,
						function ($) {
							return $.qh;
						},
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$second,
							$elm$core$Dict$toList(
								$author$project$Generic$TextMacro$buildDictionary(
									$elm$core$String$lines(str)))))))));
};
var $author$project$Render$Export$Preamble$commands = '\n%% Commands\n\n\\newcommand{\\code}[1]{{\\tt #1}}\n\\newcommand{\\ellie}[1]{\\href{#1}{Link to Ellie}}\n% \\newcommand{\\image}[3]{\\includegraphics[width=3cm]{#1}}\n\n%% width=4truein,keepaspectratio]\n\n\n\\newcommand{\\imagecentercaptioned}[3]{\n   \\medskip\n   \\begin{figure}[htp]\n   \\centering\n    \\includegraphics[width=#2]{#1}\n    \\vglue0pt\n    \\caption{#3}\n    \\end{figure}\n    \\medskip\n}\n\n\\newcommand{\\imagecenter}[2]{\n   \\medskip\n   \\begin{figure}[htp]\n   \\centering\n    \\includegraphics[width=#2]{#1}\n    \\vglue0pt\n    \\end{figure}\n    \\medskip\n}\n\n\\newcommand{\\imagefloat}[4]{\n    \\begin{wrapfigure}{#4}{#2}\n    \\includegraphics[width=#2]{#1}\n    \\caption{#3}\n    \\end{wrapfigure}\n}\n\n\n\\newcommand{\\imagefloatright}[3]{\n    \\begin{wrapfigure}{R}{0.30\\textwidth}\n    \\includegraphics[width=0.30\\textwidth]{#1}\n    \\caption{#2}\n    \\end{wrapfigure}\n}\n\n\\newcommand{\\hide}[1]{}\n\n\n\\newcommand{\\imagefloatleft}[3]{\n    \\begin{wrapfigure}{L}{0.3-\\textwidth}\n    \\includegraphics[width=0.30\\textwidth]{#1}\n    \\caption{#2}\n    \\end{wrapfigure}\n}\n% Font style\n\\newcommand{\\italic}[1]{{\\sl #1}}\n\\newcommand{\\strong}[1]{{\\bf #1}}\n\\newcommand{\\strike}[1]{\\st{#1}}\n\n% Scripta\n\\newcommand{\\ilink}[2]{\\href{{https://scripta.io/s/#1}}{#2}}\n\n% Color\n\\newcommand{\\red}[1]{\\textcolor{red}{#1}}\n\\newcommand{\\blue}[1]{\\textcolor{blue}{#1}}\n\\newcommand{\\violet}[1]{\\textcolor{violet}{#1}}\n\\newcommand{\\highlight}[1]{\\hl{#1}}\n\\newcommand{\\note}[2]{\\textcolor{blue}{#1}{\\hl{#1}}}\n\n% WTF?\n\\newcommand{\\remote}[1]{\\textcolor{red}{#1}}\n\\newcommand{\\local}[1]{\\textcolor{blue}{#1}}\n\n% Unclassified\n\\newcommand{\\subheading}[1]{{\\bf #1}\\par}\n\\newcommand{\\term}[1]{{\\sl #1}}\n\\newcommand{\\termx}[1]{}\n\\newcommand{\\comment}[1]{}\n\\newcommand{\\innertableofcontents}{}\n\n\n% Special character\n\\newcommand{\\dollarSign}[0]{{\\$}}\n\\newcommand{\\backTick}[0]{\\`{}}\n\n%% Theorems\n\\newtheorem{remark}{Remark}\n\\newtheorem{theorem}{Theorem}\n\\newtheorem{axiom}{Axiom}\n\\newtheorem{lemma}{Lemma}\n\\newtheorem{proposition}{Proposition}\n\\newtheorem{corollary}{Corollary}\n\\newtheorem{definition}{Definition}\n\\newtheorem{example}{Example}\n\\newtheorem{exercise}{Exercise}\n\\newtheorem{problem}{Problem}\n\\newtheorem{exercises}{Exercises}\n\\newcommand{\\bs}[1]{$\\backslash$#1}\n\\newcommand{\\texarg}[1]{\\{#1\\}}\n\n\n%% Environments\n\\renewenvironment{quotation}\n  {\\begin{adjustwidth}{2cm}{} \\footnotesize}\n  {\\end{adjustwidth}}\n\n\\def\\changemargin#1#2{\\list{}{\\rightmargin#2\\leftmargin#1}\\item[]}\n\\let\\endchangemargin=\\endlist\n\n\\renewenvironment{indent}\n  {\\begin{adjustwidth}{0.75cm}{}}\n  {\\end{adjustwidth}}\n\n\n%% NEWCOMMAND\n\n% \\definecolor{mypink1}{rgb}{0.858, 0.188, 0.478}\n% \\definecolor{mypink2}{RGB}{219, 48, 122}\n\\newcommand{\\fontRGB}[4]{\n    \\definecolor{mycolor}{RGB}{#1, #2, #3}\n    \\textcolor{mycolor}{#4}\n    }\n\n\\newcommand{\\highlightRGB}[4]{\n    \\definecolor{mycolor}{RGB}{#1, #2, #3}\n    \\sethlcolor{mycolor}\n    \\hl{#4}\n     \\sethlcolor{yellow}\n    }\n\n\\newcommand{\\gray}[2]{\n\\definecolor{mygray}{gray}{#1}\n\\textcolor{mygray}{#2}\n}\n\n\\newcommand{\\white}[1]{\\gray{1}[#1]}\n\\newcommand{\\medgray}[1]{\\gray{0.5}[#1]}\n\\newcommand{\\black}[1]{\\gray{0}[#1]}\n\n% Spacing\n\\parindent0pt\n\\parskip5pt\n\n';
var $author$project$Render$Export$Preamble$newPackageText = function (packagesNeeded_) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			function (name) {
				return '\\usepackage{' + (name + '}');
			},
			packagesNeeded_));
};
var $author$project$Render$Export$Preamble$addPackage = F4(
	function (namesInDocument, entityName, packageNames, packages_) {
		return A2($elm$core$List$member, entityName, namesInDocument) ? _Utils_ap(packageNames, packages_) : packages_;
	});
var $author$project$Render$Export$Preamble$packageList = _List_fromArray(
	[
		_Utils_Tuple2(
		'quiver',
		_List_fromArray(
			['quiver'])),
		_Utils_Tuple2(
		'tikz',
		_List_fromArray(
			['tikz'])),
		_Utils_Tuple2(
		'link',
		_List_fromArray(
			['hyperref'])),
		_Utils_Tuple2(
		'ilink',
		_List_fromArray(
			['hyperref'])),
		_Utils_Tuple2(
		'href',
		_List_fromArray(
			['hyperref'])),
		_Utils_Tuple2(
		'textcolor',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'blue',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'red',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'green',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'gray',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'magenta',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'violet',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'pink',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'highlight',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'highlight',
		_List_fromArray(
			['soul'])),
		_Utils_Tuple2(
		'strike',
		_List_fromArray(
			['soul'])),
		_Utils_Tuple2(
		'errorHighlight',
		_List_fromArray(
			['xcolor'])),
		_Utils_Tuple2(
		'image',
		_List_fromArray(
			['graphicx', 'wrapfig', 'float']))
	]);
var $author$project$Render$Export$Preamble$newPackageList = function (names) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var entityName = _v0.a;
				var packageNames = _v0.b;
				return A4($author$project$Render$Export$Preamble$addPackage, names, entityName, packageNames, acc);
			}),
		_List_Nil,
		$author$project$Render$Export$Preamble$packageList);
};
var $author$project$Render$Export$Preamble$packagesNeeded = function (names) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$author$project$Render$Export$Preamble$newPackageList(names)));
};
var $author$project$Render$Export$Preamble$standardPackages = '\n%% Packages\n\n%% Standard packages\n\\usepackage{geometry}\n\\geometry{letterpaper}\n\\usepackage{changepage}   % for the adjustwidth environment\n\n%% AMS\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\n\\usepackage{amscd}\n\n\\usepackage{fancyvrb} %% for inline verbatim\n';
var $author$project$Render$Export$Preamble$addCode = F4(
	function (packagesInDocument, _package, codeText, accumulatedCodeText) {
		return A2($elm$core$List$member, _package, packagesInDocument) ? (codeText + ('\n\n' + accumulatedCodeText)) : accumulatedCodeText;
	});
var $author$project$Render$Export$Preamble$hypersetup = '\n\\hypersetup{\n    colorlinks=true,\n    linkcolor=blue,\n    filecolor=magenta,\n    urlcolor=blue,\n}\n';
var $author$project$Render$Export$Preamble$setupCode = _List_fromArray(
	[
		_Utils_Tuple2('graphicx', '\\graphicspath{ {image/} }'),
		_Utils_Tuple2('hyperref', $author$project$Render$Export$Preamble$hypersetup)
	]);
var $author$project$Render$Export$Preamble$supportingCode = function (packagesInDocument) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, acc) {
				var entityName = _v0.a;
				var packageNames = _v0.b;
				return A4($author$project$Render$Export$Preamble$addCode, packagesInDocument, entityName, packageNames, acc);
			}),
		'',
		$author$project$Render$Export$Preamble$setupCode);
};
var $author$project$Render$Export$Preamble$make = F2(
	function (blockNames_, expressionNames_) {
		var names = _Utils_ap(blockNames_, expressionNames_);
		var packagesUsed = $author$project$Render$Export$Preamble$packagesNeeded(names);
		return A2(
			$elm$core$String$join,
			'\n',
			_List_fromArray(
				[
					'\\documentclass[11pt, oneside]{article}',
					$author$project$Render$Export$Preamble$newPackageText(packagesUsed),
					$author$project$Render$Export$Preamble$supportingCode(packagesUsed),
					$author$project$Render$Export$Preamble$standardPackages,
					$author$project$Render$Export$Preamble$commands
				]));
	});
var $author$project$Generic$ASTTools$rawBlockNames = function (forest) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$author$project$Generic$Language$getName,
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Library$Tree$flatten, forest))));
};
var $author$project$Generic$BlockUtilities$smashUrl = function (url) {
	return A3(
		$elm$core$String$replace,
		'http://',
		'',
		A3($elm$core$String$replace, 'https://', '', url));
};
var $author$project$Generic$BlockUtilities$condenseUrl = function (expr) {
	if ((((expr.$ === 1) && (expr.a === 'image')) && expr.b.b) && (!expr.b.a.$)) {
		var _v1 = expr.b;
		var _v2 = _v1.a;
		var url = _v2.a;
		var meta1 = _v2.b;
		var rest = _v1.b;
		var meta2 = expr.c;
		return A3(
			$author$project$Generic$Language$Fun,
			'image',
			A2(
				$elm$core$List$cons,
				A2(
					$author$project$Generic$Language$Text,
					$author$project$Generic$BlockUtilities$smashUrl(url),
					meta1),
				rest),
			meta2);
	} else {
		return expr;
	}
};
var $author$project$Generic$BlockUtilities$condenseUrls = function (block) {
	var _v0 = block.qh;
	if (!_v0.$) {
		return block;
	} else {
		var exprList = _v0.a;
		return _Utils_update(
			block,
			{
				qh: $toastal$either$Either$Right(
					A2($elm$core$List$map, $author$project$Generic$BlockUtilities$condenseUrl, exprList))
			});
	}
};
var $author$project$Render$Export$LaTeX$OutsideList = 3;
var $author$project$Render$Export$LaTeX$InsideDescriptionList = 2;
var $author$project$Render$Export$LaTeX$InsideItemizedList = 0;
var $author$project$Render$Export$LaTeX$InsideNumberedList = 1;
var $author$project$Generic$Language$expressionBlockEmpty = {
	lv: _List_Nil,
	qh: $toastal$either$Either$Right(_List_Nil),
	ri: '',
	fC: $author$project$Generic$Language$Paragraph,
	hh: 0,
	nJ: $author$project$Generic$Language$emptyBlockMeta,
	sS: $elm$core$Dict$empty,
	f3: $elm$core$Maybe$Nothing
};
var $author$project$Render$Export$LaTeX$emptyExpressionBlock = $author$project$Generic$Language$expressionBlockEmpty;
var $author$project$Render$Export$LaTeX$beginDescriptionBlock = A2(
	$author$project$Generic$BlockUtilities$updateMeta,
	function (m) {
		return _Utils_update(
			m,
			{n_: 2, oR: '| beginBlock\ndescription'});
	},
	_Utils_update(
		$author$project$Render$Export$LaTeX$emptyExpressionBlock,
		{
			qh: $toastal$either$Either$Right(
				_List_fromArray(
					[
						A2(
						$author$project$Generic$Language$Text,
						'description',
						{qb: 0, rb: 7, hg: 'begin', jz: 0})
					])),
			fC: $author$project$Generic$Language$Ordinary('beginDescriptionBlock'),
			hh: 1
		}));
var $author$project$Render$Export$LaTeX$beginItemizedBlock = A2(
	$author$project$Generic$BlockUtilities$updateMeta,
	function (m) {
		return _Utils_update(
			m,
			{n_: 2, oR: '| beginBlock\nitemize'});
	},
	_Utils_update(
		$author$project$Render$Export$LaTeX$emptyExpressionBlock,
		{
			qh: $toastal$either$Either$Right(
				_List_fromArray(
					[
						A2(
						$author$project$Generic$Language$Text,
						'itemize',
						{qb: 0, rb: 7, hg: '', jz: 0})
					])),
			fC: $author$project$Generic$Language$Ordinary('beginBlock'),
			hh: 1
		}));
var $author$project$Render$Export$LaTeX$beginNumberedBlock = A2(
	$author$project$Generic$BlockUtilities$updateMeta,
	function (m) {
		return _Utils_update(
			m,
			{n_: 2, oR: '| beginBlock\nitemize'});
	},
	_Utils_update(
		$author$project$Render$Export$LaTeX$emptyExpressionBlock,
		{
			qh: $toastal$either$Either$Right(
				_List_fromArray(
					[
						A2(
						$author$project$Generic$Language$Text,
						'enumerate',
						{qb: 0, rb: 7, hg: 'begin', jz: 0})
					])),
			fC: $author$project$Generic$Language$Ordinary('beginNumberedBlock'),
			hh: 1
		}));
var $author$project$Render$Export$LaTeX$endDescriptionBlock = A2(
	$author$project$Generic$BlockUtilities$updateMeta,
	function (m) {
		return _Utils_update(
			m,
			{n_: 2, oR: '| endBlock\ndescription'});
	},
	_Utils_update(
		$author$project$Render$Export$LaTeX$emptyExpressionBlock,
		{
			qh: $toastal$either$Either$Right(
				_List_fromArray(
					[
						A2(
						$author$project$Generic$Language$Text,
						'description',
						{qb: 0, rb: 7, hg: 'end', jz: 0})
					])),
			fC: $author$project$Generic$Language$Ordinary('endDescriptionBlock'),
			hh: 1
		}));
var $author$project$Render$Export$LaTeX$endItemizedBlock = A2(
	$author$project$Generic$BlockUtilities$updateMeta,
	function (m) {
		return _Utils_update(
			m,
			{n_: 2, oR: '| endBlock\nitemize'});
	},
	_Utils_update(
		$author$project$Render$Export$LaTeX$emptyExpressionBlock,
		{
			qh: $toastal$either$Either$Right(
				_List_fromArray(
					[
						A2(
						$author$project$Generic$Language$Text,
						'itemize',
						{qb: 0, rb: 7, hg: 'end', jz: 0})
					])),
			fC: $author$project$Generic$Language$Ordinary('endBlock'),
			hh: 1
		}));
var $author$project$Render$Export$LaTeX$endNumberedBlock = A2(
	$author$project$Generic$BlockUtilities$updateMeta,
	function (m) {
		return _Utils_update(
			m,
			{n_: 2, oR: '| endBlock\nitemize'});
	},
	_Utils_update(
		$author$project$Render$Export$LaTeX$emptyExpressionBlock,
		{
			qh: $toastal$either$Either$Right(
				_List_fromArray(
					[
						A2(
						$author$project$Generic$Language$Text,
						'enumerate',
						{qb: 0, rb: 7, hg: 'begin', jz: 0})
					])),
			fC: $author$project$Generic$Language$Ordinary('endNumberedBlock'),
			hh: 1
		}));
var $author$project$Render$Export$LaTeX$nextState = F2(
	function (tree, state) {
		var name_ = $author$project$Generic$BlockUtilities$getExpressionBlockName(
			$maca$elm_rose_tree$RoseTree$Tree$value(tree));
		var _v0 = _Utils_Tuple2(state.aW, name_);
		_v0$9:
		while (true) {
			switch (_v0.a) {
				case 0:
					if ((!_v0.b.$) && (_v0.b.a === 'item')) {
						var _v2 = _v0.a;
						return _Utils_update(
							state,
							{
								cb: A2($elm$core$List$drop, 1, state.cb),
								aF: state.aF + 1,
								dt: A2($elm$core$List$cons, tree, state.dt)
							});
					} else {
						var _v3 = _v0.a;
						return _Utils_update(
							state,
							{
								cb: A2($elm$core$List$drop, 1, state.cb),
								aF: 0,
								dt: A2(
									$elm$core$List$cons,
									tree,
									A2(
										$elm$core$List$cons,
										$maca$elm_rose_tree$RoseTree$Tree$leaf($author$project$Render$Export$LaTeX$endItemizedBlock),
										state.dt)),
								aW: 3
							});
					}
				case 1:
					if ((!_v0.b.$) && (_v0.b.a === 'numbered')) {
						var _v5 = _v0.a;
						return _Utils_update(
							state,
							{
								cb: A2($elm$core$List$drop, 1, state.cb),
								aF: state.aF + 1,
								dt: A2($elm$core$List$cons, tree, state.dt)
							});
					} else {
						var _v6 = _v0.a;
						return _Utils_update(
							state,
							{
								cb: A2($elm$core$List$drop, 1, state.cb),
								aF: 0,
								dt: A2(
									$elm$core$List$cons,
									tree,
									A2(
										$elm$core$List$cons,
										$maca$elm_rose_tree$RoseTree$Tree$leaf($author$project$Render$Export$LaTeX$endNumberedBlock),
										state.dt)),
								aW: 3
							});
					}
				case 2:
					if ((!_v0.b.$) && (_v0.b.a === 'desc')) {
						var _v8 = _v0.a;
						return _Utils_update(
							state,
							{
								cb: A2($elm$core$List$drop, 1, state.cb),
								aF: state.aF + 1,
								dt: A2($elm$core$List$cons, tree, state.dt)
							});
					} else {
						var _v9 = _v0.a;
						return _Utils_update(
							state,
							{
								cb: A2($elm$core$List$drop, 1, state.cb),
								aF: 0,
								dt: A2(
									$elm$core$List$cons,
									tree,
									A2(
										$elm$core$List$cons,
										$maca$elm_rose_tree$RoseTree$Tree$leaf($author$project$Render$Export$LaTeX$endDescriptionBlock),
										state.dt)),
								aW: 3
							});
					}
				default:
					if (!_v0.b.$) {
						switch (_v0.b.a) {
							case 'item':
								var _v1 = _v0.a;
								return _Utils_update(
									state,
									{
										cb: A2($elm$core$List$drop, 1, state.cb),
										aF: 1,
										dt: A2(
											$elm$core$List$cons,
											tree,
											A2(
												$elm$core$List$cons,
												$maca$elm_rose_tree$RoseTree$Tree$leaf($author$project$Render$Export$LaTeX$beginItemizedBlock),
												state.dt)),
										aW: 0
									});
							case 'numbered':
								var _v4 = _v0.a;
								return _Utils_update(
									state,
									{
										cb: A2($elm$core$List$drop, 1, state.cb),
										aF: 1,
										dt: A2(
											$elm$core$List$cons,
											tree,
											A2(
												$elm$core$List$cons,
												$maca$elm_rose_tree$RoseTree$Tree$leaf($author$project$Render$Export$LaTeX$beginNumberedBlock),
												state.dt)),
										aW: 1
									});
							case 'desc':
								var _v7 = _v0.a;
								return _Utils_update(
									state,
									{
										cb: A2($elm$core$List$drop, 1, state.cb),
										aF: 1,
										dt: A2(
											$elm$core$List$cons,
											tree,
											A2(
												$elm$core$List$cons,
												$maca$elm_rose_tree$RoseTree$Tree$leaf($author$project$Render$Export$LaTeX$beginDescriptionBlock),
												state.dt)),
										aW: 2
									});
							default:
								break _v0$9;
						}
					} else {
						break _v0$9;
					}
			}
		}
		var _v10 = _v0.a;
		return _Utils_update(
			state,
			{
				cb: A2($elm$core$List$drop, 1, state.cb),
				dt: A2($elm$core$List$cons, tree, state.dt)
			});
	});
var $author$project$Render$Export$LaTeX$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.cb);
	if (_v0.$ === 1) {
		return $author$project$Tools$Loop$Done(state.dt);
	} else {
		var tree = _v0.a;
		return $author$project$Tools$Loop$Loop(
			A2($author$project$Render$Export$LaTeX$nextState, tree, state));
	}
};
var $author$project$Render$Export$LaTeX$encloseLists = function (blocks) {
	return $elm$core$List$reverse(
		A2(
			$author$project$Tools$Loop$loop,
			{cb: blocks, aF: 0, dt: _List_Nil, aW: 3},
			$author$project$Render$Export$LaTeX$nextStep));
};
var $author$project$Render$Export$LaTeX$addTikzPictureClosing = F2(
	function (flagUp, str) {
		return flagUp ? (str + '\n\\end{tikzpicture}') : str;
	});
var $author$project$Render$Export$LaTeX$argString = function (args) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			function (arg) {
				return !A2($elm$core$String$contains, 'label:', arg);
			},
			args));
};
var $author$project$Render$Export$LaTeX$descriptionItem = F2(
	function (args, body) {
		var arg = $author$project$Render$Export$LaTeX$argString(args);
		if (!args.b) {
			return '\\item{' + (body + '}');
		} else {
			return '\\item[' + (arg + (']{' + (body + '}')));
		}
	});
var $author$project$Render$Export$LaTeX$functionDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('italic', 'textit'),
			_Utils_Tuple2('i', 'textit'),
			_Utils_Tuple2('bold', 'textbf'),
			_Utils_Tuple2('b', 'textbf'),
			_Utils_Tuple2('image', 'imagecenter'),
			_Utils_Tuple2('contents', 'tableofcontents')
		]));
var $author$project$Render$Export$LaTeX$mapChars2 = function (str) {
	return A3($elm$core$String$replace, '_', '\\_', str);
};
var $author$project$Render$Export$LaTeX$aliases = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('i', 'italic'),
			_Utils_Tuple2('b', 'textbf'),
			_Utils_Tuple2('bold', 'textbf')
		]));
var $author$project$Render$Export$LaTeX$unalias = function (str) {
	var _v0 = A2($elm$core$Dict$get, str, $author$project$Render$Export$LaTeX$aliases);
	if (_v0.$ === 1) {
		return str;
	} else {
		var realName_ = _v0.a;
		return realName_;
	}
};
var $author$project$Render$Export$LaTeX$macro1 = F2(
	function (name, arg) {
		if (name === 'math') {
			return '$' + (arg + '$');
		} else {
			if (name === 'group') {
				return arg;
			} else {
				if (name === 'tags') {
					return '';
				} else {
					var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$functionDict);
					if (_v0.$ === 1) {
						return '\\' + ($author$project$Render$Export$LaTeX$unalias(name) + ('{' + ($author$project$Render$Export$LaTeX$mapChars2(
							$elm$core$String$trimLeft(arg)) + '}')));
					} else {
						var fName = _v0.a;
						return '\\' + (fName + ('{' + ($author$project$Render$Export$LaTeX$mapChars2(
							$elm$core$String$trimLeft(arg)) + '}')));
					}
				}
			}
		}
	});
var $author$project$Render$Utility$getArg = F3(
	function (_default, index, args) {
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, index, args);
		if (_v0.$ === 1) {
			return _default;
		} else {
			var a = _v0.a;
			return a;
		}
	});
var $author$project$Tools$Utility$removeNonAlphaNum = function (string) {
	return A3(
		$author$project$Tools$Utility$userReplace,
		'[^A-Za-z0-9\\-]',
		function (_v0) {
			return '';
		},
		string);
};
var $author$project$MicroLaTeX$Util$normalizedWord = function (words) {
	return A2(
		$elm$core$String$join,
		'-',
		A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $elm$core$String$toLower, $author$project$Tools$Utility$removeNonAlphaNum),
			words));
};
var $author$project$Render$Export$LaTeX$section = F3(
	function (settings, args, body) {
		var tag = $author$project$MicroLaTeX$Util$normalizedWord(
			$elm$core$String$words(body));
		var suffix = function () {
			var _v2 = A2($elm_community$list_extra$List$Extra$getAt, 1, args);
			if (_v2.$ === 1) {
				return '';
			} else {
				if (_v2.a === '-') {
					return '*';
				} else {
					return '';
				}
			}
		}();
		var maxNumberedLevel = A2(
			$elm$core$Maybe$withDefault,
			3,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toFloat,
				A2($elm$core$Dict$get, 'number-to-level', settings.sS)));
		var levelAsString = A3($author$project$Render$Utility$getArg, '4', 0, args);
		var levelAsFloat = function () {
			var _v1 = $elm$core$String$toFloat(levelAsString);
			if (!_v1.$) {
				var n = _v1.a;
				return n;
			} else {
				return 0;
			}
		}();
		var label = ' \\label{' + (tag + '}');
		var depthForNumbering = levelAsFloat - 1;
		switch (levelAsString) {
			case '1':
				return (_Utils_cmp(depthForNumbering, maxNumberedLevel) < 0) ? _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'section' + suffix, body),
					label) : _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'section*' + suffix, body),
					label);
			case '2':
				return (_Utils_cmp(depthForNumbering, maxNumberedLevel) < 0) ? _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsection' + suffix, body),
					label) : _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsection*' + suffix, body),
					label);
			case '3':
				return (_Utils_cmp(depthForNumbering, maxNumberedLevel) < 0) ? _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsubsection' + suffix, body),
					label) : _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subsubsection*' + suffix, body),
					label);
			case '4':
				return (_Utils_cmp(depthForNumbering, maxNumberedLevel) < 0) ? _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'paragraph' + suffix, body),
					label) : _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'paragraph*' + suffix, body),
					label);
			default:
				return _Utils_ap(
					A2($author$project$Render$Export$LaTeX$macro1, 'subheading' + suffix, body),
					label);
		}
	});
var $author$project$Render$Export$LaTeX$smallsubheading = F3(
	function (settings, args, body) {
		return '\\vspace{4pt{\\large{' + (body + '}');
	});
var $author$project$Render$Export$LaTeX$subheading = F3(
	function (settings, args, body) {
		return '\\vspace{8pt{\\Large{' + (body + '}');
	});
var $author$project$Render$Export$LaTeX$putPercent = function (str) {
	return (A2($elm$core$String$left, 1, str) === '%') ? str : ('% ' + str);
};
var $author$project$Render$Export$LaTeX$texComment = function (lines) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $author$project$Render$Export$LaTeX$putPercent, lines));
};
var $author$project$Render$Export$LaTeX$blockDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'title',
			F3(
				function (_v0, _v1, _v2) {
					return '';
				})),
			_Utils_Tuple2(
			'subtitle',
			F3(
				function (_v3, _v4, _v5) {
					return '';
				})),
			_Utils_Tuple2(
			'author',
			F3(
				function (_v6, _v7, _v8) {
					return '';
				})),
			_Utils_Tuple2(
			'date',
			F3(
				function (_v9, _v10, _v11) {
					return '';
				})),
			_Utils_Tuple2(
			'contents',
			F3(
				function (_v12, _v13, _v14) {
					return '';
				})),
			_Utils_Tuple2(
			'hide',
			F3(
				function (_v15, _v16, _v17) {
					return '';
				})),
			_Utils_Tuple2(
			'texComment',
			F3(
				function (_v18, lines, _v19) {
					return $author$project$Render$Export$LaTeX$texComment(lines);
				})),
			_Utils_Tuple2(
			'tags',
			F3(
				function (_v20, _v21, _v22) {
					return '';
				})),
			_Utils_Tuple2(
			'docinfo',
			F3(
				function (_v23, _v24, _v25) {
					return '';
				})),
			_Utils_Tuple2(
			'banner',
			F3(
				function (_v26, _v27, _v28) {
					return '';
				})),
			_Utils_Tuple2(
			'set-key',
			F3(
				function (_v29, _v30, _v31) {
					return '';
				})),
			_Utils_Tuple2(
			'endnotes',
			F3(
				function (_v32, _v33, _v34) {
					return '';
				})),
			_Utils_Tuple2(
			'index',
			F3(
				function (_v35, _v36, _v37) {
					return 'Index: not implemented';
				})),
			_Utils_Tuple2(
			'section',
			F3(
				function (settings_, args, body) {
					return A3($author$project$Render$Export$LaTeX$section, settings_, args, body);
				})),
			_Utils_Tuple2(
			'subheading',
			F3(
				function (settings_, args, body) {
					return A3($author$project$Render$Export$LaTeX$subheading, settings_, args, body);
				})),
			_Utils_Tuple2(
			'smallsubheading',
			F3(
				function (settings_, args, body) {
					return A3($author$project$Render$Export$LaTeX$smallsubheading, settings_, args, body);
				})),
			_Utils_Tuple2(
			'item',
			F3(
				function (_v38, _v39, body) {
					return A2($author$project$Render$Export$LaTeX$macro1, 'item', body);
				})),
			_Utils_Tuple2(
			'descriptionItem',
			F3(
				function (_v40, args, body) {
					return A2($author$project$Render$Export$LaTeX$descriptionItem, args, body);
				})),
			_Utils_Tuple2(
			'numbered',
			F3(
				function (_v41, _v42, body) {
					return A2($author$project$Render$Export$LaTeX$macro1, 'item', body);
				})),
			_Utils_Tuple2(
			'desc',
			F3(
				function (_v43, args, body) {
					return A2($author$project$Render$Export$LaTeX$descriptionItem, args, body);
				})),
			_Utils_Tuple2(
			'beginBlock',
			F3(
				function (_v44, _v45, _v46) {
					return '\\begin{itemize}';
				})),
			_Utils_Tuple2(
			'endBlock',
			F3(
				function (_v47, _v48, _v49) {
					return '\\end{itemize}';
				})),
			_Utils_Tuple2(
			'beginNumberedBlock',
			F3(
				function (_v50, _v51, _v52) {
					return '\\begin{enumerate}';
				})),
			_Utils_Tuple2(
			'endNumberedBlock',
			F3(
				function (_v53, _v54, _v55) {
					return '\\end{enumerate}';
				})),
			_Utils_Tuple2(
			'beginDescriptionBlock',
			F3(
				function (_v56, _v57, _v58) {
					return '\\begin{description}';
				})),
			_Utils_Tuple2(
			'endDescriptionBlock',
			F3(
				function (_v59, _v60, _v61) {
					return '\\end{description}';
				})),
			_Utils_Tuple2(
			'mathmacros',
			F3(
				function (_v62, _v63, body) {
					return body + '\nHa ha ha!';
				})),
			_Utils_Tuple2(
			'setcounter',
			F3(
				function (_v64, _v65, _v66) {
					return '';
				}))
		]));
var $author$project$Render$Export$LaTeX$commentBlankLine = function (line) {
	return (line === '') ? '%' : line;
};
var $author$project$Render$Export$LaTeX$tagged = F2(
	function (name, body) {
		return '\\' + (name + ('{' + (body + '}')));
	});
var $author$project$Render$Export$LaTeX$environment = F2(
	function (name, body) {
		return A2(
			$elm$core$String$join,
			'\n',
			_List_fromArray(
				[
					A2($author$project$Render$Export$LaTeX$tagged, 'begin', name),
					body,
					A2($author$project$Render$Export$LaTeX$tagged, 'end', name)
				]));
	});
var $author$project$Render$Export$Image$exportCenteredFigure = F3(
	function (url, options, caption) {
		return (caption === 'none') ? A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				['\\imagecenter{', url, '}{' + (options + '}')])) : A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				['\\imagecentercaptioned{', url, '}{' + (options + ('}{' + (caption + '}')))]));
	});
var $author$project$Render$Export$Image$fractionaRescale = function (k) {
	var f = $elm$core$String$fromFloat(k / 600.0);
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			[f, '\\textwidth']));
};
var $author$project$Render$Export$Image$rescale = F2(
	function (displayWidth, k) {
		return $elm$core$String$fromFloat(k * (6.0 / displayWidth)) + 'truein';
	});
var $author$project$Render$Export$Image$imageParametersForBlock = F2(
	function (settings, block) {
		var url = function () {
			var _v5 = block.qh;
			if (!_v5.$) {
				var str = _v5.a;
				return str;
			} else {
				return 'bad block';
			}
		}();
		var placement = function () {
			var _v4 = A2($elm$core$Dict$get, 'placement', block.sS);
			if (_v4.$ === 1) {
				return 'C';
			} else {
				switch (_v4.a) {
					case 'left':
						return 'L';
					case 'right':
						return 'R';
					case 'center':
						return 'C';
					default:
						return 'C';
				}
			}
		}();
		var displayWidth = settings.uE;
		var fractionalWidth = function () {
			var _v2 = A2($elm$core$Dict$get, 'width', block.sS);
			if (_v2.$ === 1) {
				return '0.51\\textwidth';
			} else {
				if (_v2.a === 'fill') {
					return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
				} else {
					var w_ = _v2.a;
					var _v3 = $elm$core$String$toInt(w_);
					if (_v3.$ === 1) {
						return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
					} else {
						var w = _v3.a;
						return $author$project$Render$Export$Image$fractionaRescale(w);
					}
				}
			}
		}();
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', block.sS);
			if (_v0.$ === 1) {
				return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
			} else {
				if (_v0.a === 'fill') {
					return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
				} else {
					var w_ = _v0.a;
					var _v1 = $elm$core$String$toInt(w_);
					if (_v1.$ === 1) {
						return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
					} else {
						var w = _v1.a;
						return A2($author$project$Render$Export$Image$rescale, displayWidth, w);
					}
				}
			}
		}();
		var caption = A3(
			$elm$core$String$replace,
			':',
			'',
			A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Dict$get, 'caption', block.sS)));
		return {fb: caption, q$: caption, fA: fractionalWidth, fW: placement, uz: url, uE: width};
	});
var $author$project$Render$Export$Image$exportBlock = F2(
	function (settings, block) {
		var params = A2($author$project$Render$Export$Image$imageParametersForBlock, settings, block);
		var options = A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[params.fA, ',keepaspectratio']));
		return A3($author$project$Render$Export$Image$exportCenteredFigure, params.uz, options, params.fb);
	});
var $author$project$Render$Export$LaTeX$encloseWithBraces = function (str_) {
	return '{' + ($elm$core$String$trim(str_) + '}');
};
var $author$project$Render$Export$LaTeX$blindIndex = '';
var $author$project$Render$Export$Util$getArgs = A2(
	$elm$core$Basics$composeR,
	$author$project$Generic$ASTTools$exprListToStringList,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map($elm$core$String$words),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$concat,
			$elm$core$List$filter(
				function (x) {
					return x !== '';
				}))));
var $author$project$Render$Export$LaTeX$bolditalic = function (exprs) {
	var args = A2(
		$elm$core$String$join,
		' ',
		$author$project$Render$Export$Util$getArgs(exprs));
	return '\\textbf{\\emph{' + (args + '}}');
};
var $author$project$Render$Export$LaTeX$brackets = function (exprs) {
	return '[' + (A2(
		$elm$core$String$join,
		' ',
		$author$project$Render$Export$Util$getArgs(exprs)) + ']');
};
var $author$project$Render$Export$LaTeX$bt = function (_v0) {
	return '`';
};
var $author$project$Render$Export$LaTeX$dontRender = F2(
	function (_v0, _v1) {
		return '';
	});
var $author$project$Render$Export$Image$exportWrappedFigure = F4(
	function (placement, url, options, caption) {
		return A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				['\\imagefloat{', url, '}{' + (options + ('}{' + (caption + ('}{' + (placement + '}')))))]));
	});
var $author$project$Render$Export$Image$fixWidth = function (w) {
	return ((w === '') || (w === 'fill')) ? '500' : w;
};
var $author$project$Render$Export$Util$getOneArg = function (exprs) {
	var _v0 = $elm$core$List$head(
		$author$project$Render$Export$Util$getArgs(exprs));
	if (_v0.$ === 1) {
		return '';
	} else {
		var str = _v0.a;
		return str;
	}
};
var $author$project$Render$Export$Image$imageParameters = F2(
	function (settings, body) {
		var displayWidth = settings.uE;
		var _arguments = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				$elm$core$String$words,
				$author$project$Generic$ASTTools$exprListToStringList(body)));
		var remainingArguments = A2($elm$core$List$drop, 1, _arguments);
		var keyValueStrings_ = A2(
			$elm$core$List$filter,
			function (s) {
				return A2($elm$core$String$contains, ':', s);
			},
			remainingArguments);
		var captionLeadString = A3(
			$elm$core$String$replace,
			'caption:',
			'',
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$filter,
					function (s) {
						return A2($elm$core$String$contains, 'caption', s);
					},
					keyValueStrings_)));
		var caption = A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$cons,
				captionLeadString,
				A2(
					$elm$core$List$filter,
					function (s) {
						return !A2($elm$core$String$contains, ':', s);
					},
					remainingArguments)));
		var keyValueStrings = A2(
			$elm$core$List$filter,
			function (s) {
				return !A2($elm$core$String$contains, 'caption', s);
			},
			keyValueStrings_);
		var dict = $author$project$Tools$Utility$keyValueDict(keyValueStrings);
		var description = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'caption', dict));
		var fractionalWidth = function () {
			var _v3 = A2($elm$core$Dict$get, 'width', dict);
			if (_v3.$ === 1) {
				return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
			} else {
				if (_v3.a === 'fill') {
					return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
				} else {
					var w_ = _v3.a;
					var _v4 = $elm$core$String$toInt(w_);
					if (_v4.$ === 1) {
						return $author$project$Render$Export$Image$fractionaRescale(displayWidth);
					} else {
						var w = _v4.a;
						return $author$project$Render$Export$Image$fractionaRescale(w);
					}
				}
			}
		}();
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', dict);
			if (_v2.$ === 1) {
				return 'C';
			} else {
				switch (_v2.a) {
					case 'left':
						return 'L';
					case 'right':
						return 'R';
					case 'center':
						return 'C';
					default:
						return 'C';
				}
			}
		}();
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', dict);
			if (_v0.$ === 1) {
				return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
			} else {
				if (_v0.a === 'fill') {
					return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
				} else {
					var w_ = _v0.a;
					var _v1 = $elm$core$String$toInt(w_);
					if (_v1.$ === 1) {
						return A2($author$project$Render$Export$Image$rescale, displayWidth, displayWidth);
					} else {
						var w = _v1.a;
						return A2($author$project$Render$Export$Image$rescale, displayWidth, w);
					}
				}
			}
		}();
		var url = A2(
			$elm$core$Maybe$withDefault,
			'no-image',
			$elm$core$List$head(_arguments));
		return {fb: caption, q$: description, fA: fractionalWidth, fW: placement, uz: url, uE: width};
	});
var $author$project$Render$Export$Image$export = F2(
	function (s, exprs) {
		var params = A2($author$project$Render$Export$Image$imageParameters, s, exprs);
		var options = A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[
					$author$project$Render$Export$Image$fixWidth(params.uE),
					',keepaspectratio'
				]));
		var args = $elm$core$String$words(
			$author$project$Render$Export$Util$getOneArg(exprs));
		var _v0 = $elm$core$List$head(args);
		if (_v0.$ === 1) {
			return 'ERROR IN IMAGE';
		} else {
			var url_ = _v0.a;
			return (params.fW === 'C') ? A3($author$project$Render$Export$Image$exportCenteredFigure, url_, options, params.fb) : A4($author$project$Render$Export$Image$exportWrappedFigure, params.fW, url_, params.fA, params.fb);
		}
	});
var $author$project$Render$Export$Util$getTwoArgs = function (exprs) {
	var args = $author$project$Render$Export$Util$getArgs(exprs);
	var n = $elm$core$List$length(args);
	var first = A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$take, n - 1, args));
	var second = A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$drop, n - 1, args));
	return {mv: first, oD: second};
};
var $author$project$Render$Export$LaTeX$ilink = function (exprs) {
	var args = $author$project$Render$Export$Util$getTwoArgs(exprs);
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\href{', 'https://scripta.io/s/', args.oD, '}{', args.mv, '}']));
};
var $author$project$Render$Export$LaTeX$lb = function (_v0) {
	return '[';
};
var $author$project$Render$Export$LaTeX$link = function (exprs) {
	var args = $author$project$Render$Export$Util$getTwoArgs(exprs);
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\href{', args.oD, '}{', args.mv, '}']));
};
var $author$project$Render$Export$LaTeX$par = function (_v0) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\par\\par']));
};
var $author$project$Render$Export$LaTeX$rb = function (_v0) {
	return ']';
};
var $author$project$Render$Export$LaTeX$underscore = function (_v0) {
	return '$\\_$';
};
var $author$project$Render$Export$LaTeX$vspace = function (exprs) {
	var arg = function (x) {
		return x + 'pt';
	}(
		$elm$core$String$fromFloat(
			function (x) {
				return x / 4.0;
			}(
				A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$String$toFloat(
						$author$project$Render$Export$Util$getOneArg(exprs))))));
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\\par\\vspace{', arg, '}']));
};
var $author$project$Render$Export$LaTeX$macroDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'link',
			function (_v0) {
				return $author$project$Render$Export$LaTeX$link;
			}),
			_Utils_Tuple2(
			'ilink',
			function (_v1) {
				return $author$project$Render$Export$LaTeX$ilink;
			}),
			_Utils_Tuple2(
			'par',
			function (_v2) {
				return $author$project$Render$Export$LaTeX$par;
			}),
			_Utils_Tuple2(
			'index_',
			F2(
				function (_v3, _v4) {
					return $author$project$Render$Export$LaTeX$blindIndex;
				})),
			_Utils_Tuple2('image', $author$project$Render$Export$Image$export),
			_Utils_Tuple2(
			'vspace',
			function (_v5) {
				return $author$project$Render$Export$LaTeX$vspace;
			}),
			_Utils_Tuple2(
			'bolditalic',
			function (_v6) {
				return $author$project$Render$Export$LaTeX$bolditalic;
			}),
			_Utils_Tuple2(
			'brackets',
			function (_v7) {
				return $author$project$Render$Export$LaTeX$brackets;
			}),
			_Utils_Tuple2(
			'lb',
			function (_v8) {
				return $author$project$Render$Export$LaTeX$lb;
			}),
			_Utils_Tuple2(
			'rb',
			function (_v9) {
				return $author$project$Render$Export$LaTeX$rb;
			}),
			_Utils_Tuple2(
			'bt',
			function (_v10) {
				return $author$project$Render$Export$LaTeX$bt;
			}),
			_Utils_Tuple2(
			'underscore',
			function (_v11) {
				return $author$project$Render$Export$LaTeX$underscore;
			}),
			_Utils_Tuple2('tags', $author$project$Render$Export$LaTeX$dontRender)
		]));
var $author$project$Render$Export$LaTeX$fixChars = function (str) {
	return A3(
		$elm$core$String$replace,
		'}',
		'\\}',
		A3($elm$core$String$replace, '{', '\\{', str));
};
var $author$project$ETeX$Transform$parseMany = F2(
	function (userDefinedMacroDict, str) {
		return A2($author$project$ETeX$Transform$parseManyWithDict, userDefinedMacroDict, str);
	});
var $author$project$ETeX$Dictionary$symbolDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('qquad', '\\qquad'),
			_Utils_Tuple2('alpha', '\\alpha'),
			_Utils_Tuple2('beta', '\\beta'),
			_Utils_Tuple2('gamma', '\\gamma'),
			_Utils_Tuple2('delta', '\\delta'),
			_Utils_Tuple2('epsilon', '\\epsilon'),
			_Utils_Tuple2('zeta', '\\zeta'),
			_Utils_Tuple2('eta', '\\eta'),
			_Utils_Tuple2('theta', '\\theta'),
			_Utils_Tuple2('iota', '\\iota'),
			_Utils_Tuple2('kappa', '\\kappa'),
			_Utils_Tuple2('lambda', '\\lambda'),
			_Utils_Tuple2('mu', '\\mu'),
			_Utils_Tuple2('nu', '\\nu'),
			_Utils_Tuple2('xi', '\\xi'),
			_Utils_Tuple2('omicron', '\\omicron'),
			_Utils_Tuple2('pi', '\\pi'),
			_Utils_Tuple2('rho', '\\rho'),
			_Utils_Tuple2('sigma', '\\sigma'),
			_Utils_Tuple2('tau', '\\tau'),
			_Utils_Tuple2('upsilon', '\\upsilon'),
			_Utils_Tuple2('phi', '\\phi'),
			_Utils_Tuple2('chi', '\\chi'),
			_Utils_Tuple2('psi', '\\psi'),
			_Utils_Tuple2('omega', '\\omega'),
			_Utils_Tuple2('Alpha', '\\Alpha'),
			_Utils_Tuple2('Beta', '\\Beta'),
			_Utils_Tuple2('Gamma', '\\Gamma'),
			_Utils_Tuple2('Delta', '\\Delta'),
			_Utils_Tuple2('Epsilon', '\\Epsilon'),
			_Utils_Tuple2('Zeta', '\\Zeta'),
			_Utils_Tuple2('Eta', '\\Eta'),
			_Utils_Tuple2('Theta', '\\Theta'),
			_Utils_Tuple2('Iota', '\\Iota'),
			_Utils_Tuple2('Kappa', '\\Kappa'),
			_Utils_Tuple2('Lambda', '\\Lambda'),
			_Utils_Tuple2('Mu', '\\Mu'),
			_Utils_Tuple2('Nu', '\\Nu'),
			_Utils_Tuple2('Xi', '\\Xi'),
			_Utils_Tuple2('Omicron', '\\Omicron'),
			_Utils_Tuple2('Pi', '\\Pi'),
			_Utils_Tuple2('Rho', '\\Rho'),
			_Utils_Tuple2('Sigma', '\\Sigma'),
			_Utils_Tuple2('Tau', '\\Tau'),
			_Utils_Tuple2('Upsilon', '\\Upsilon'),
			_Utils_Tuple2('Phi', '\\Phi'),
			_Utils_Tuple2('Chi', '\\Chi'),
			_Utils_Tuple2('Psi', '\\Psi'),
			_Utils_Tuple2('Omega', '\\Omega'),
			_Utils_Tuple2('varepsilon', '\\varepsilon'),
			_Utils_Tuple2('vartheta', '\\vartheta'),
			_Utils_Tuple2('varpi', '\\varpi'),
			_Utils_Tuple2('varrho', '\\varrho'),
			_Utils_Tuple2('varsigma', '\\varsigma'),
			_Utils_Tuple2('varphi', '\\varphi')
		]));
var $author$project$ETeX$Transform$resolveSymbolName = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			var _v2 = A2($elm$core$Dict$get, str, $author$project$ETeX$Dictionary$symbolDict);
			if (!_v2.$) {
				return $author$project$ETeX$Transform$AlphaNum('\\' + str);
			} else {
				return $author$project$ETeX$Transform$AlphaNum(str);
			}
		case 3:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$PArg(
				A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, exprs));
		case 4:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$ParenthExpr(
				A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, exprs));
		case 18:
			var name = expr.a;
			var args = expr.b;
			return A2(
				$author$project$ETeX$Transform$Macro,
				name,
				A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, args));
		case 1:
			var str = expr.a;
			return $author$project$ETeX$Transform$F0(str);
		case 2:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$Arg(
				A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, exprs));
		case 5:
			var deco = expr.a;
			return $author$project$ETeX$Transform$Sub(
				$author$project$ETeX$Transform$resolveSymbolNameInDeco(deco));
		case 6:
			var deco = expr.a;
			return $author$project$ETeX$Transform$Super(
				$author$project$ETeX$Transform$resolveSymbolNameInDeco(deco));
		case 7:
			var n = expr.a;
			return $author$project$ETeX$Transform$Param(n);
		case 8:
			return $author$project$ETeX$Transform$WS;
		case 9:
			return $author$project$ETeX$Transform$MathSpace;
		case 10:
			return $author$project$ETeX$Transform$MathSmallSpace;
		case 11:
			return $author$project$ETeX$Transform$MathMediumSpace;
		case 12:
			return $author$project$ETeX$Transform$LeftMathBrace;
		case 13:
			return $author$project$ETeX$Transform$RightMathBrace;
		case 14:
			return $author$project$ETeX$Transform$LeftParen;
		case 15:
			return $author$project$ETeX$Transform$RightParen;
		case 16:
			return $author$project$ETeX$Transform$Comma;
		case 17:
			var str = expr.a;
			return $author$project$ETeX$Transform$MathSymbols(str);
		case 19:
			var name = expr.a;
			var args = expr.b;
			return A2(
				$author$project$ETeX$Transform$FCall,
				name,
				A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, args));
		case 20:
			var exprs = expr.a;
			return $author$project$ETeX$Transform$Expr(
				A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, exprs));
		default:
			var str = expr.a;
			return $author$project$ETeX$Transform$Text(str);
	}
};
var $author$project$ETeX$Transform$resolveSymbolNameInDeco = function (deco) {
	if (!deco.$) {
		var expr = deco.a;
		return $author$project$ETeX$Transform$DecoM(
			$author$project$ETeX$Transform$resolveSymbolName(expr));
	} else {
		var n = deco.a;
		return $author$project$ETeX$Transform$DecoI(n);
	}
};
var $author$project$ETeX$Transform$resolveSymbolNames = function (exprs) {
	return A2($elm$core$List$map, $author$project$ETeX$Transform$resolveSymbolName, exprs);
};
var $author$project$ETeX$Transform$transformETeX_ = F2(
	function (userdefinedMacroDict, src) {
		return A2(
			$elm$core$Result$map,
			$author$project$ETeX$Transform$resolveSymbolNames,
			A2($author$project$ETeX$Transform$parseMany, userdefinedMacroDict, src));
	});
var $author$project$ETeX$Transform$transformETeX = F2(
	function (userdefinedMacroDict, src) {
		var _v0 = A2($author$project$ETeX$Transform$transformETeX_, userdefinedMacroDict, src);
		if (!_v0.$) {
			var result = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $author$project$ETeX$Transform$print, result));
		} else {
			return src;
		}
	});
var $author$project$MicroLaTeX$Util$transformLabel = function (str) {
	var normalize = function (m) {
		return $elm$core$String$trim(
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$elm$core$Maybe$withDefault(''),
					m)));
	};
	return A3(
		$author$project$Tools$Utility$userReplace,
		'\\[label(.*)\\]',
		function (m) {
			return '\\label{' + (normalize(m.tH) + '}');
		},
		str);
};
var $author$project$Render$Export$LaTeX$inlineCode = function (str) {
	return '\\verb`' + (str + '`');
};
var $author$project$Render$Export$LaTeX$inlineMath = function (str) {
	return '$' + (str + '$');
};
var $author$project$Render$Export$LaTeX$verbatimExprDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('code', $author$project$Render$Export$LaTeX$inlineCode),
			_Utils_Tuple2('math', $author$project$Render$Export$LaTeX$inlineMath)
		]));
var $author$project$Render$Export$LaTeX$renderVerbatim = F3(
	function (mathMacroDict, name, body) {
		var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$verbatimExprDict);
		if (_v0.$ === 1) {
			return name + ('(' + (body + ') — unimplemented '));
		} else {
			var f = _v0.a;
			return A2(
				$elm$core$List$member,
				name,
				_List_fromArray(
					['equation', 'aligned', 'math'])) ? f(
				A2(
					$author$project$ETeX$Transform$transformETeX,
					mathMacroDict,
					$author$project$MicroLaTeX$Util$transformLabel(body))) : f(
				$author$project$MicroLaTeX$Util$transformLabel(
					$author$project$Render$Export$LaTeX$fixChars(body)));
		}
	});
var $author$project$Generic$TextMacro$toString = F2(
	function (exprToString, macro) {
		return A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[
					'\\newcommand{\\',
					macro.bn,
					'}[',
					$elm$core$String$fromInt(
					$elm$core$List$length(macro.cY)),
					']{',
					A2(
					$elm$core$String$join,
					'',
					A2($elm$core$List$map, exprToString, macro.qh)),
					'}    '
				]));
	});
var $author$project$Render$Export$LaTeX$exportExpr = F3(
	function (mathMacroDict, settings, expr) {
		switch (expr.$) {
			case 1:
				var name = expr.a;
				var exps_ = expr.b;
				if (name === 'lambda') {
					var _v1 = $author$project$Generic$TextMacro$extract(expr);
					if (!_v1.$) {
						var lambda = _v1.a;
						return A2(
							$author$project$Generic$TextMacro$toString,
							A2($author$project$Render$Export$LaTeX$exportExpr, mathMacroDict, settings),
							lambda);
					} else {
						return 'Error extracting lambda';
					}
				} else {
					var _v2 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$macroDict);
					if (!_v2.$) {
						var f = _v2.a;
						return A2(f, settings, exps_);
					} else {
						return '\\' + ($author$project$Render$Export$LaTeX$unalias(name) + A2(
							$elm$core$String$join,
							'',
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeL,
									$author$project$Render$Export$LaTeX$encloseWithBraces,
									A2($author$project$Render$Export$LaTeX$exportExpr, mathMacroDict, settings)),
								exps_)));
					}
				}
			case 0:
				var str = expr.a;
				return $author$project$Render$Export$LaTeX$mapChars2(str);
			case 2:
				var name = expr.a;
				var body = expr.b;
				return A3($author$project$Render$Export$LaTeX$renderVerbatim, mathMacroDict, name, body);
			default:
				var exprList = expr.a;
				return '[ExprList]';
		}
	});
var $author$project$Render$Export$LaTeX$mapChars1 = function (str) {
	return A3($elm$core$String$replace, '\\term_', '\\termx', str);
};
var $author$project$Render$Export$LaTeX$exportExprList = F3(
	function (mathMacroDict, settings, exprs) {
		return $author$project$Render$Export$LaTeX$mapChars1(
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($author$project$Render$Export$LaTeX$exportExpr, mathMacroDict, settings),
					exprs)));
	});
var $author$project$Generic$TextMacro$toLaTeXString = function (expr) {
	switch (expr.$) {
		case 1:
			var name = expr.a;
			var expressions = expr.b;
			var body_ = A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $author$project$Generic$TextMacro$toLaTeXString, expressions));
			var body = (body_ === '') ? body_ : ((A2($elm$core$String$left, 1, body_) === '[') ? body_ : ((A2($elm$core$String$left, 1, body_) === ' ') ? body_ : (' ' + body_)));
			return '\\' + (name + ('{' + (body + '}')));
		case 0:
			var str = expr.a;
			return str;
		case 2:
			var name = expr.a;
			var str = expr.b;
			switch (name) {
				case 'math':
					return '$' + (str + '$');
				case 'code':
					return '`' + (str + '`');
				default:
					return 'error: verbatim ' + (name + ' not recognized');
			}
		default:
			return '[ExprList]';
	}
};
var $author$project$Generic$TextMacro$printLaTeXMacro = function (macro) {
	return (!$elm$core$List$length(macro.cY)) ? ('\\newcommand{\\' + (macro.bn + ('}{' + (A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$Generic$TextMacro$toLaTeXString, macro.qh)) + '}')))) : ('\\newcommand{\\' + (macro.bn + ('}' + ('[' + ($elm$core$String$fromInt(
		$elm$core$List$length(macro.cY)) + (']{' + (A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$Generic$TextMacro$toLaTeXString, macro.qh)) + '}')))))));
};
var $author$project$Generic$TextMacro$exportTexMacros = function (str) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Generic$TextMacro$printLaTeXMacro,
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				$elm$core$Dict$toList(
					$author$project$Generic$TextMacro$buildDictionary(
						$elm$core$String$lines(str))))));
};
var $author$project$Render$Export$LaTeX$hideToPercentComment = function (str) {
	return (A2($elm$core$String$left, 6, str) === '\\hide{') ? function (s) {
		return '%% ' + s;
	}(
		A2(
			$elm$core$String$dropRight,
			1,
			A2($elm$core$String$dropLeft, 6, str))) : str;
};
var $author$project$Render$Data$getVerbatimContent = function (block) {
	var _v0 = block.qh;
	if (!_v0.$) {
		var str = _v0.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Data$prepareTable = F2(
	function (fontWidth_, block) {
		var title = A2($elm$core$Dict$get, 'title', block.sS);
		var lines = A2(
			$elm$core$String$split,
			'\n',
			$author$project$Render$Data$getVerbatimContent(block));
		var rawCells = A2(
			$elm$core$List$map,
			$elm$core$List$map($elm$core$String$trim),
			A2(
				$elm$core$List$map,
				$elm$core$String$split(','),
				lines));
		var columnsToDisplay = A2(
			$elm$core$List$map,
			function (n) {
				return n - 1;
			},
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toInt),
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$split(','),
							A2($elm$core$Dict$get, 'columns', block.sS))))));
		var selectedCells = function () {
			if (_Utils_eq(columnsToDisplay, _List_Nil)) {
				return rawCells;
			} else {
				var updater = F2(
					function (_v0, acc_) {
						var k = _v0.a;
						var col = _v0.b;
						return A2($elm$core$List$member, k, columnsToDisplay) ? A2($elm$core$List$cons, col, acc_) : acc_;
					});
				var cols = A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, col) {
							return _Utils_Tuple2(k, col);
						}),
					$elm_community$list_extra$List$Extra$transpose(rawCells));
				var selectedCols = A3($elm$core$List$foldl, updater, _List_Nil, cols);
				return $elm_community$list_extra$List$Extra$transpose(
					$elm$core$List$reverse(selectedCols));
			}
		}();
		var columnWidths = A2(
			$elm$core$List$map,
			function (w) {
				return fontWidth_ * w;
			},
			A2(
				$elm$core$List$map,
				function (column) {
					return A2(
						$elm$core$Maybe$withDefault,
						1,
						$elm$core$List$maximum(column));
				},
				$elm_community$list_extra$List$Extra$transpose(
					A2(
						$elm$core$List$map,
						$elm$core$List$map($elm$core$String$length),
						selectedCells))));
		var totalWidth = $elm$core$List$sum(columnWidths);
		return {iQ: columnWidths, kK: selectedCells, ic: title, pe: totalWidth};
	});
var $author$project$ETeX$Transform$processSimpleMacroBody = function (body) {
	return A2($author$project$ETeX$Transform$processSimpleMacroBodyWithContext, _List_Nil, body);
};
var $author$project$ETeX$Transform$simpleMacroToLaTeX = function (line) {
	if (A2($elm$core$String$contains, ':', line)) {
		var _v0 = A2($author$project$ETeX$Transform$parseSimpleMacroWithContext, _List_Nil, line);
		if (!_v0.$) {
			var _v1 = _v0.a;
			var name = _v1.a;
			var _v2 = _v1.b;
			var arity = _v2.a;
			var processedBody = $author$project$ETeX$Transform$processSimpleMacroBody(
				$elm$core$String$trim(
					A2(
						$elm$core$String$join,
						':',
						A2(
							$elm$core$List$drop,
							1,
							A2($elm$core$String$split, ':', line)))));
			var arityStr = (arity > 0) ? ('[' + ($elm$core$String$fromInt(arity) + ']')) : '';
			return '\\newcommand{\\' + (name + ('}' + (arityStr + ('{' + (processedBody + '}')))));
		} else {
			return '';
		}
	} else {
		return '';
	}
};
var $author$project$ETeX$Transform$toLaTeXNewCommands = function (input) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$filter,
			$elm$core$Basics$neq(''),
			A2(
				$elm$core$List$map,
				$author$project$ETeX$Transform$simpleMacroToLaTeX,
				A2(
					$elm$core$List$filter,
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						$elm$core$String$lines(
							$elm$core$String$trim(input)))))));
};
var $author$project$Render$Export$LaTeX$exportBlock = F3(
	function (mathMacroDict, settings, block) {
		var _v0 = block.fC;
		switch (_v0.$) {
			case 0:
				var _v1 = block.qh;
				if (!_v1.$) {
					var str = _v1.a;
					return $author$project$Render$Export$LaTeX$mapChars2(str);
				} else {
					var exprs_ = _v1.a;
					return A3($author$project$Render$Export$LaTeX$exportExprList, mathMacroDict, settings, exprs_);
				}
			case 1:
				if (_v0.a === 'table') {
					var _v2 = block.qh;
					if (!_v2.$) {
						var str = _v2.a;
						return str;
					} else {
						var exprs_ = _v2.a;
						var _v3 = $elm$core$List$head(exprs_);
						if (((!_v3.$) && (_v3.a.$ === 1)) && (_v3.a.a === 'table')) {
							var _v4 = _v3.a;
							var body = _v4.b;
							var renderRow = function (rowExpr) {
								if ((rowExpr.$ === 1) && (rowExpr.a === 'row')) {
									var cells = rowExpr.b;
									return cells;
								} else {
									return _List_Nil;
								}
							};
							var makeRow = function (row) {
								return A2($elm$core$String$join, '& ', row);
							};
							var exportCell = function (expr) {
								if ((expr.$ === 1) && (expr.a === 'cell')) {
									var exprs2 = expr.b;
									return A3($author$project$Render$Export$LaTeX$exportExprList, mathMacroDict, settings, exprs2);
								} else {
									return 'error constructing table cell';
								}
							};
							var cellTable = A2($elm$core$List$map, renderRow, body);
							var stringTable = A2(
								$elm$core$List$map,
								$elm$core$List$map(exportCell),
								cellTable);
							var columns = $elm$core$List$length(
								$elm_community$list_extra$List$Extra$transpose(stringTable));
							var defaultFormat = function (x) {
								return '{' + (x + '}');
							}(
								A2(
									$elm$core$String$join,
									' ',
									A2($elm$core$List$repeat, columns, 'l')));
							var format = A2(
								$elm$core$Maybe$withDefault,
								defaultFormat,
								A2($elm$core$Dict$get, 'format', block.sS));
							var output = A2(
								$elm$core$String$join,
								' \\\\\n',
								A2($elm$core$List$map, makeRow, stringTable));
							return '\\begin{tabular}' + (format + ('\n' + (output + '\n\\end{tabular}')));
						} else {
							return 'error in constructing table';
						}
					}
				} else {
					var name = _v0.a;
					var _v7 = block.qh;
					if (!_v7.$) {
						return '';
					} else {
						var exprs_ = _v7.a;
						var _v8 = A2($elm$core$Dict$get, name, $author$project$Render$Export$LaTeX$blockDict);
						if (!_v8.$) {
							var f = _v8.a;
							return A3(
								f,
								settings,
								block.lv,
								A3($author$project$Render$Export$LaTeX$exportExprList, mathMacroDict, settings, exprs_));
						} else {
							return A2(
								$author$project$Render$Export$LaTeX$environment,
								name,
								A3($author$project$Render$Export$LaTeX$exportExprList, mathMacroDict, settings, exprs_));
						}
					}
				}
			default:
				var name = _v0.a;
				var _v9 = block.qh;
				if (!_v9.$) {
					var str = _v9.a;
					switch (name) {
						case 'math':
							var fix_ = function (str_) {
								return $author$project$MicroLaTeX$Util$transformLabel(
									A2(
										$author$project$ETeX$Transform$transformETeX,
										mathMacroDict,
										A2(
											$elm$core$String$join,
											'\n',
											A2(
												$elm$core$List$filter,
												function (line) {
													return A2($elm$core$String$left, 2, line) !== '$$';
												},
												$elm$core$String$lines(str_)))));
							};
							return A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[
										'$$',
										fix_(str),
										'$$'
									]));
						case 'csvtable':
							var renderRow = F3(
								function (rowNumber, widths_, rowOfCells) {
									return (!rowNumber) ? A3(
										$elm$core$String$replace,
										'_',
										' ',
										A2(
											$elm$core$String$join,
											' ',
											A3(
												$elm$core$List$map2,
												F2(
													function (cell, width) {
														return A3($elm$core$String$padRight, width, ' ', cell);
													}),
												rowOfCells,
												widths_))) : A2(
										$elm$core$String$join,
										' ',
										A3(
											$elm$core$List$map2,
											F2(
												function (cell, width) {
													return A3($elm$core$String$padRight, width, ' ', cell);
												}),
											rowOfCells,
											widths_));
								});
							var data = A2($author$project$Render$Data$prepareTable, 1, block);
							var renderedRows = A2(
								$elm$core$String$join,
								'\n',
								A2(
									$elm$core$List$indexedMap,
									function (rowNumber) {
										return A2(renderRow, rowNumber, data.iQ);
									},
									data.kK));
							var _v11 = data.ic;
							if (_v11.$ === 1) {
								return A2(
									$elm$core$String$join,
									'\n',
									_List_fromArray(
										['\\begin{verbatim}', renderedRows, '\\end{verbatim}']));
							} else {
								var title = _v11.a;
								var separator = A2($elm$core$String$repeat, data.pe, '-');
								return A2(
									$elm$core$String$join,
									'\n',
									_List_fromArray(
										['\\begin{verbatim}', title, separator, renderedRows, '\\end{verbatim}']));
							}
						case 'equation':
							return A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[
										'\\begin{equation}',
										$author$project$MicroLaTeX$Util$transformLabel(
										A2($author$project$ETeX$Transform$transformETeX, mathMacroDict, str)),
										'\\end{equation}'
									]));
						case 'aligned':
							var processedLines = A2(
								$elm$core$String$join,
								'\\\\\n',
								A2(
									$elm$core$List$map,
									$author$project$MicroLaTeX$Util$transformLabel,
									A2(
										$elm$core$List$map,
										$author$project$ETeX$Transform$transformETeX(mathMacroDict),
										A2(
											$elm$core$List$map,
											$elm$core$String$trim,
											A2($elm$core$String$split, '\\\\', str)))));
							return A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									['\\begin{align}', processedLines, '\\end{align}']));
						case 'code':
							return function (s) {
								return '\\begin{verbatim}\n' + (s + '\n\\end{verbatim}');
							}(
								$author$project$Render$Export$LaTeX$fixChars(str));
						case 'tabular':
							return function (s) {
								return '\\begin{tabular}{' + (A2($elm$core$String$join, ' ', block.lv) + ('}\n' + (s + '\n\\end{tabular}')));
							}(
								$author$project$Render$Export$LaTeX$fixChars(str));
						case 'verbatim':
							return function (s) {
								return '\\begin{verbatim}\n' + (s + '\n\\end{verbatim}');
							}(
								$author$project$Render$Export$LaTeX$fixChars(str));
						case 'verse':
							return function (s) {
								return '\\begin{verbatim}\n' + (s + '\n\\end{verbatim}');
							}(
								$author$project$Render$Export$LaTeX$fixChars(str));
						case 'load-files':
							return '';
						case 'mathmacros':
							return $author$project$ETeX$Transform$toLaTeXNewCommands(str);
						case 'texComment':
							return $author$project$Render$Export$LaTeX$texComment(
								$elm$core$String$lines(str));
						case 'textmacros':
							return $author$project$Generic$TextMacro$exportTexMacros(str);
						case 'image':
							return A2($author$project$Render$Export$Image$exportBlock, settings, block);
						case 'quiver':
							var lines = A2(
								$elm$core$List$filter,
								function (line) {
									return line !== '';
								},
								$elm$core$String$lines(
									A2(
										$elm$core$String$join,
										'\n',
										A2(
											$elm$core$List$drop,
											1,
											A2($elm$core$String$split, '---', str)))));
							var line1 = $elm$core$String$trim(
								A2(
									$elm$core$Maybe$withDefault,
									'%%',
									$elm$core$List$head(lines)));
							var line1b = A2($elm$core$String$contains, '\\hide{', line1) ? function (x) {
								return '%% ' + x;
							}(
								A2(
									$elm$core$String$dropRight,
									1,
									A3($elm$core$String$replace, '\\hide{', '', line1))) : line1;
							var data = A2(
								$elm$core$String$join,
								'\n',
								function (x) {
									return A2(
										$elm$core$List$cons,
										line1b,
										A2(
											$elm$core$List$cons,
											'\\[\\begin{tikzcd}',
											_Utils_ap(
												x,
												_List_fromArray(
													['\\end{tikzcd}\\]']))));
								}(
									A2(
										$elm$core$List$filter,
										function (line) {
											return !A2($elm$core$String$contains, '\\end{tikzcd}\\]', line);
										},
										A2(
											$elm$core$List$filter,
											function (line) {
												return !A2($elm$core$String$contains, '\\[\\begin{tikzcd}', line);
											},
											A2($elm$core$List$drop, 1, lines)))));
							return data;
						case 'tikz':
							var renderedAsLaTeX = A2($elm$core$String$contains, '\\hide{', str);
							var data = A2(
								$author$project$Render$Export$LaTeX$addTikzPictureClosing,
								renderedAsLaTeX,
								A2(
									$elm$core$String$join,
									'\n',
									A2(
										$elm$core$List$map,
										A2($elm$core$Basics$composeR, $author$project$Render$Export$LaTeX$hideToPercentComment, $author$project$Render$Export$LaTeX$commentBlankLine),
										$elm$core$String$lines(
											A2(
												$elm$core$String$join,
												'',
												A2(
													$elm$core$List$drop,
													1,
													A2($elm$core$String$split, '---', str)))))));
							return A2(
								$elm$core$String$join,
								'',
								_List_fromArray(
									['\\[\n', data, '\n\\]']));
						case 'docinfo':
							return '';
						default:
							return ': export of this block is unimplemented';
					}
				} else {
					return '???(13)';
				}
		}
	});
var $author$project$Render$Export$LaTeX$exportTree = F3(
	function (mathMacroDict, settings, tree) {
		var _v0 = $maca$elm_rose_tree$RoseTree$Tree$children(tree);
		if (!_v0.b) {
			return A3(
				$author$project$Render$Export$LaTeX$exportBlock,
				mathMacroDict,
				settings,
				$maca$elm_rose_tree$RoseTree$Tree$value(tree));
		} else {
			var children = _v0;
			var root = $elm$core$String$lines(
				A3(
					$author$project$Render$Export$LaTeX$exportBlock,
					mathMacroDict,
					settings,
					$maca$elm_rose_tree$RoseTree$Tree$value(tree)));
			var renderedChildren = $elm$core$List$concat(
				A2(
					$elm$core$List$map,
					$elm$core$String$lines,
					A2(
						$elm$core$List$map,
						A2($author$project$Render$Export$LaTeX$exportTree, mathMacroDict, settings),
						children)));
			var _v1 = $elm_community$list_extra$List$Extra$unconsLast(root);
			if (_v1.$ === 1) {
				return '';
			} else {
				var _v2 = _v1.a;
				var lastLine = _v2.a;
				var firstLines = _v2.b;
				var _v3 = firstLines;
				var _v4 = renderedChildren;
				var _v5 = lastLine;
				return A2(
					$elm$core$String$join,
					'\n',
					_Utils_ap(
						firstLines,
						_Utils_ap(
							renderedChildren,
							_List_fromArray(
								[lastLine]))));
			}
		}
	});
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (!node.$) {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $maca$elm_rose_tree$RoseTree$Tree$mapValues = F2(
	function (f, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$Tree,
			f(a),
			A2(
				$elm$core$Array$map,
				$maca$elm_rose_tree$RoseTree$Tree$mapValues(f),
				ns));
	});
var $author$project$Generic$Forest$map = F2(
	function (f, forest) {
		return A2(
			$elm$core$List$map,
			$maca$elm_rose_tree$RoseTree$Tree$mapValues(f),
			forest);
	});
var $author$project$Render$Export$LaTeX$rawExport = F2(
	function (settings, ast) {
		var mathMacroDict = $author$project$ETeX$Transform$makeMacroDict(
			A2($author$project$Generic$ASTTools$getVerbatimBlockValue, 'mathmacros', ast));
		return A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$map,
				A2($author$project$Render$Export$LaTeX$exportTree, mathMacroDict, settings),
				$author$project$Render$Export$LaTeX$encloseLists(
					A2(
						$author$project$Generic$Forest$map,
						$author$project$Generic$BlockUtilities$condenseUrls,
						A2(
							$author$project$Generic$ASTTools$filterForestOnLabelNames,
							function (name) {
								return !_Utils_eq(
									name,
									$elm$core$Maybe$Just('runninghead'));
							},
							ast)))));
	});
var $author$project$Render$Export$LaTeX$tableofcontents = F2(
	function (properties, rawBlockNames_) {
		var sectionCount = $elm$core$List$length(
			A2(
				$elm$core$List$filter,
				function (name) {
					return (name === 'section') || (name === 'section*');
				},
				rawBlockNames_));
		var numberToLevel = A2(
			$elm$core$Maybe$withDefault,
			3,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toFloat,
				A2($elm$core$Dict$get, 'number-to-level', properties)));
		var shouldShowTOC = (sectionCount > 1) && (numberToLevel > 0);
		return shouldShowTOC ? '\n\n\\tableofcontents' : '';
	});
var $author$project$Render$Export$LaTeX$export = F3(
	function (currentTime, settings_, ast) {
		var titleData = A2($author$project$Generic$ASTTools$getBlockByName, 'title', ast);
		var textMacroDefinitions = A2($author$project$Generic$ASTTools$getVerbatimBlockValue, 'textmacros', ast);
		var rawBlockNames = $author$project$Generic$ASTTools$rawBlockNames(ast);
		var properties = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Dict$empty,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.sS;
				},
				titleData));
		var settings = _Utils_update(
			settings_,
			{sS: properties});
		var macrosInTextMacroDefinitions = $author$project$Generic$TextMacro$getTextMacroFunctionNames(textMacroDefinitions);
		var expressionNames = _Utils_ap(
			$author$project$Generic$ASTTools$expressionNames(ast),
			macrosInTextMacroDefinitions);
		var counterValue_ = A2(
			$elm$core$Maybe$map,
			function (x) {
				return x - 1;
			},
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toInt,
				A2($elm$core$Dict$get, 'first-section', properties)));
		var setTheFirstSection = function () {
			if (counterValue_.$ === 1) {
				return '';
			} else {
				var k = counterValue_.a;
				return '\n\\setcounter{section}{' + ($elm$core$String$fromInt(k) + '}\n');
			}
		}();
		return A2($author$project$Render$Export$Preamble$make, rawBlockNames, expressionNames) + (A2($author$project$Render$Export$LaTeX$frontMatter, currentTime, ast) + (setTheFirstSection + (A2($author$project$Render$Export$LaTeX$tableofcontents, properties, rawBlockNames) + ('\n\n' + (A2($author$project$Render$Export$LaTeX$rawExport, settings, ast) + '\n\n\\end{document}\n')))));
	});
var $elm$random$Random$Generate = $elm$core$Basics$identity;
var $elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$random$Random$next = function (_v0) {
	var state0 = _v0.a;
	var incr = _v0.b;
	return A2($elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var $elm$random$Random$initialSeed = function (x) {
	var _v0 = $elm$random$Random$next(
		A2($elm$random$Random$Seed, 0, 1013904223));
	var state1 = _v0.a;
	var incr = _v0.b;
	var state2 = (state1 + x) >>> 0;
	return $elm$random$Random$next(
		A2($elm$random$Random$Seed, state2, incr));
};
var $elm$random$Random$init = A2(
	$elm$core$Task$andThen,
	function (time) {
		return $elm$core$Task$succeed(
			$elm$random$Random$initialSeed(
				$elm$time$Time$posixToMillis(time)));
	},
	$elm$time$Time$now);
var $elm$random$Random$step = F2(
	function (_v0, seed) {
		var generator = _v0;
		return generator(seed);
	});
var $elm$random$Random$onEffects = F3(
	function (router, commands, seed) {
		if (!commands.b) {
			return $elm$core$Task$succeed(seed);
		} else {
			var generator = commands.a;
			var rest = commands.b;
			var _v1 = A2($elm$random$Random$step, generator, seed);
			var value = _v1.a;
			var newSeed = _v1.b;
			return A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$random$Random$onEffects, router, rest, newSeed);
				},
				A2($elm$core$Platform$sendToApp, router, value));
		}
	});
var $elm$random$Random$onSelfMsg = F3(
	function (_v0, _v1, seed) {
		return $elm$core$Task$succeed(seed);
	});
var $elm$random$Random$Generator = $elm$core$Basics$identity;
var $elm$random$Random$map = F2(
	function (func, _v0) {
		var genA = _v0;
		return function (seed0) {
			var _v1 = genA(seed0);
			var a = _v1.a;
			var seed1 = _v1.b;
			return _Utils_Tuple2(
				func(a),
				seed1);
		};
	});
var $elm$random$Random$cmdMap = F2(
	function (func, _v0) {
		var generator = _v0;
		return A2($elm$random$Random$map, func, generator);
	});
_Platform_effectManagers['Random'] = _Platform_createManager($elm$random$Random$init, $elm$random$Random$onEffects, $elm$random$Random$onSelfMsg, $elm$random$Random$cmdMap);
var $elm$random$Random$command = _Platform_leaf('Random');
var $elm$random$Random$generate = F2(
	function (tagger, generator) {
		return $elm$random$Random$command(
			A2($elm$random$Random$map, tagger, generator));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $elm$random$Random$peel = function (_v0) {
	var state = _v0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var $elm$random$Random$int = F2(
	function (a, b) {
		return function (seed0) {
			var _v0 = (_Utils_cmp(a, b) < 0) ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
			var lo = _v0.a;
			var hi = _v0.b;
			var range = (hi - lo) + 1;
			if (!((range - 1) & range)) {
				return _Utils_Tuple2(
					(((range - 1) & $elm$random$Random$peel(seed0)) >>> 0) + lo,
					$elm$random$Random$next(seed0));
			} else {
				var threshhold = (((-range) >>> 0) % range) >>> 0;
				var accountForBias = function (seed) {
					accountForBias:
					while (true) {
						var x = $elm$random$Random$peel(seed);
						var seedN = $elm$random$Random$next(seed);
						if (_Utils_cmp(x, threshhold) < 0) {
							var $temp$seed = seedN;
							seed = $temp$seed;
							continue accountForBias;
						} else {
							return _Utils_Tuple2((x % range) + lo, seedN);
						}
					}
				};
				return accountForBias(seed0);
			}
		};
	});
var $author$project$MainSQLite$generateId = A2(
	$elm$random$Random$map,
	function (n) {
		return 'doc-' + $elm$core$String$fromInt(n);
	},
	A2($elm$random$Random$int, 100000, 999999));
var $elm_community$list_extra$List$Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var $author$project$Common$Model$getTitleFromContent = function (str) {
	return A2(
		$elm$core$Maybe$withDefault,
		'No title yet',
		$elm$core$List$head(
			A2(
				$elm_community$list_extra$List$Extra$dropWhile,
				function (line) {
					return (line === '') || A2($elm$core$String$startsWith, '|', line);
				},
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					$elm$core$String$lines(str)))));
};
var $author$project$Common$Model$InitialDocumentId = F5(
	function (a, b, c, d, e) {
		return {$: 15, a: a, b: b, c: c, d: d, e: e};
	});
var $author$project$Common$Model$LoadDocument = function (a) {
	return {$: 9, a: a};
};
var $author$project$AppData$defaultDocumentText = '| title number-to-level:0\nAnnouncement\n\n[vspace 3\n0]\n[large [italic This is what you can do with Scripta Live:]]\n\n| image figure:1 caption: Humming bird\nhttps://www.realsimple.com/thmb/7xn0oIF6a9eJ-y_4OO5vN0lJhCg=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/humming-bird-flowers-GettyImages-1271839175-b515cb4f06a34e66b084ba617995f00a.jpg\n\n| equation numbered\n\\label{wave-equation}\nsecpder(u,x) + secpder(u,y) + secpder(u,z) = frac(1,c^2) secpder(u,t))\n\n[large [i ...make beautiful things with simple tools.]]\n[vspace 30]\n\n\n# About Scripta Live\n\nScripta is a markup language much like LaTeX, but with a simplified, ergonomic syntax.\nBetter yet: what you write (here, on the left) is rendered\n[i instantaneously ] in the right-hand window pane. No setup required.\nJust click the "New" button and start writing.\n\n- Your documents are saved in the browser\'s local storage.  If you refresh the\nbrowser or close it and come back to it later, it weill be there, waiting for you..\n\n- Use the megaphone icon on the right to report bugs, ask questions, and make suggestions.\n\n- Scripta documents can be exported to standard LaTeX.  If there are no images\nin the document, it can be turned into a pdf file using `pdflatex`.  Otherwise,\nuse the downloadable shell script — get it by clicking on the button  [blue Download Script],\nlower right corner.  We\nwill soon provide a simpler solution.\n\n\n# Examples\n\n| mathmacros\nsecpder:  frac(partial^2 #1, partial #2^2)\nnat:    mathbb N\nreals: mathbb R\npder:  frac(partial #1, partial #2)\nset:    \\{ #1 \\}\nsett:   \\{ #1 \\ | \\ #2 \\}\n\nPythagoras said: $a^2 + b^2 = c^2$.\n\nThis will be on the test:\n\n| equation\nint_0^1 x^n dx = frac(1,n+1)\n\n\nBoth of the above equalities were written using an `equation` block.  If you look\nat the source text you will see that [eqref wave-equation] an [u argument] `numbered` and\na property, namely  `label:wave-equation`. That property is used for cross-referencing: we say `[eqref wave-equation]` to make a hot link to [eqref wave-equation].  Click on it now\nto see what happens.\n\nHere is an [u aligned] block:\n\n| aligned\nnat &= set("positive whole numbers and zero")\nnat &= sett(n " is a whole number", n > 0)\n\n\n| equation\n\\begin{pmatrix}\n2 & 1 \\\\\n1 & 2\n\\end{pmatrix}\n\\begin{pmatrix}\n2 & 1 \\\\\n1 & 2\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n5 & 4 \\\\\n4 & 5\n\\end{pmatrix}\n\n\n[b Note:] The equation [eqref wave-equation] is the wave equation in four dimensions —\nthree of space and one of time.\n\n';
var $author$project$Render$Theme$Dark = 1;
var $author$project$Render$Theme$Light = 0;
var $author$project$Theme$mapTheme = function (theme) {
	if (!theme) {
		return 0;
	} else {
		return 1;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$MainSQLite$handleStorageMsg = F2(
	function (msg, model) {
		var common = model.h;
		switch (msg.$) {
			case 3:
				if (!msg.a.$) {
					var docs = msg.a.a;
					return $elm$core$List$isEmpty(docs) ? _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{mi: docs})
							}),
						A2(
							$elm$random$Random$generate,
							A2(
								$elm$core$Basics$composeL,
								$author$project$MainSQLite$CommonMsg,
								A4($author$project$Common$Model$InitialDocumentId, $author$project$AppData$defaultDocumentText, 'Announcement', common.gT, common.h7)),
							$author$project$MainSQLite$generateId)) : _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{mi: docs})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = msg.a.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 1:
				if (!msg.a.$) {
					var doc = msg.a.a;
					var editRecord = A3($author$project$ScriptaV2$DifferentialCompiler$init, $elm$core$Dict$empty, common.l0, doc.iV);
					var compilerOutput = A4(
						$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
						$author$project$Theme$mapTheme(common.h7),
						1,
						common.me,
						editRecord);
					var newCommon = _Utils_update(
						common,
						{
							lZ: compilerOutput,
							iY: $elm$core$Maybe$Just(doc),
							ml: editRecord,
							m$: doc.iV,
							nj: $elm$core$Maybe$Just(doc.hg),
							nz: true,
							oR: doc.iV,
							ic: doc.ic
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{h: newCommon}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = msg.a.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 0:
				if (!msg.a.$) {
					var doc = msg.a.a;
					var updatedDocs = A2(
						$elm$core$List$cons,
						doc,
						A2(
							$elm$core$List$filter,
							function (d) {
								return !_Utils_eq(d.hg, doc.hg);
							},
							common.mi));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{mi: updatedDocs})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = msg.a.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 2:
				if (!msg.a.$) {
					var id = msg.a.a;
					var updatedDocs = A2(
						$elm$core$List$filter,
						function (d) {
							return !_Utils_eq(d.hg, id);
						},
						common.mi);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{mi: updatedDocs})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = msg.a.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 4:
				if (!msg.a.$) {
					var maybeName = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{pm: maybeName})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = msg.a.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 5:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 6:
				if (!msg.a.$) {
					var maybeId = msg.a.a;
					var newCommon = _Utils_update(
						common,
						{nl: maybeId});
					if (!maybeId.$) {
						var id = maybeId.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{h: newCommon}),
							A2(
								$elm$core$Task$perform,
								$elm$core$Basics$always(
									$author$project$MainSQLite$CommonMsg(
										$author$project$Common$Model$LoadDocument(id))),
								$elm$core$Process$sleep(1000)));
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{h: newCommon}),
							$elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 7:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				if (!msg.a.$) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								kY: {qU: true, rG: true}
							}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$Storage$SQLite$storage($author$project$MainSQLite$StorageMsg).rY,
									$author$project$Storage$SQLite$storage($author$project$MainSQLite$StorageMsg).r_
								])));
				} else {
					var error = msg.a.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Common$Model$NoOp = {$: 0};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			A2(
				$elm$core$Task$onError,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
					$elm$core$Result$Err),
				A2(
					$elm$core$Task$andThen,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Ok),
					task)));
	});
var $elm$browser$Browser$Dom$getElement = _Browser_getElement;
var $elm$browser$Browser$Dom$setViewport = _Browser_setViewport;
var $author$project$MainSQLite$jumpToId = function (id) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$MainSQLite$CommonMsg($author$project$Common$Model$NoOp);
		},
		A2(
			$elm$core$Task$andThen,
			function (el) {
				return A2($elm$browser$Browser$Dom$setViewport, 0, el.q6.uL);
			},
			$elm$browser$Browser$Dom$getElement(id)));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $author$project$Generic$ASTTools$idOfMatchingBlockContent = F2(
	function (key, block) {
		return A2($elm$core$String$contains, key, block.nJ.oR) ? $elm$core$Maybe$Just(block.nJ.hg) : $elm$core$Maybe$Nothing;
	});
var $author$project$Generic$ASTTools$matchingIdsInAST = F2(
	function (key, ast) {
		return A2(
			$elm$core$List$filterMap,
			$author$project$Generic$ASTTools$idOfMatchingBlockContent(key),
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Library$Tree$flatten, ast)));
	});
var $author$project$ScriptaV2$Helper$matchingIdsInAST = $author$project$Generic$ASTTools$matchingIdsInAST;
var $author$project$Document$newDocument = F6(
	function (id, title, author, content, theme, now) {
		return {iA: author, iV: content, iX: now, hg: id, sf: now, h7: theme, ic: title};
	});
var $author$project$Common$Model$GotPdfLink = function (a) {
	return {$: 19, a: a};
};
var $author$project$Frontend$PDF$encodeImageRecord = function (record) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'filename',
				$elm$json$Json$Encode$string(record.d1)),
				_Utils_Tuple2(
				'url',
				$elm$json$Json$Encode$string(record.uz))
			]));
};
var $author$project$Frontend$PDF$normalize = function (str) {
	return $elm$core$String$toLower(
		A3(
			$elm$core$String$replace,
			',',
			'-',
			A3(
				$elm$core$String$replace,
				'.',
				'-',
				A3($elm$core$String$replace, ' ', '-', str))));
};
var $author$project$Frontend$PDF$encodeForPDF = F3(
	function (title, content, imageRecords) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'id',
					$elm$json$Json$Encode$string(
						$author$project$Frontend$PDF$normalize(title) + '.tex')),
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$string(title)),
					_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(content)),
					_Utils_Tuple2(
					'packageList',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, _List_Nil)),
					_Utils_Tuple2(
					'urlList',
					A2($elm$json$Json$Encode$list, $author$project$Frontend$PDF$encodeImageRecord, imageRecords))
				]));
	});
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 2};
var $elm$http$Http$Receiving = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$Timeout_ = {$: 1};
var $elm$core$Maybe$isJust = function (maybe) {
	if (!maybe.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 4, a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 3, a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$NetworkError = {$: 2};
var $elm$http$Http$Timeout = {$: 1};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 0:
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 1:
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 2:
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 3:
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.tA));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $author$project$ScriptaV2$Helper$getImageUrlsFromBlocks = function (syntaxTree) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$author$project$Generic$Language$getVerbatimContent,
			A2(
				$author$project$Generic$ASTTools$filterBlocksOnName,
				'image',
				$elm$core$List$concat(
					A2($elm$core$List$map, $author$project$Library$Tree$flatten, syntaxTree)))));
};
var $author$project$ScriptaV2$Helper$extractUrl = function (str) {
	return $elm$core$List$head(
		A2($elm$core$String$split, ' ', str));
};
var $toastal$either$Either$unwrap = F3(
	function (d, f, e) {
		if (!e.$) {
			return d;
		} else {
			var a = e.a;
			return f(a);
		}
	});
var $toastal$either$Either$toListVia = function (f) {
	return A2(
		$toastal$either$Either$unwrap,
		_List_Nil,
		A2($elm$core$Basics$composeR, f, $elm$core$List$singleton));
};
var $toastal$either$Either$toList = $toastal$either$Either$toListVia($elm$core$Basics$identity);
var $author$project$ScriptaV2$Helper$getImageUrlsFromExpressions = function (syntaxTree) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$elm$core$Maybe$andThen($author$project$ScriptaV2$Helper$extractUrl),
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Generic$ASTTools$getText,
					$elm$core$Maybe$map($elm$core$String$trim)),
				A2(
					$author$project$Generic$ASTTools$filterExpressionsOnName,
					'image',
					$elm$core$List$concat(
						$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								function (block) {
									return $toastal$either$Either$toList(block.qh);
								},
								$elm$core$List$concat(
									A2($elm$core$List$map, $author$project$Library$Tree$flatten, syntaxTree)))))))));
};
var $author$project$ScriptaV2$Helper$getImageUrls = function (syntaxTree) {
	return $elm_community$list_extra$List$Extra$unique(
		$elm$core$List$sort(
			_Utils_ap(
				$author$project$ScriptaV2$Helper$getImageUrlsFromExpressions(syntaxTree),
				$author$project$ScriptaV2$Helper$getImageUrlsFromBlocks(syntaxTree))));
};
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$ScriptaV2$Language$MicroLaTeXLang = 0;
var $author$project$Generic$Compiler$parse_ = F6(
	function (lang, primitiveBlockParser, exprParser, idPrefix, outerCount, lines) {
		return A2(
			$author$project$Generic$Forest$map,
			$author$project$Generic$Pipeline$toExpressionBlock(exprParser),
			A2(
				$author$project$Generic$ForestTransform$forestFromBlocks,
				function ($) {
					return $.hh;
				},
				A3(primitiveBlockParser, idPrefix, outerCount, lines)));
	});
var $author$project$ScriptaV2$Compiler$parseL = F3(
	function (idPrefix, outerCount, lines) {
		return A6($author$project$Generic$Compiler$parse_, 0, $author$project$MicroLaTeX$PrimitiveBlock$parse, $author$project$MicroLaTeX$Expression$parse, idPrefix, outerCount, lines);
	});
var $author$project$ScriptaV2$Compiler$parseM = F3(
	function (idPrefix, outerCount, lines) {
		return A6($author$project$Generic$Compiler$parse_, 1, $author$project$M$PrimitiveBlock$parse, $author$project$M$Expression$parse, idPrefix, outerCount, lines);
	});
var $author$project$ScriptaV2$Language$SMarkdownLang = 2;
var $author$project$ScriptaV2$Compiler$parseX = F3(
	function (idPrefix, outerCount, lines) {
		return A6($author$project$Generic$Compiler$parse_, 2, $author$project$XMarkdown$PrimitiveBlock$parse, $author$project$XMarkdown$Expression$parse, idPrefix, outerCount, lines);
	});
var $author$project$ScriptaV2$Compiler$parse = F4(
	function (lang, idPrefix, outerCount, lines) {
		switch (lang) {
			case 1:
				return A3($author$project$ScriptaV2$Compiler$parseM, idPrefix, outerCount, lines);
			case 0:
				return A3($author$project$ScriptaV2$Compiler$parseL, idPrefix, outerCount, lines);
			case 2:
				return A3($author$project$ScriptaV2$Compiler$parseX, idPrefix, outerCount, lines);
			default:
				return _List_Nil;
		}
	});
var $author$project$ScriptaV2$Compiler$parseFromString = F2(
	function (lang, str) {
		return A4(
			$author$project$ScriptaV2$Compiler$parse,
			lang,
			$author$project$ScriptaV2$Config$idPrefix,
			0,
			$elm$core$String$lines(str));
	});
var $author$project$Config$pdfServer = 'https://pdfserv.app';
var $elm$http$Http$Request = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {ou: reqs, oZ: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (!cmd.$) {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 1) {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.pf;
							if (_v4.$ === 1) {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.ou));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.oZ)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (!cmd.$) {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					pX: r.pX,
					qh: r.qh,
					rd: A2(_Http_mapExpect, func, r.rd),
					mK: r.mK,
					r9: r.r9,
					ub: r.ub,
					pf: r.pf,
					uz: r.uz
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{pX: false, qh: r.qh, rd: r.rd, mK: r.mK, r9: r.r9, ub: r.ub, pf: r.pf, uz: r.uz}));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{qh: r.qh, rd: r.rd, mK: _List_Nil, r9: 'POST', ub: $elm$core$Maybe$Nothing, pf: $elm$core$Maybe$Nothing, uz: r.uz});
};
var $author$project$Frontend$PDF$substituteFilenameForUrls = F2(
	function (imageRecords, str) {
		var folder = F2(
			function (record, acc) {
				return A3(
					$elm$core$String$replace,
					'https://' + record.d1,
					record.d1,
					A3(
						$elm$core$String$replace,
						A3($elm$core$String$replace, 'https://', '', record.uz),
						record.d1,
						acc));
			});
		return A3($elm$core$List$foldl, folder, str, imageRecords);
	});
var $author$project$Frontend$PDF$urlsToImageRecords = function (urls) {
	return A2(
		$elm$core$List$indexedMap,
		F2(
			function (index, url) {
				return {
					d1: A2($elm$core$String$startsWith, 'https://imagedelivery.net', url) ? ('cf-image-' + ($elm$core$String$fromInt(index + 1) + '.jpg')) : ('image-' + ($elm$core$String$fromInt(index + 1) + '.jpg')),
					uz: url
				};
			}),
		urls);
};
var $author$project$Frontend$PDF$requestPDF = function (exportData) {
	var syntaxTree = A2($author$project$ScriptaV2$Compiler$parseFromString, exportData.nh, exportData.oR);
	var imageUrls = $author$project$ScriptaV2$Helper$getImageUrls(syntaxTree);
	var imageRecords = $author$project$Frontend$PDF$urlsToImageRecords(imageUrls);
	var processedContent = A2($author$project$Frontend$PDF$substituteFilenameForUrls, imageRecords, exportData.iV);
	return $elm$http$Http$post(
		{
			qh: $elm$http$Http$jsonBody(
				A3($author$project$Frontend$PDF$encodeForPDF, exportData.ic, processedContent, imageRecords)),
			rd: $elm$http$Http$expectString($author$project$Common$Model$GotPdfLink),
			uz: $author$project$Config$pdfServer + '/pdf'
		});
};
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $ohanhi$keyboard$Keyboard$Backspace = {$: 26};
var $ohanhi$keyboard$Keyboard$Clear = {$: 27};
var $ohanhi$keyboard$Keyboard$Copy = {$: 28};
var $ohanhi$keyboard$Keyboard$CrSel = {$: 29};
var $ohanhi$keyboard$Keyboard$Cut = {$: 30};
var $ohanhi$keyboard$Keyboard$Delete = {$: 31};
var $ohanhi$keyboard$Keyboard$EraseEof = {$: 32};
var $ohanhi$keyboard$Keyboard$ExSel = {$: 33};
var $ohanhi$keyboard$Keyboard$Insert = {$: 34};
var $ohanhi$keyboard$Keyboard$Paste = {$: 35};
var $ohanhi$keyboard$Keyboard$Redo = {$: 36};
var $ohanhi$keyboard$Keyboard$Undo = {$: 37};
var $ohanhi$keyboard$Keyboard$editingKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'Backspace':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Backspace);
		case 'Clear':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Clear);
		case 'Copy':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Copy);
		case 'CrSel':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$CrSel);
		case 'Cut':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Cut);
		case 'Delete':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Delete);
		case 'EraseEof':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$EraseEof);
		case 'ExSel':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ExSel);
		case 'Insert':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Insert);
		case 'Paste':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Paste);
		case 'Redo':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Redo);
		case 'Undo':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Undo);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$F1 = {$: 38};
var $ohanhi$keyboard$Keyboard$F10 = {$: 47};
var $ohanhi$keyboard$Keyboard$F11 = {$: 48};
var $ohanhi$keyboard$Keyboard$F12 = {$: 49};
var $ohanhi$keyboard$Keyboard$F13 = {$: 50};
var $ohanhi$keyboard$Keyboard$F14 = {$: 51};
var $ohanhi$keyboard$Keyboard$F15 = {$: 52};
var $ohanhi$keyboard$Keyboard$F16 = {$: 53};
var $ohanhi$keyboard$Keyboard$F17 = {$: 54};
var $ohanhi$keyboard$Keyboard$F18 = {$: 55};
var $ohanhi$keyboard$Keyboard$F19 = {$: 56};
var $ohanhi$keyboard$Keyboard$F2 = {$: 39};
var $ohanhi$keyboard$Keyboard$F20 = {$: 57};
var $ohanhi$keyboard$Keyboard$F3 = {$: 40};
var $ohanhi$keyboard$Keyboard$F4 = {$: 41};
var $ohanhi$keyboard$Keyboard$F5 = {$: 42};
var $ohanhi$keyboard$Keyboard$F6 = {$: 43};
var $ohanhi$keyboard$Keyboard$F7 = {$: 44};
var $ohanhi$keyboard$Keyboard$F8 = {$: 45};
var $ohanhi$keyboard$Keyboard$F9 = {$: 46};
var $ohanhi$keyboard$Keyboard$functionKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'F1':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F1);
		case 'F2':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F2);
		case 'F3':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F3);
		case 'F4':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F4);
		case 'F5':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F5);
		case 'F6':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F6);
		case 'F7':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F7);
		case 'F8':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F8);
		case 'F9':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F9);
		case 'F10':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F10);
		case 'F11':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F11);
		case 'F12':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F12);
		case 'F13':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F13);
		case 'F14':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F14);
		case 'F15':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F15);
		case 'F16':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F16);
		case 'F17':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F17);
		case 'F18':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F18);
		case 'F19':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F19);
		case 'F20':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$F20);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$ChannelDown = {$: 85};
var $ohanhi$keyboard$Keyboard$ChannelUp = {$: 86};
var $ohanhi$keyboard$Keyboard$MediaFastForward = {$: 87};
var $ohanhi$keyboard$Keyboard$MediaPause = {$: 88};
var $ohanhi$keyboard$Keyboard$MediaPlay = {$: 89};
var $ohanhi$keyboard$Keyboard$MediaPlayPause = {$: 90};
var $ohanhi$keyboard$Keyboard$MediaRecord = {$: 91};
var $ohanhi$keyboard$Keyboard$MediaRewind = {$: 92};
var $ohanhi$keyboard$Keyboard$MediaStop = {$: 93};
var $ohanhi$keyboard$Keyboard$MediaTrackNext = {$: 94};
var $ohanhi$keyboard$Keyboard$MediaTrackPrevious = {$: 95};
var $ohanhi$keyboard$Keyboard$mediaKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'ChannelDown':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ChannelDown);
		case 'ChannelUp':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ChannelUp);
		case 'MediaFastForward':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaFastForward);
		case 'MediaPause':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaPause);
		case 'MediaPlay':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaPlay);
		case 'MediaPlayPause':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaPlayPause);
		case 'MediaRecord':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaRecord);
		case 'MediaRewind':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaRewind);
		case 'MediaStop':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaStop);
		case 'MediaTrackNext':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaTrackNext);
		case 'MediaTrackPrevious':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MediaTrackPrevious);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$Alt = {$: 1};
var $ohanhi$keyboard$Keyboard$AltGraph = {$: 2};
var $ohanhi$keyboard$Keyboard$CapsLock = {$: 3};
var $ohanhi$keyboard$Keyboard$Control = {$: 4};
var $ohanhi$keyboard$Keyboard$Fn = {$: 5};
var $ohanhi$keyboard$Keyboard$FnLock = {$: 6};
var $ohanhi$keyboard$Keyboard$Hyper = {$: 7};
var $ohanhi$keyboard$Keyboard$Meta = {$: 8};
var $ohanhi$keyboard$Keyboard$NumLock = {$: 9};
var $ohanhi$keyboard$Keyboard$ScrollLock = {$: 10};
var $ohanhi$keyboard$Keyboard$Shift = {$: 11};
var $ohanhi$keyboard$Keyboard$Super = {$: 12};
var $ohanhi$keyboard$Keyboard$Symbol = {$: 13};
var $ohanhi$keyboard$Keyboard$SymbolLock = {$: 14};
var $ohanhi$keyboard$Keyboard$modifierKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'Alt':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Alt);
		case 'AltGraph':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$AltGraph);
		case 'CapsLock':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$CapsLock);
		case 'Control':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Control);
		case 'Fn':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Fn);
		case 'FnLock':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$FnLock);
		case 'Hyper':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Hyper);
		case 'Meta':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Meta);
		case 'NumLock':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$NumLock);
		case 'ScrollLock':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ScrollLock);
		case 'Shift':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Shift);
		case 'Super':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Super);
		case 'OS':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Super);
		case 'Symbol':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Symbol);
		case 'SymbolLock':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$SymbolLock);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$ArrowDown = {$: 18};
var $ohanhi$keyboard$Keyboard$ArrowLeft = {$: 19};
var $ohanhi$keyboard$Keyboard$ArrowRight = {$: 20};
var $ohanhi$keyboard$Keyboard$ArrowUp = {$: 21};
var $ohanhi$keyboard$Keyboard$End = {$: 22};
var $ohanhi$keyboard$Keyboard$Home = {$: 23};
var $ohanhi$keyboard$Keyboard$PageDown = {$: 24};
var $ohanhi$keyboard$Keyboard$PageUp = {$: 25};
var $ohanhi$keyboard$Keyboard$navigationKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'ArrowDown':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowDown);
		case 'ArrowLeft':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowLeft);
		case 'ArrowRight':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowRight);
		case 'ArrowUp':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowUp);
		case 'Down':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowDown);
		case 'Left':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowLeft);
		case 'Right':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowRight);
		case 'Up':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ArrowUp);
		case 'End':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$End);
		case 'Home':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Home);
		case 'PageDown':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$PageDown);
		case 'PageUp':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$PageUp);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$oneOf = F2(
	function (fns, key) {
		oneOf:
		while (true) {
			if (!fns.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var fn = fns.a;
				var rest = fns.b;
				var _v1 = fn(key);
				if (!_v1.$) {
					var a = _v1.a;
					return $elm$core$Maybe$Just(a);
				} else {
					var $temp$fns = rest,
						$temp$key = key;
					fns = $temp$fns;
					key = $temp$key;
					continue oneOf;
				}
			}
		}
	});
var $ohanhi$keyboard$Keyboard$AppSwitch = {$: 73};
var $ohanhi$keyboard$Keyboard$Call = {$: 74};
var $ohanhi$keyboard$Keyboard$Camera = {$: 75};
var $ohanhi$keyboard$Keyboard$CameraFocus = {$: 76};
var $ohanhi$keyboard$Keyboard$EndCall = {$: 77};
var $ohanhi$keyboard$Keyboard$GoBack = {$: 78};
var $ohanhi$keyboard$Keyboard$GoHome = {$: 79};
var $ohanhi$keyboard$Keyboard$HeadsetHook = {$: 80};
var $ohanhi$keyboard$Keyboard$LastNumberRedial = {$: 81};
var $ohanhi$keyboard$Keyboard$MannerMode = {$: 83};
var $ohanhi$keyboard$Keyboard$Notification = {$: 82};
var $ohanhi$keyboard$Keyboard$VoiceDial = {$: 84};
var $ohanhi$keyboard$Keyboard$phoneKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'AppSwitch':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$AppSwitch);
		case 'Call':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Call);
		case 'Camera':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Camera);
		case 'CameraFocus':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$CameraFocus);
		case 'EndCall':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$EndCall);
		case 'GoBack':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$GoBack);
		case 'GoHome':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$GoHome);
		case 'HeadsetHook':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$HeadsetHook);
		case 'LastNumberRedial':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$LastNumberRedial);
		case 'Notification':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Notification);
		case 'MannerMode':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$MannerMode);
		case 'VoiceDial':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$VoiceDial);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$Again = {$: 58};
var $ohanhi$keyboard$Keyboard$Attn = {$: 59};
var $ohanhi$keyboard$Keyboard$Cancel = {$: 60};
var $ohanhi$keyboard$Keyboard$ContextMenu = {$: 61};
var $ohanhi$keyboard$Keyboard$Escape = {$: 62};
var $ohanhi$keyboard$Keyboard$Execute = {$: 63};
var $ohanhi$keyboard$Keyboard$Find = {$: 64};
var $ohanhi$keyboard$Keyboard$Finish = {$: 65};
var $ohanhi$keyboard$Keyboard$Help = {$: 66};
var $ohanhi$keyboard$Keyboard$Pause = {$: 67};
var $ohanhi$keyboard$Keyboard$Play = {$: 68};
var $ohanhi$keyboard$Keyboard$Props = {$: 69};
var $ohanhi$keyboard$Keyboard$Select = {$: 70};
var $ohanhi$keyboard$Keyboard$ZoomIn = {$: 71};
var $ohanhi$keyboard$Keyboard$ZoomOut = {$: 72};
var $ohanhi$keyboard$Keyboard$uiKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'Again':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Again);
		case 'Attn':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Attn);
		case 'Cancel':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Cancel);
		case 'ContextMenu':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ContextMenu);
		case 'Escape':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Escape);
		case 'Execute':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Execute);
		case 'Find':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Find);
		case 'Finish':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Finish);
		case 'Help':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Help);
		case 'Pause':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Pause);
		case 'Play':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Play);
		case 'Props':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Props);
		case 'Select':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Select);
		case 'ZoomIn':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ZoomIn);
		case 'ZoomOut':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$ZoomOut);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$Enter = {$: 15};
var $ohanhi$keyboard$Keyboard$Spacebar = {$: 17};
var $ohanhi$keyboard$Keyboard$Tab = {$: 16};
var $ohanhi$keyboard$Keyboard$whitespaceKey = function (_v0) {
	var value = _v0;
	switch (value) {
		case 'Enter':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Enter);
		case 'Tab':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Tab);
		case 'Spacebar':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Spacebar);
		case ' ':
			return $elm$core$Maybe$Just($ohanhi$keyboard$Keyboard$Spacebar);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $ohanhi$keyboard$Keyboard$anyKeyWith = function (charParser) {
	return $ohanhi$keyboard$Keyboard$oneOf(
		_List_fromArray(
			[$ohanhi$keyboard$Keyboard$whitespaceKey, charParser, $ohanhi$keyboard$Keyboard$modifierKey, $ohanhi$keyboard$Keyboard$navigationKey, $ohanhi$keyboard$Keyboard$editingKey, $ohanhi$keyboard$Keyboard$functionKey, $ohanhi$keyboard$Keyboard$uiKey, $ohanhi$keyboard$Keyboard$phoneKey, $ohanhi$keyboard$Keyboard$mediaKey]));
};
var $ohanhi$keyboard$Keyboard$Character = function (a) {
	return {$: 0, a: a};
};
var $ohanhi$keyboard$Keyboard$characterKeyUpper = function (_v0) {
	var value = _v0;
	return ($elm$core$String$length(value) === 1) ? $elm$core$Maybe$Just(
		$ohanhi$keyboard$Keyboard$Character(
			$elm$core$String$toUpper(value))) : $elm$core$Maybe$Nothing;
};
var $ohanhi$keyboard$Keyboard$anyKeyUpper = $ohanhi$keyboard$Keyboard$anyKeyWith($ohanhi$keyboard$Keyboard$characterKeyUpper);
var $ohanhi$keyboard$Keyboard$insert = F3(
	function (keyParser, rawKey, list) {
		var _v0 = keyParser(rawKey);
		if (!_v0.$) {
			var key = _v0.a;
			return A2(
				$elm$core$List$cons,
				key,
				A2(
					$elm$core$List$filter,
					$elm$core$Basics$neq(key),
					list));
		} else {
			return list;
		}
	});
var $ohanhi$keyboard$Keyboard$remove = F3(
	function (keyParser, rawKey, list) {
		var _v0 = keyParser(rawKey);
		if (!_v0.$) {
			var key = _v0.a;
			return A2(
				$elm$core$List$filter,
				$elm$core$Basics$neq(key),
				list);
		} else {
			return list;
		}
	});
var $ohanhi$keyboard$Keyboard$updateWithParser = F3(
	function (keyParser, msg, state) {
		if (!msg.$) {
			var key = msg.a;
			return A3($ohanhi$keyboard$Keyboard$insert, keyParser, key, state);
		} else {
			var key = msg.a;
			return A3($ohanhi$keyboard$Keyboard$remove, keyParser, key, state);
		}
	});
var $ohanhi$keyboard$Keyboard$update = $ohanhi$keyboard$Keyboard$updateWithParser($ohanhi$keyboard$Keyboard$anyKeyUpper);
var $author$project$Differential$Differ$DiffRecord = F4(
	function (commonPrefix, commonSuffix, middleSegmentInSource, middleSegmentInTarget) {
		return {qJ: commonPrefix, iS: commonSuffix, sa: middleSegmentInSource, nK: middleSegmentInTarget};
	});
var $author$project$Differential$DifferForest$retreat = F3(
	function (last, remaining, diffRecord) {
		var n = $elm$core$List$length(diffRecord.qJ);
		return _Utils_update(
			diffRecord,
			{
				qJ: remaining,
				sa: A2($elm$core$List$cons, last, diffRecord.sa),
				nK: A2($elm$core$List$cons, last, diffRecord.nK)
			});
	});
var $author$project$Differential$DifferForest$backwardClosure = F2(
	function (level, diffRecord) {
		backwardClosure:
		while (true) {
			var n = $elm$core$List$length(diffRecord.qJ);
			var _v0 = $elm$core$List$head(diffRecord.nK);
			if (_v0.$ === 1) {
				return diffRecord;
			} else {
				var item = _v0.a;
				if (level(item) > 0) {
					var _v1 = $elm_community$list_extra$List$Extra$unconsLast(diffRecord.qJ);
					if (_v1.$ === 1) {
						return diffRecord;
					} else {
						var _v2 = _v1.a;
						var last = _v2.a;
						var remaining = _v2.b;
						var $temp$level = level,
							$temp$diffRecord = A3($author$project$Differential$DifferForest$retreat, last, remaining, diffRecord);
						level = $temp$level;
						diffRecord = $temp$diffRecord;
						continue backwardClosure;
					}
				} else {
					return diffRecord;
				}
			}
		}
	});
var $author$project$Differential$DifferForest$commonPrefix = F3(
	function (eq, x, y) {
		if (_Utils_eq(x, _List_Nil)) {
			return _List_Nil;
		} else {
			if (_Utils_eq(y, _List_Nil)) {
				return _List_Nil;
			} else {
				var _v0 = _Utils_Tuple2(
					$elm$core$List$head(x),
					$elm$core$List$head(y));
				if ((!_v0.a.$) && (!_v0.b.$)) {
					var a = _v0.a.a;
					var b = _v0.b.a;
					return A2(eq, a, b) ? A2(
						$elm$core$List$cons,
						a,
						A3(
							$author$project$Differential$DifferForest$commonPrefix,
							eq,
							A2($elm$core$List$drop, 1, x),
							A2($elm$core$List$drop, 1, y))) : _List_Nil;
				} else {
					return _List_Nil;
				}
			}
		}
	});
var $author$project$Differential$DifferForest$commonSuffixAux = F4(
	function (eq, commonPrefixInSource, x, y) {
		var n = $elm$core$List$length(commonPrefixInSource);
		var xx = $elm$core$List$reverse(
			A2($elm$core$List$drop, n, x));
		var yy = $elm$core$List$reverse(
			A2($elm$core$List$drop, n, y));
		return $elm$core$List$reverse(
			A3($author$project$Differential$DifferForest$commonPrefix, eq, xx, yy));
	});
var $author$project$Differential$DifferForest$dropLast = F2(
	function (k, x) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$drop,
				k,
				$elm$core$List$reverse(x)));
	});
var $author$project$Differential$DifferForest$advance = F3(
	function (first, remaining, diffRecord) {
		var n = $elm$core$List$length(diffRecord.iS) + $elm$core$List$length(diffRecord.nK);
		return _Utils_update(
			diffRecord,
			{
				iS: remaining,
				sa: _Utils_ap(
					diffRecord.sa,
					_List_fromArray(
						[first])),
				nK: _Utils_ap(
					diffRecord.nK,
					_List_fromArray(
						[first]))
			});
	});
var $author$project$Differential$DifferForest$forwardClosure = F2(
	function (level, diffRecord) {
		forwardClosure:
		while (true) {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(diffRecord.iS);
			if (_v0.$ === 1) {
				return diffRecord;
			} else {
				var _v1 = _v0.a;
				var first = _v1.a;
				var remaining = _v1.b;
				if (!level(first)) {
					return diffRecord;
				} else {
					var $temp$level = level,
						$temp$diffRecord = A3($author$project$Differential$DifferForest$advance, first, remaining, diffRecord);
					level = $temp$level;
					diffRecord = $temp$diffRecord;
					continue forwardClosure;
				}
			}
		}
	});
var $author$project$Differential$DifferForest$diff = F4(
	function (eq, level, u, v) {
		var a = A3($author$project$Differential$DifferForest$commonPrefix, eq, u, v);
		var b_ = A4($author$project$Differential$DifferForest$commonSuffixAux, eq, a, u, v);
		var lb = $elm$core$List$length(b_);
		var la = $elm$core$List$length(a);
		var x = A2(
			$author$project$Differential$DifferForest$dropLast,
			lb,
			A2($elm$core$List$drop, la, u));
		var y = A2(
			$author$project$Differential$DifferForest$dropLast,
			lb,
			A2($elm$core$List$drop, la, v));
		var b = A2(
			$elm$core$List$drop,
			$elm$core$List$length(a) + $elm$core$List$length(y),
			v);
		return A2(
			$author$project$Differential$DifferForest$forwardClosure,
			level,
			A2(
				$author$project$Differential$DifferForest$backwardClosure,
				level,
				A4($author$project$Differential$Differ$DiffRecord, a, b, x, y)));
	});
var $author$project$Differential$AbstractDifferentialParser$takeLast = F2(
	function (k, x) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$take,
				k,
				$elm$core$List$reverse(x)));
	});
var $author$project$Differential$AbstractDifferentialParser$differentialParser = F6(
	function (lineNumber, pLineNumber, pChangeLineNumber, parser, diffRecord, editRecord) {
		var middleSegmentParsed = A2($elm$core$List$map, parser, diffRecord.nK);
		var leadingLineIndexOfCommonSuffix = A2(
			$elm$core$Maybe$map,
			lineNumber,
			$elm$core$List$head(diffRecord.iS));
		var it = $elm$core$List$length(diffRecord.iS);
		var terminalSegmentParsed_ = A2($author$project$Differential$AbstractDifferentialParser$takeLast, it, editRecord.fU);
		var leadingLineIndexOfCommonSuffixParsed = A2(
			$elm$core$Maybe$map,
			pLineNumber,
			$elm$core$List$head(terminalSegmentParsed_));
		var ii = $elm$core$List$length(diffRecord.qJ);
		var initialSegmentParsed = A2($elm$core$List$take, ii, editRecord.fU);
		var delta = A3($elm$core$Maybe$map2, $elm$core$Basics$sub, leadingLineIndexOfCommonSuffix, leadingLineIndexOfCommonSuffixParsed);
		var newTerminalSegmentParsed = function () {
			if (delta.$ === 1) {
				return terminalSegmentParsed_;
			} else {
				var delta_ = delta.a;
				return A2(
					$elm$core$List$map,
					pChangeLineNumber(delta_),
					terminalSegmentParsed_);
			}
		}();
		var leadingLineIndexOfNewTerminaSegmentParsed = A2(
			$elm$core$Maybe$map,
			pLineNumber,
			$elm$core$List$head(newTerminalSegmentParsed));
		return _Utils_ap(
			initialSegmentParsed,
			_Utils_ap(middleSegmentParsed, newTerminalSegmentParsed));
	});
var $author$project$Differential$AbstractDifferentialParser$update = F3(
	function (f, sourceText, editRecord) {
		var renumber = F2(
			function (lineNumbers, chunks) {
				return A3($elm$core$List$map2, f.oH, lineNumbers, chunks);
			});
		var newChunks = f.iN(sourceText);
		var newLineNumbers = A2($elm$core$List$map, f.jR, newChunks);
		var renumberIf = F2(
			function (dr, chunks) {
				return (_Utils_eq(dr.sa, _List_Nil) && (_Utils_eq(dr.nK, _List_Nil) && _Utils_eq(dr.iS, _List_Nil))) ? A2(renumber, newLineNumbers, chunks) : chunks;
			});
		var diffRecord = f.mc(
			A4($author$project$Differential$DifferForest$diff, f.lR, f.lS, editRecord.gH, newChunks));
		var parsed_ = A2(
			renumberIf,
			diffRecord,
			A6($author$project$Differential$AbstractDifferentialParser$differentialParser, f.jR, f.n3, f.lN, f.iM, diffRecord, editRecord));
		var tree_ = f.jd(parsed_);
		var _v0 = A2(f.$9, editRecord.fE, tree_);
		var newAccumulator = _v0.a;
		var tree = _v0.b;
		return {
			io: newAccumulator,
			gH: newChunks,
			fE: editRecord.fE,
			hm: editRecord.hm,
			jU: f.ji(tree),
			fU: parsed_,
			k7: tree
		};
	});
var $author$project$ScriptaV2$DifferentialCompiler$update = F2(
	function (editRecord, text) {
		return A3(
			$author$project$Differential$AbstractDifferentialParser$update,
			$author$project$ScriptaV2$DifferentialCompiler$updateFunctions(editRecord.hm),
			text + '\n',
			editRecord);
	});
var $author$project$MainSQLite$update = F2(
	function (msg, model) {
		if (!msg.$) {
			var commonMsg = msg.a;
			return A2($author$project$MainSQLite$updateCommon, commonMsg, model);
		} else {
			var storageMsg = msg.a;
			return A2($author$project$MainSQLite$handleStorageMsg, storageMsg, model);
		}
	});
var $author$project$MainSQLite$updateCommon = F2(
	function (msg, model) {
		var storage = $author$project$Storage$SQLite$storage($author$project$MainSQLite$StorageMsg);
		var common = model.h;
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 1:
				var str = msg.a;
				var newEditRecord = A2($author$project$ScriptaV2$DifferentialCompiler$update, common.ml, str);
				var newCompilerOutput = A4(
					$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
					$author$project$Theme$mapTheme(common.h7),
					1,
					common.me,
					newEditRecord);
				var newCommon = _Utils_update(
					common,
					{
						lZ: newCompilerOutput,
						l$: common.l$ + 1,
						ml: newEditRecord,
						ni: common.gT,
						oR: str,
						ic: $author$project$Common$Model$getTitleFromContent(str)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var position = msg.a.sO;
				var source = msg.a.tt;
				var newEditRecord = A2($author$project$ScriptaV2$DifferentialCompiler$update, common.ml, source);
				var newCompilerOutput = A4(
					$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
					$author$project$Theme$mapTheme(common.h7),
					1,
					common.me,
					newEditRecord);
				var newCommon = _Utils_update(
					common,
					{
						lZ: newCompilerOutput,
						l$: common.l$ + 1,
						ml: newEditRecord,
						ni: common.gT,
						nz: false,
						oR: source,
						ic: $author$project$Common$Model$getTitleFromContent(source)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					$elm$core$Platform$Cmd$none);
			case 3:
				var markupMsg = msg.a;
				if (markupMsg.$ === 1) {
					var editorData = markupMsg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{mm: editorData})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 4:
				var width = msg.a;
				var height = msg.b;
				var newEditRecord = A2($author$project$ScriptaV2$DifferentialCompiler$update, common.ml, common.oR);
				var displaySettings = common.me;
				var newDisplaySettings = _Utils_update(
					displaySettings,
					{gt: (width / 3) | 0});
				var newCompilerOutput = A4(
					$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
					$author$project$Theme$mapTheme(common.h7),
					1,
					newDisplaySettings,
					newEditRecord);
				var newCommon = _Utils_update(
					common,
					{lZ: newCompilerOutput, me: newDisplaySettings, ml: newEditRecord, le: height, gt: width});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					$elm$core$Platform$Cmd$none);
			case 5:
				var keyMsg = msg.a;
				var newCommon = _Utils_update(
					common,
					{
						oh: A2($ohanhi$keyboard$Keyboard$update, keyMsg, common.oh)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					$elm$core$Platform$Cmd$none);
			case 6:
				var newTheme = (common.h7 === 1) ? 0 : 1;
				var newEditRecord = A2($author$project$ScriptaV2$DifferentialCompiler$update, common.ml, common.oR);
				var newCompilerOutput = A4(
					$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
					$author$project$Theme$mapTheme(newTheme),
					1,
					common.me,
					newEditRecord);
				var newCommon = _Utils_update(
					common,
					{lZ: newCompilerOutput, ml: newEditRecord, h7: newTheme});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					$elm$core$Platform$Cmd$none);
			case 7:
				var _v2 = common.iY;
				if (!_v2.$) {
					var doc = _v2.a;
					if (!_Utils_eq(common.oR, doc.iV)) {
						var _v3 = A2(
							$author$project$MainSQLite$update,
							$author$project$MainSQLite$CommonMsg($author$project$Common$Model$SaveDocument),
							model);
						var newModel = _v3.a;
						var saveCmd = _v3.b;
						return _Utils_Tuple2(
							newModel,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										saveCmd,
										A2(
										$elm$random$Random$generate,
										A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$GeneratedId),
										$author$project$MainSQLite$generateId)
									])));
					} else {
						return _Utils_Tuple2(
							model,
							A2(
								$elm$random$Random$generate,
								A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$GeneratedId),
								$author$project$MainSQLite$generateId));
					}
				} else {
					return _Utils_Tuple2(
						model,
						A2(
							$elm$random$Random$generate,
							A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$GeneratedId),
							$author$project$MainSQLite$generateId));
				}
			case 14:
				var id = msg.a;
				var newDocumentContent = '| title\nNew Document\n';
				var newDoc = A6(
					$author$project$Document$newDocument,
					id,
					'New Document',
					A2($elm$core$Maybe$withDefault, '', common.pm),
					newDocumentContent,
					common.h7,
					common.gT);
				var editRecord = A3($author$project$ScriptaV2$DifferentialCompiler$init, $elm$core$Dict$empty, common.l0, newDocumentContent);
				var compilerOutput = A4(
					$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
					$author$project$Theme$mapTheme(common.h7),
					1,
					common.me,
					editRecord);
				var newCommon = _Utils_update(
					common,
					{
						lZ: compilerOutput,
						iY: $elm$core$Maybe$Just(newDoc),
						ml: editRecord,
						m$: newDocumentContent,
						nj: $elm$core$Maybe$Just(id),
						nz: true,
						oR: newDocumentContent,
						ic: 'New Document'
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								newCommon,
								{
									nl: $elm$core$Maybe$Just(newDoc.hg)
								})
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								storage.kH(newDoc),
								storage.kI(newDoc.hg)
							])));
			case 8:
				var _v4 = common.iY;
				if (!_v4.$) {
					var doc = _v4.a;
					var updatedDoc = _Utils_update(
						doc,
						{iV: common.oR, sf: common.gT, h7: common.h7, ic: common.ic});
					var newCommon = _Utils_update(
						common,
						{
							iY: $elm$core$Maybe$Just(updatedDoc),
							nk: common.gT,
							nl: $elm$core$Maybe$Just(doc.hg)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{h: newCommon}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									storage.kH(updatedDoc),
									storage.kI(doc.hg)
								])));
				} else {
					return A2(
						$author$project$MainSQLite$update,
						$author$project$MainSQLite$CommonMsg($author$project$Common$Model$CreateNewDocument),
						model);
				}
			case 9:
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					storage.rZ(id));
			case 10:
				var id = msg.a;
				var newCommon = _Utils_eq(
					$elm$core$Maybe$Just(id),
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.hg;
						},
						common.iY)) ? _Utils_update(
					common,
					{iY: $elm$core$Maybe$Nothing, oR: ''}) : common;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					storage.qX(id));
			case 11:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{oK: !common.oK})
						}),
					$elm$core$Platform$Cmd$none);
			case 12:
				var time = msg.a;
				var shouldSave = (($elm$time$Time$posixToMillis(time) - $elm$time$Time$posixToMillis(common.nk)) > 30000) && ((common.oR !== '') && (!_Utils_eq(common.ni, common.nk)));
				return shouldSave ? A2(
					$author$project$MainSQLite$update,
					$author$project$MainSQLite$CommonMsg($author$project$Common$Model$SaveDocument),
					model) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 13:
				var time = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{gT: time})
						}),
					$elm$core$Platform$Cmd$none);
			case 22:
				return _Utils_Tuple2(model, storage.r$);
			case 21:
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{
									pm: $elm$core$Maybe$Just(name)
								})
						}),
					storage.tb(name));
			case 36:
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{ic: name})
						}),
					$elm$core$Platform$Cmd$none);
			case 16:
				var settings = A7(
					$author$project$Render$Settings$makeSettings,
					common.me,
					$author$project$Theme$mapTheme(common.h7),
					'-',
					$elm$core$Maybe$Nothing,
					1.0,
					common.gt,
					$elm$core$Dict$empty);
				var exportText = A3($author$project$Render$Export$LaTeX$export, common.gT, settings, common.ml.k7);
				var exportData = {iV: exportText, nh: common.l0, oR: common.oR, ic: common.ic};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{oi: 1})
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						$author$project$MainSQLite$CommonMsg,
						$author$project$Frontend$PDF$requestPDF(exportData)));
			case 17:
				var settings = A7(
					$author$project$Render$Settings$makeSettings,
					common.me,
					$author$project$Theme$mapTheme(common.h7),
					'-',
					$elm$core$Maybe$Nothing,
					1.0,
					common.gt,
					$elm$core$Dict$empty);
				var fileName = common.ic + '.tex';
				var exportText = A2($author$project$Render$Export$LaTeX$rawExport, settings, common.ml.k7);
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, fileName, 'application/x-latex', exportText));
			case 18:
				var settings = A7(
					$author$project$Render$Settings$makeSettings,
					common.me,
					$author$project$Theme$mapTheme(common.h7),
					'-',
					$elm$core$Maybe$Nothing,
					1.0,
					common.gt,
					$elm$core$Dict$empty);
				var fileName = common.ic + '.tex';
				var exportText = A3($author$project$Render$Export$LaTeX$export, common.gT, settings, common.ml.k7);
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, fileName, 'application/x-latex', exportText));
			case 19:
				var result = msg.a;
				if (!result.$) {
					var pdfLink = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{od: pdfLink, oi: 2})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								h: _Utils_update(
									common,
									{oi: 0})
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 27:
				var str = msg.a;
				var foundIds = A2(
					$elm$core$List$filter,
					function (id) {
						return id !== '';
					},
					A2($author$project$ScriptaV2$Helper$matchingIdsInAST, str, common.ml.k7));
				var firstId = A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(foundIds));
				var newCommon = _Utils_update(
					common,
					{
						mC: $elm$core$List$isEmpty(foundIds) ? 0 : 1,
						mD: foundIds,
						kL: firstId
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{h: newCommon}),
					(firstId !== '') ? $author$project$MainSQLite$jumpToId(firstId) : $elm$core$Platform$Cmd$none);
			case 23:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{nz: true})
						}),
					A2(
						$elm$core$Task$perform,
						$elm$core$Basics$always(
							$author$project$MainSQLite$CommonMsg($author$project$Common$Model$ResetLoadFlag)),
						$elm$core$Process$sleep(100)));
			case 24:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{nz: false})
						}),
					$elm$core$Platform$Cmd$none);
			case 31:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								common,
								{mg: !common.mg})
						}),
					$elm$core$Platform$Cmd$none);
			case 15:
				var content = msg.a;
				var title = msg.b;
				var currentTime = msg.c;
				var theme = msg.d;
				var id = msg.e;
				var initialDoc = A6(
					$author$project$Document$newDocument,
					id,
					title,
					A2($elm$core$Maybe$withDefault, '', common.pm),
					content,
					theme,
					currentTime);
				var editRecord = A3($author$project$ScriptaV2$DifferentialCompiler$init, $elm$core$Dict$empty, common.l0, content);
				var compilerOutput = A4(
					$author$project$ScriptaV2$DifferentialCompiler$editRecordToCompilerOutput,
					$author$project$Theme$mapTheme(common.h7),
					1,
					common.me,
					editRecord);
				var newCommon = _Utils_update(
					common,
					{
						lZ: compilerOutput,
						iY: $elm$core$Maybe$Just(initialDoc),
						ml: editRecord,
						m$: content,
						nz: true,
						oR: content,
						ic: title
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							h: _Utils_update(
								newCommon,
								{
									nl: $elm$core$Maybe$Just(initialDoc.hg)
								})
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								storage.kH(initialDoc),
								storage.kI(initialDoc.hg)
							])));
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Common$Model$Render = function (a) {
	return {$: 3, a: a};
};
var $author$project$Style$backgroundColor = function (theme) {
	if (!theme) {
		return A2(
			$author$project$Render$Settings$getThemedElementColor,
			function ($) {
				return $.e6;
			},
			$author$project$Theme$mapTheme(theme));
	} else {
		return A3($mdgriffith$elm_ui$Element$rgb255, 48, 54, 59);
	}
};
var $author$project$Style$background_ = function (theme) {
	return $mdgriffith$elm_ui$Element$Background$color(
		$author$project$Style$backgroundColor(theme));
};
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	p6: $elm$core$Maybe$Nothing,
	qj: $elm$core$Maybe$Nothing,
	tq: $elm$core$Maybe$Just(
		{
			dR: 0,
			qF: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			e: _Utils_Tuple2(0, 0),
			eJ: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 0:
					var hoverable = opt.a;
					var _v4 = record.rw;
					if (_v4.$ === 1) {
						return _Utils_update(
							record,
							{
								rw: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 1:
					var focusStyle = opt.a;
					var _v5 = record.H;
					if (_v5.$ === 1) {
						return _Utils_update(
							record,
							{
								H: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.fP;
					if (_v6.$ === 1) {
						return _Utils_update(
							record,
							{
								fP: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			H: function () {
				var _v0 = record.H;
				if (_v0.$ === 1) {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			rw: function () {
				var _v1 = record.rw;
				if (_v1.$ === 1) {
					return 1;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			fP: function () {
				var _v2 = record.fP;
				if (_v2.$ === 1) {
					return 0;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{H: $elm$core$Maybe$Nothing, rw: $elm$core$Maybe$Nothing, fP: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 0:
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 1:
				var styles = el.a.oY;
				var html = el.a.ry;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 2:
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.fP;
			if (_v0 === 1) {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.sE;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.s7, $mdgriffith$elm_ui$Internal$Style$classes.p$, $mdgriffith$elm_ui$Internal$Style$classes.tr]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $author$project$Style$borderColor = function (theme) {
	if (!theme) {
		return A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5);
	} else {
		return A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5);
	}
};
var $mdgriffith$elm_ui$Element$clipY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.qA);
var $author$project$Common$View$container = F2(
	function (model, elements_) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$author$project$Style$background_(model.h7),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(24)
					])),
			elements_);
	});
var $author$project$Style$forceColorStyle = function (theme) {
	if (!theme) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$style, 'color', 'black'));
	} else {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$style, 'color', 'white'));
	}
};
var $author$project$Common$View$headerHeight = 90;
var $author$project$Style$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $author$project$Common$View$appWidth = function (model) {
	return model.gt;
};
var $author$project$Common$View$sidebarWidth = 260;
var $author$project$Common$View$panelWidth = function (model) {
	return A2(
		$elm$core$Basics$max,
		200,
		((((($author$project$Common$View$appWidth(model) - $author$project$Common$View$sidebarWidth) - 16) - 4) - 16) / 2) | 0);
};
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.tj);
var $author$project$Style$textColor = function (theme) {
	if (!theme) {
		return A3($mdgriffith$elm_ui$Element$rgb255, 33, 33, 33);
	} else {
		return A3($mdgriffith$elm_ui$Element$rgb255, 240, 240, 240);
	}
};
var $author$project$Common$View$displayRenderedText = F2(
	function (renderMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(
						A2($elm$core$Basics$max, 100, (model.le - $author$project$Common$View$headerHeight) - 1))),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(
						$author$project$Common$View$panelWidth(model))),
					$mdgriffith$elm_ui$Element$clipY,
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'overflow-x', 'hidden')),
					$author$project$Style$htmlId('rendered-text-container')
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$padding(16),
						$mdgriffith$elm_ui$Element$spacing(24),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$Style$htmlId('rendered-text'),
						$author$project$Style$background_(model.h7),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Font$color(
						$author$project$Style$textColor(model.h7)),
						$author$project$Style$forceColorStyle(model.h7)
					]),
				_List_fromArray(
					[
						A2(
						$author$project$Common$View$container,
						model,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Element$map(renderMsg),
							model.lZ.qh))
					])));
	});
var $author$project$Common$View$editorHeight = function (model) {
	return A2($elm$core$Basics$max, 100, (model.le - $author$project$Common$View$headerHeight) - 1);
};
var $mdgriffith$elm_ui$Element$Keyed$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Keyed(
				_List_fromArray(
					[child])));
	});
var $author$project$Common$View$encodeEditorData = function (_v0) {
	var begin = _v0.qb;
	var end = _v0.rb;
	return A2(
		$elm$json$Json$Encode$encode,
		2,
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'begin',
					$elm$json$Json$Encode$int(begin)),
					_Utils_Tuple2(
					'end',
					$elm$json$Json$Encode$int(end))
				])));
};
var $author$project$Common$View$encodeRefinedSelection = F2(
	function (_v0, _v1) {
		var focusOffset = _v0.rk;
		var anchorOffset = _v0.pZ;
		var text = _v0.o5;
		var begin = _v1.qb;
		var end = _v1.rb;
		return A2(
			$elm$json$Json$Encode$encode,
			2,
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'focusOffset',
						$elm$json$Json$Encode$int(focusOffset)),
						_Utils_Tuple2(
						'anchorOffset',
						$elm$json$Json$Encode$int(anchorOffset)),
						_Utils_Tuple2(
						'text',
						$elm$json$Json$Encode$string(text)),
						_Utils_Tuple2(
						'begin',
						$elm$json$Json$Encode$int(begin)),
						_Utils_Tuple2(
						'end',
						$elm$json$Json$Encode$int(end))
					])));
	});
var $author$project$Common$Model$SelectedText = function (a) {
	return {$: 27, a: a};
};
var $author$project$Common$View$onSelectionChange = function (toMsg) {
	return A2(
		$elm$html$Html$Events$on,
		'selected-text',
		A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeL, toMsg, $author$project$Common$Model$SelectedText),
			A2($elm$json$Json$Decode$field, 'detail', $elm$json$Json$Decode$string)));
};
var $author$project$Common$Model$InputText2 = function (a) {
	return {$: 2, a: a};
};
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $author$project$Common$View$onTextChange = function (toMsg) {
	return A2(
		$elm$html$Html$Events$on,
		'text-change',
		A3(
			$elm$json$Json$Decode$map2,
			F2(
				function (position, source) {
					return toMsg(
						$author$project$Common$Model$InputText2(
							{sO: position, tt: source}));
				}),
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['detail', 'position']),
				$elm$json$Json$Decode$int),
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['detail', 'source']),
				$elm$json$Json$Decode$string)));
};
var $author$project$Common$View$stringOfBool = function (b) {
	return b ? 'true' : 'false';
};
var $author$project$Common$View$editorView = F2(
	function (toMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$author$project$Common$View$onSelectionChange(toMsg)),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$author$project$Common$View$onTextChange(toMsg)),
					$author$project$Style$htmlId('editor-here'),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(
						$author$project$Common$View$editorHeight(model))),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(
						$author$project$Common$View$panelWidth(model))),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 68, 85)),
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.85, 0.85, 0.85)),
					$mdgriffith$elm_ui$Element$Font$size(12)
				]),
			_Utils_Tuple2(
				$author$project$Common$View$stringOfBool(false),
				$mdgriffith$elm_ui$Element$html(
					A3(
						$elm$html$Html$node,
						'codemirror-editor',
						_List_fromArray(
							[
								model.nz ? A2($elm$html$Html$Attributes$attribute, 'load', model.oR) : A2($elm$html$Html$Attributes$attribute, 'noOp', 'true'),
								A2($elm$html$Html$Attributes$attribute, 'text', model.m$),
								A2(
								$elm$html$Html$Attributes$attribute,
								'editordata',
								$author$project$Common$View$encodeEditorData(model.mm)),
								function () {
								var _v0 = model.nG;
								if (_v0.$ === 1) {
									return A2($elm$html$Html$Attributes$attribute, 'noOp', 'true');
								} else {
									var refinedSelection = _v0.a;
									return A2(
										$elm$html$Html$Attributes$attribute,
										'refineselection',
										A2($author$project$Common$View$encodeRefinedSelection, refinedSelection, model.mm));
								}
							}(),
								A2(
								$elm$html$Html$Attributes$attribute,
								'selection',
								$author$project$Common$View$stringOfBool(model.mg))
							]),
						_List_Nil))));
	});
var $author$project$Style$debugTextColor = function (theme_) {
	if (!theme_) {
		return A3($mdgriffith$elm_ui$Element$rgb255, 0, 0, 0);
	} else {
		return A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255);
	}
};
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.iG;
	var top = _v0.k2;
	var left = _v0.jG;
	var right = _v0.kC;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Common$View$header = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px($author$project$Common$View$headerHeight)),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(32),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$Background$color(
				$author$project$Style$backgroundColor(model.h7)),
				$mdgriffith$elm_ui$Element$paddingEach(
				{iG: 0, jG: 18, kC: 18, k2: 0}),
				$author$project$Style$forceColorStyle(model.h7),
				$mdgriffith$elm_ui$Element$Border$widthEach(
				{iG: 1, jG: 0, kC: 0, k2: 0}),
				$mdgriffith$elm_ui$Element$Border$color(
				$author$project$Style$borderColor(model.h7))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Font$color(
						$author$project$Style$debugTextColor(model.h7)),
						$mdgriffith$elm_ui$Element$Font$size(18),
						$mdgriffith$elm_ui$Element$Font$semiBold,
						$author$project$Style$forceColorStyle(model.h7)
					]),
				$mdgriffith$elm_ui$Element$text(model.ic))
			]));
};
var $author$project$Common$View$mainColumnStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
	]);
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.ur;
	var topRight = _v0.ut;
	var bottomLeft = _v0.qn;
	var bottomRight = _v0.qo;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $author$project$Widget$sidebarButton = F3(
	function (theme, msg, label) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 12, 6),
					$mdgriffith$elm_ui$Element$Background$color(
					(!theme) ? A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255) : A3($mdgriffith$elm_ui$Element$rgb255, 48, 54, 59)),
					$mdgriffith$elm_ui$Element$Font$color(
					(!theme) ? A3($mdgriffith$elm_ui$Element$rgb255, 50, 50, 50) : A3($mdgriffith$elm_ui$Element$rgb255, 150, 150, 150)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2(
						$elm$html$Html$Attributes$style,
						'color',
						function () {
							if (!theme) {
								return 'rgb(0, 40, 40)';
							} else {
								return 'rgb(255, 165, 0)';
							}
						}())),
					$mdgriffith$elm_ui$Element$Border$roundEach(
					{qn: 0, qo: 4, ur: 0, ut: 4}),
					$mdgriffith$elm_ui$Element$Border$width(
					(!theme) ? 1 : 1),
					$mdgriffith$elm_ui$Element$Border$color(
					(!theme) ? A4($mdgriffith$elm_ui$Element$rgba, 0.2, 0.2, 0.2, 1.0) : A4($mdgriffith$elm_ui$Element$rgba, 1.0, 0.647, 0.0, 0.5)),
					$mdgriffith$elm_ui$Element$Font$size(14)
				]),
			{
				fI: $mdgriffith$elm_ui$Element$text(label),
				ka: msg
			});
	});
var $author$project$Common$View$newButton = F2(
	function (toMsg, model) {
		return A3(
			$author$project$Widget$sidebarButton,
			model.h7,
			$elm$core$Maybe$Just(
				toMsg($author$project$Common$Model$CreateNewDocument)),
			'New');
	});
var $author$project$Common$View$saveButton = F2(
	function (toMsg, model) {
		return A3(
			$author$project$Widget$sidebarButton,
			model.h7,
			$elm$core$Maybe$Just(
				toMsg($author$project$Common$Model$SaveDocument)),
			'Save');
	});
var $author$project$Common$View$crudButtons = F2(
	function (toMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2($author$project$Common$View$newButton, toMsg, model),
					A2($author$project$Common$View$saveButton, toMsg, model)
				]));
	});
var $author$project$Common$Model$DeleteDocument = function (a) {
	return {$: 10, a: a};
};
var $author$project$Style$formatRelativeTime = F2(
	function (currentTime, savedTime) {
		var savedMillis = $elm$time$Time$posixToMillis(savedTime);
		var currentMillis = $elm$time$Time$posixToMillis(currentTime);
		var diffMillis = currentMillis - savedMillis;
		var seconds = (diffMillis / 1000) | 0;
		var minutes = (seconds / 60) | 0;
		var hours = (minutes / 60) | 0;
		return (!savedMillis) ? 'Never' : ((seconds < 5) ? 'Just now' : ((seconds < 60) ? ($elm$core$String$fromInt(seconds) + ' seconds ago') : ((minutes < 60) ? ($elm$core$String$fromInt(minutes) + (' minute' + (((minutes === 1) ? '' : 's') + ' ago'))) : ((hours < 24) ? ($elm$core$String$fromInt(hours) + (' hour' + (((hours === 1) ? '' : 's') + ' ago'))) : ($elm$core$String$fromInt((hours / 24) | 0) + (' day' + (((((hours / 24) | 0) === 1) ? '' : 's') + ' ago')))))));
	});
var $mdgriffith$elm_ui$Internal$Model$Hover = 1;
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			1,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $author$project$Common$View$documentItem = F3(
	function (toMsg, model, doc) {
		var isActive = function () {
			var _v2 = model.iY;
			if (!_v2.$) {
				var currentDoc = _v2.a;
				return _Utils_eq(currentDoc.hg, doc.hg);
			} else {
				return false;
			}
		}();
		var borderAttrs = isActive ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				function () {
					var _v1 = model.h7;
					if (!_v1) {
						return A3($mdgriffith$elm_ui$Element$rgb255, 64, 64, 64);
					} else {
						return A3($mdgriffith$elm_ui$Element$rgb255, 220, 220, 220);
					}
				}())
			]) : _List_Nil;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(8),
						$mdgriffith$elm_ui$Element$Border$rounded(4),
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0.5, 0.5, 0.5, 0.2))
							]))
					]),
				borderAttrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						fI: A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(2)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(13)
										]),
									$mdgriffith$elm_ui$Element$text(doc.ic)),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(11),
											$mdgriffith$elm_ui$Element$Font$color(
											function () {
												var _v0 = model.h7;
												if (!_v0) {
													return A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0.4, 0.4);
												} else {
													return A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7);
												}
											}())
										]),
									$mdgriffith$elm_ui$Element$text(
										A2($author$project$Style$formatRelativeTime, model.gT, doc.sf)))
								])),
						ka: $elm$core$Maybe$Just(
							toMsg(
								$author$project$Common$Model$LoadDocument(doc.hg)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 1, 0.5, 0.5)),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 0.3, 0.3))
								])),
							$mdgriffith$elm_ui$Element$mouseDown(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 0.2, 0.2))
								]))
						]),
					{
						fI: $mdgriffith$elm_ui$Element$text('×'),
						ka: $elm$core$Maybe$Just(
							toMsg(
								$author$project$Common$Model$DeleteDocument(doc.hg)))
					})
				]));
	});
var $author$project$Common$Model$ExportToLaTeX = {$: 16};
var $author$project$Common$Model$ExportToRawLaTeX = {$: 17};
var $author$project$Common$Model$PrintToPDF = {$: 18};
var $author$project$Common$View$extractFileName = function (pdfLink) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			$elm$core$List$reverse(
				A2($elm$core$String$split, '/', pdfLink))));
};
var $author$project$Config$pdfServUrl = 'https://pdfserv.app/pdf/';
var $author$project$Common$View$exportStuff = F2(
	function (toMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(4),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text('Export')),
					function () {
					var _v0 = model.oi;
					switch (_v0) {
						case 0:
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(4),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A3(
										$author$project$Widget$sidebarButton,
										model.h7,
										$elm$core$Maybe$Just(
											toMsg($author$project$Common$Model$ExportToLaTeX)),
										'PDF'),
										A3(
										$author$project$Widget$sidebarButton,
										model.h7,
										$elm$core$Maybe$Just(
											toMsg($author$project$Common$Model$PrintToPDF)),
										'LaTeX'),
										A3(
										$author$project$Widget$sidebarButton,
										model.h7,
										$elm$core$Maybe$Just(
											toMsg($author$project$Common$Model$ExportToRawLaTeX)),
										'Raw LaTeX')
									]));
						case 1:
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$padding(8)
									]),
								$mdgriffith$elm_ui$Element$text('Processing...'));
						default:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(4),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$newTabLink,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$size(14),
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
											]),
										{
											fI: $mdgriffith$elm_ui$Element$text('Click for PDF'),
											uz: _Utils_ap(
												$author$project$Config$pdfServUrl,
												$author$project$Common$View$extractFileName(model.od))
										}),
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(4),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_fromArray(
											[
												A3(
												$author$project$Widget$sidebarButton,
												model.h7,
												$elm$core$Maybe$Just(
													toMsg($author$project$Common$Model$ExportToLaTeX)),
												'PDF'),
												A3(
												$author$project$Widget$sidebarButton,
												model.h7,
												$elm$core$Maybe$Just(
													toMsg($author$project$Common$Model$PrintToPDF)),
												'LaTeX'),
												A3(
												$author$project$Widget$sidebarButton,
												model.h7,
												$elm$core$Maybe$Just(
													toMsg($author$project$Common$Model$ExportToRawLaTeX)),
												'Raw LaTeX')
											]))
									]));
					}
				}()
				]));
	});
var $author$project$Style$innerColumn = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
		A2($mdgriffith$elm_ui$Element$paddingXY, 16, 16),
		$mdgriffith$elm_ui$Element$spacing(12),
		$mdgriffith$elm_ui$Element$scrollbarY,
		$mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto')),
		$mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'min-height', '0')),
		$mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'box-sizing', 'border-box'))
	]);
var $author$project$Common$Model$InputUserName = function (a) {
	return {$: 21, a: a};
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 6};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 1) {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position) {
				case 2:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hi),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 3:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hi),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 0:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hi),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hi),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = 5;
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 3) {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 5, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 1) {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.qy);
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 8) {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 1) {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Model$InFront = 4;
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 4, element);
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return true;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 1) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (!label.$) {
		var loc = label.a;
		switch (loc) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {iG: -box.iG, jG: -box.jG, kC: -box.kC, k2: -box.k2};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 2:
				return true;
			case 1:
				return false;
			case 0:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 9:
				return _Utils_update(
					els,
					{
						n9: A2($elm$core$List$cons, attr, els.n9)
					});
			case 7:
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I),
						cb: A2($elm$core$List$cons, attr, els.cb),
						n9: A2($elm$core$List$cons, attr, els.n9)
					}) : (stacked ? _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I)
					}) : _Utils_update(
					els,
					{
						n9: A2($elm$core$List$cons, attr, els.n9)
					}));
			case 8:
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I),
						n9: A2($elm$core$List$cons, attr, els.n9)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I),
						n9: A2($elm$core$List$cons, attr, els.n9)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						n9: A2($elm$core$List$cons, attr, els.n9)
					}) : _Utils_update(
					els,
					{
						n9: A2($elm$core$List$cons, attr, els.n9)
					})));
			case 6:
				return _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I)
					});
			case 5:
				return _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I)
					});
			case 4:
				switch (attr.b.$) {
					case 5:
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								I: A2($elm$core$List$cons, attr, els.I),
								cb: A2($elm$core$List$cons, attr, els.cb),
								n9: A2($elm$core$List$cons, attr, els.n9),
								e$: A2($elm$core$List$cons, attr, els.e$)
							});
					case 7:
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									a1: A2($elm$core$List$cons, attr, els.a1),
									n9: A2($elm$core$List$cons, attr, els.n9)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									a1: A2($elm$core$List$cons, attr, els.a1),
									cb: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.cb)),
									n9: A2($elm$core$List$cons, reducedVerticalPadding, els.n9)
								});
						}
					case 6:
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								a1: A2($elm$core$List$cons, attr, els.a1),
								n9: A2($elm$core$List$cons, attr, els.n9)
							});
					case 10:
						return _Utils_update(
							els,
							{
								a1: A2($elm$core$List$cons, attr, els.a1),
								n9: A2($elm$core$List$cons, attr, els.n9)
							});
					case 2:
						return _Utils_update(
							els,
							{
								I: A2($elm$core$List$cons, attr, els.I)
							});
					case 1:
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								I: A2($elm$core$List$cons, attr, els.I)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								n9: A2($elm$core$List$cons, attr, els.n9)
							});
				}
			case 0:
				return els;
			case 1:
				var a = attr.a;
				return _Utils_update(
					els,
					{
						cb: A2($elm$core$List$cons, attr, els.cb)
					});
			case 2:
				return _Utils_update(
					els,
					{
						cb: A2($elm$core$List$cons, attr, els.cb)
					});
			case 3:
				return _Utils_update(
					els,
					{
						n9: A2($elm$core$List$cons, attr, els.n9)
					});
			default:
				return _Utils_update(
					els,
					{
						cb: A2($elm$core$List$cons, attr, els.cb)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				a1: $elm$core$List$reverse(redist.a1),
				I: $elm$core$List$reverse(redist.I),
				cb: $elm$core$List$reverse(redist.cb),
				n9: $elm$core$List$reverse(redist.n9),
				e$: $elm$core$List$reverse(redist.e$)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{a1: _List_Nil, I: _List_Nil, cb: _List_Nil, n9: _List_Nil, e$: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.k2;
	var right = _v0.kC;
	var bottom = _v0.iG;
	var left = _v0.jG;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.nW + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.sL)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.L, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.fI),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.L;
			if (!_v7.$) {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 7)) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						iG: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						jG: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						kC: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						k2: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{iG: 0, jG: 0, kC: 0, k2: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.L;
				if (!_v3.$) {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.L;
					if (!_v4.$) {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.rM)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.rI),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.o5),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.sy)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.fI),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.bU),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.bv))
						]),
					redistributed.cb)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.L;
			if (_v0.$ === 1) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.mz),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.rL)
								])),
						redistributed.n9),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.rK),
												redistributed.e$)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.o5 === '') {
											var _v1 = textOptions.sM;
											if (_v1.$ === 1) {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.o5 === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.rJ)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.o5 + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.mz),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.n9,
										function () {
										var _v2 = textOptions.sM;
										if (_v2.$ === 1) {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.a1, textOptions.o5 === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.qP),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.fI) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.I))),
			textOptions.fI,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		bv: $elm$core$Maybe$Nothing,
		bU: false,
		L: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$Common$View$inputTextWidget = F3(
	function (theme, value, onChange) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(30)),
					$mdgriffith$elm_ui$Element$Font$size(14),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(
					function () {
						if (!theme) {
							return A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7);
						} else {
							return A3($mdgriffith$elm_ui$Element$rgb, 0.3, 0.3, 0.3);
						}
					}()),
					$mdgriffith$elm_ui$Element$Border$rounded(4),
					$mdgriffith$elm_ui$Element$Background$color(
					function () {
						if (!theme) {
							return A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
						} else {
							return A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.1);
						}
					}()),
					$mdgriffith$elm_ui$Element$Font$color(
					function () {
						if (!theme) {
							return A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0);
						} else {
							return A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9);
						}
					}()),
					$mdgriffith$elm_ui$Element$padding(6)
				]),
			{
				fI: $mdgriffith$elm_ui$Element$Input$labelHidden('User name'),
				sy: onChange,
				sM: $elm$core$Maybe$Nothing,
				o5: value
			});
	});
var $author$project$Common$View$nameElement = F2(
	function (toMsg, model) {
		var _v0 = model.pm;
		if (!_v0.$) {
			var name = _v0.a;
			return ($elm$core$String$trim(name) !== '') ? A3(
				$author$project$Common$View$inputTextWidget,
				model.h7,
				name,
				A2($elm$core$Basics$composeL, toMsg, $author$project$Common$Model$InputUserName)) : A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								$author$project$Style$textColor(model.h7))
							]),
						$mdgriffith$elm_ui$Element$text('Your name:')),
						A3(
						$author$project$Common$View$inputTextWidget,
						model.h7,
						'',
						A2($elm$core$Basics$composeL, toMsg, $author$project$Common$Model$InputUserName))
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								$author$project$Style$textColor(model.h7))
							]),
						$mdgriffith$elm_ui$Element$text('Your name:')),
						A3(
						$author$project$Common$View$inputTextWidget,
						model.h7,
						'',
						A2($elm$core$Basics$composeL, toMsg, $author$project$Common$Model$InputUserName))
					]));
		}
	});
var $author$project$Style$rightPanelBackgroundColor = function (theme) {
	if (!theme) {
		return A3($mdgriffith$elm_ui$Element$rgb255, 230, 230, 230);
	} else {
		return $author$project$Style$backgroundColor(theme);
	}
};
var $author$project$Style$rightPanelBackground_ = function (theme) {
	return $mdgriffith$elm_ui$Element$Background$color(
		$author$project$Style$rightPanelBackgroundColor(theme));
};
var $author$project$Common$Model$ToggleTheme = {$: 6};
var $mdgriffith$elm_ui$Element$Font$extraLight = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.tX);
var $author$project$Common$View$sidebarButton2 = F4(
	function (modelTheme, buttonTheme, msg, label) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 12, 6),
					$mdgriffith$elm_ui$Element$Background$color(
					(!modelTheme) ? A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255) : A3($mdgriffith$elm_ui$Element$rgb255, 48, 54, 59)),
					$mdgriffith$elm_ui$Element$Font$color(
					(!modelTheme) ? A3($mdgriffith$elm_ui$Element$rgb255, 50, 50, 50) : A3($mdgriffith$elm_ui$Element$rgb255, 150, 150, 150)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2(
						$elm$html$Html$Attributes$style,
						'color',
						function () {
							if (!modelTheme) {
								return 'rgb(0, 40, 40)';
							} else {
								return 'rgb(255, 165, 0)';
							}
						}())),
					$mdgriffith$elm_ui$Element$Border$roundEach(
					{qn: 0, qo: 4, ur: 0, ut: 4}),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(
					(!modelTheme) ? A4($mdgriffith$elm_ui$Element$rgba, 0.2, 0.2, 0.2, 1.0) : A4($mdgriffith$elm_ui$Element$rgba, 1.0, 0.647, 0.0, 0.5)),
					$mdgriffith$elm_ui$Element$Font$size(16),
					_Utils_eq(buttonTheme, modelTheme) ? $mdgriffith$elm_ui$Element$Font$bold : $mdgriffith$elm_ui$Element$Font$extraLight
				]),
			{
				fI: $mdgriffith$elm_ui$Element$text(label),
				ka: msg
			});
	});
var $author$project$Common$View$toggleTheme = F2(
	function (toMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
					$mdgriffith$elm_ui$Element$Border$rounded(4),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(30))
				]),
			_List_fromArray(
				[
					(model.h7 === 1) ? A4(
					$author$project$Common$View$sidebarButton2,
					model.h7,
					1,
					$elm$core$Maybe$Just(
						toMsg($author$project$Common$Model$ToggleTheme)),
					'Dark') : A3(
					$author$project$Widget$sidebarButton,
					model.h7,
					$elm$core$Maybe$Just(
						toMsg($author$project$Common$Model$ToggleTheme)),
					'Dark'),
					(!model.h7) ? A4(
					$author$project$Common$View$sidebarButton2,
					model.h7,
					0,
					$elm$core$Maybe$Just(
						toMsg($author$project$Common$Model$ToggleTheme)),
					'Light') : A3(
					$author$project$Widget$sidebarButton,
					model.h7,
					$elm$core$Maybe$Just(
						toMsg($author$project$Common$Model$ToggleTheme)),
					'Light')
				]));
	});
var $author$project$Common$View$sidebar = F2(
	function (toMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px($author$project$Common$View$sidebarWidth)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$color(
					$author$project$Style$textColor(model.h7)),
					$mdgriffith$elm_ui$Element$Font$size(14),
					$author$project$Style$rightPanelBackground_(model.h7),
					$author$project$Style$forceColorStyle(model.h7),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{iG: 0, jG: 1, kC: 0, k2: 0}),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					$author$project$Style$innerColumn,
					_List_fromArray(
						[
							A2($author$project$Common$View$nameElement, toMsg, model),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							$mdgriffith$elm_ui$Element$text('')),
							A2($author$project$Common$View$toggleTheme, toMsg, model),
							A2($author$project$Common$View$crudButtons, toMsg, model),
							A2($author$project$Common$View$exportStuff, toMsg, model),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							$mdgriffith$elm_ui$Element$text('')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(4),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(300)),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'overflow-x', 'hidden'))
								]),
							A2(
								$elm$core$List$map,
								A2($author$project$Common$View$documentItem, toMsg, model),
								A2(
									$elm$core$List$sortBy,
									function (d) {
										return d.ic;
									},
									model.mi)))
						]))
				]));
	});
var $author$project$Common$View$mainColumn = F3(
	function (toMsg, renderMsg, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$author$project$Style$background_(model.h7),
				$author$project$Common$View$mainColumnStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'display', 'flex')),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'))
						]),
					_List_fromArray(
						[
							$author$project$Common$View$header(model),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(1)),
									$mdgriffith$elm_ui$Element$Background$color(
									$author$project$Style$borderColor(model.h7))
								]),
							$mdgriffith$elm_ui$Element$none),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'overflow', 'hidden')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'flex', '1')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'min-height', '0'))
								]),
							_List_fromArray(
								[
									A2($author$project$Common$View$editorView, toMsg, model),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(1)),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(
											$author$project$Style$borderColor(model.h7))
										]),
									$mdgriffith$elm_ui$Element$none),
									A2($author$project$Common$View$displayRenderedText, renderMsg, model),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(1)),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(
											$author$project$Style$borderColor(model.h7))
										]),
									$mdgriffith$elm_ui$Element$none),
									A2($author$project$Common$View$sidebar, toMsg, model)
								]))
						]))
				]));
	});
var $author$project$Common$View$noFocus = {p6: $elm$core$Maybe$Nothing, qj: $elm$core$Maybe$Nothing, tq: $elm$core$Maybe$Nothing};
var $author$project$Common$View$view = F3(
	function (toMsg, renderMsg, model) {
		return A3(
			$mdgriffith$elm_ui$Element$layoutWith,
			{
				sE: _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$focusStyle($author$project$Common$View$noFocus)
					])
			},
			_List_fromArray(
				[
					$author$project$Style$background_(model.h7),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'height', '100vh')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'))
				]),
			A3($author$project$Common$View$mainColumn, toMsg, renderMsg, model));
	});
var $author$project$MainSQLite$view = function (model) {
	return A3(
		$author$project$Common$View$view,
		$author$project$MainSQLite$CommonMsg,
		A2($elm$core$Basics$composeL, $author$project$MainSQLite$CommonMsg, $author$project$Common$Model$Render),
		model.h);
};
var $author$project$MainSQLite$main = $elm$browser$Browser$element(
	{mY: $author$project$MainSQLite$init, tI: $author$project$MainSQLite$subscriptions, ux: $author$project$MainSQLite$update, uC: $author$project$MainSQLite$view});
_Platform_export({'MainSQLite':{'init':$author$project$MainSQLite$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (window) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (theme) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (currentTime) {
							return $elm$json$Json$Decode$succeed(
								{gT: currentTime, h7: theme, ii: window});
						},
						A2($elm$json$Json$Decode$field, 'currentTime', $elm$json$Json$Decode$int));
				},
				A2(
					$elm$json$Json$Decode$field,
					'theme',
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
								A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
							]))));
		},
		A2(
			$elm$json$Json$Decode$field,
			'window',
			A2(
				$elm$json$Json$Decode$andThen,
				function (windowWidth) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (windowHeight) {
							return $elm$json$Json$Decode$succeed(
								{le: windowHeight, gt: windowWidth});
						},
						A2($elm$json$Json$Decode$field, 'windowHeight', $elm$json$Json$Decode$int));
				},
				A2($elm$json$Json$Decode$field, 'windowWidth', $elm$json$Json$Decode$int)))))(0)}});}(this));